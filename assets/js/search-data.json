{
  
    
        "post0": {
            "title": "Dataclass - Inhertance and Composition",
            "content": "Objective . By the end of this article, you should be able to: . Construct object in dataclasses. | Understand and Implment inheritance and composition using dataclasses. | Understand field dataclass. | . Before reading this article you must first understand inheritance, composition and some basic python. Visit realpython’s for some refresher. Else lets start!. . Dataclasses . In simple terms Dataclasses are python classes which is suitable for storing objects data. Before dataclasses was introducted in python3.7+, one was required to construct an class (object class name Employee) with data id, name instantiated as such via the __init__() constructor method. . class Employee: def __init__(self, id: int, name: str): self.id = id self.name = name . However with dataclasses, one would construct the same class with data above as such . from dataclass import dataclass @dataclass class Employee: id: int name: str . As we can see above, Dataclasses automates the creation of __init__() constructor method and all we need is to state the object and its type. . We can even go further and create a method in the dataclass method as such . from dataclass import dataclass @dataclass class Employee: id: int name: str def employeeinfo(self): return f&quot;employee name is {self.name} with id {self.id}&quot; . Back to Inhertiance . From realpython’s article, “Inheritance is the mechanism you’ll use to create hierarchies of related classes. These related classes will share a common interface that will be defined in the base classes. Derived classes can specialize the interface by providing a particular implementation where applies”. . Here, we create an HR systems to process payroll for the company’s employees as done in the article. . from typing import List from dataclasses import dataclass class PayrollSystem: def calculate_payroll(self, employees: List[dataclass]) -&gt; None: &quot;&quot;&quot;Takes a collection of employees and prints their id: str, name: str and check amount: float using the .calculate_payroll() method expoed on each employee object. Args: employees (List): collection of employees &quot;&quot;&quot; print(&quot;Calculating Payroll&quot;) print(&quot;===================&quot;) for employee in employees: print(f&quot;Payroll for: {employee.id} - {employee.name}&quot;) print(f&quot;- Check amount: {employee.calculate_payroll()}&quot;) print(&quot;&quot;) . As noted in the comments above the class PayrollSystem has a method calculate_payroll which takes collection(i.e. List) of employees and displays thier id, name and checks amount using calculate_payroll() method, which is part of the employee object. . We go ahead to implement a base class for employee that handles interface for employee types. This base class will futher be iherited by other classes. . from dataclasses import dataclass from typing import Union @dataclass class Employee: &quot;&quot;&quot;Base class for Employees. Common interface for every employee type. Constructed with id: int, name: str &quot;&quot;&quot; id: int name: str . We further create a class SalaryEmployee which is a Subclass of the class Employee. . from dataclasses import dataclass from typing import Union @dataclass class SalaryEmployee(Employee): &quot;&quot;&quot;Salary Employee Inherits Employee base class and add weekly_salary data. &quot;&quot;&quot; weekly_salary: Union[float, int] def calculate_payroll(self) -&gt; Union[float, int]: &quot;&quot;&quot;Calulate the payroll and returns pay. &quot;&quot;&quot; return self.weekly_salary . From the code above, we went past inheriting the base class and add weekly_salary data, plus added a method calculate_payroll which returns weekly_salary data. . Running the code above, we will realize the dataclass decorator automatically initialized weekly_salary and even initialized the members of the base class. . Guess what, this is one of dataclass superpowers!. . We can go further and extend our base class in constucting other classes such as HourEmployees and CommissionEmployee. We can even add other data to it and create methods as done below. . @dataclass class HourlyEmployee(Employee): &quot;&quot;&quot;Hourly Employee Inherits Employee base class and add hours_worked and hour_rate data. &quot;&quot;&quot; hours_worked: Union[float, int] hour_rate: Union[float, int] def calculate_payroll(self) -&gt; Union[float, int]: &quot;&quot;&quot;Calulate the payroll and returns pay. &quot;&quot;&quot; return self.hours_worked * self.hour_rate @dataclass class CommissionEmployee(SalaryEmployee): &quot;&quot;&quot;Comission Employee Inherits SalaryEmployee base class and add commission data. &quot;&quot;&quot; commission: int def calculate_payroll(self) -&gt; Union[float, int]: &quot;&quot;&quot;Calulate the payroll from SalaryEmployee class using super() and adds commisssion. &quot;&quot;&quot; fixed = super().calculate_payroll() return fixed + self.commission . Testing our implement above we pass them to the PayrollSystem class to process payroll; . salary_employee = SalaryEmployee(1, &quot;Sam May&quot;, 1500) hourly_employee = HourlyEmployee(2, &#39;Jane Doe&#39;, 40, 15) commission_employee = CommissionEmployee(3, &#39;Kevin Bacon&#39;, 1000, 250) payroll_system = PayrollSystem() payroll_system.calculate_payroll([salary_employee, hourly_employee, commission_employee]) . Running the progam and results below; . # output below Calculating Payroll =================== Payroll for: 1 - Sam May - Check amount: 1500 Payroll for: 2 - Jane Doe - Check amount: 600 Payroll for: 3 - Kevin Bacon - Check amount: 1250 . As you can see, three employee objects was created, passed on the payroll system, which in turn used the calculate_payroll method to calculate the payroll for each employee and prints the results. . Abstract Base Class and Dataclass in Pyton . As I noted earlier dataclasses automate automates the creation of __init__() constructor method. We can also apply python abc module which provide a functionality to prevent creating objects from abstract base classes. . Here is an example below; . from dataclasses import dataclass from abc import ABC, abstractmethod from typing import Union @dataclass class Employee_(ABC): id: int name: str @abstractmethod def calculate_payroll(self): pass @dataclass class SalaryEmployee(Employee_): weekly_salary: Union[float, int] def calculate_payroll(self) -&gt; Union[float, int]: return self.weekly_salary @dataclass class HourlyEmployee(Employee_): hours_worked: Union[float, int] hour_rate: Union[float, int] def calculate_payroll(self) -&gt; Union[float, int]: return self.hours_worked * self.hour_rate @dataclass class CommissionEmployee(SalaryEmployee): commission: int def calculate_payroll(self) -&gt; Union[float, int]: fixed = super().calculate_payroll() return fixed + self.commission . Testing our implementation as done above, we get same results below; . # output below Calculating Payroll =================== Payroll for: 1 - Sam May - Check amount: 1500 Payroll for: 2 - Jane Doe - Check amount: 600 Payroll for: 3 - Kevin Bacon - Check amount: 1250 . We can even go further and extend the derived class to create another derived classes and further add method work to it as below. . class Manager(SalaryEmployee): def work(self, hours: Union[float, int]) -&gt; str: print(f&quot;{self.name} screams and yells for {hours} hours&quot;) class Secretary(SalaryEmployee): def work(self, hours: Union[float, int]) -&gt; str: print(f&quot;{self.name} expands {hours} hours doing office paperwork&quot;) class SalesPerson(CommissionEmployee): def work(self, hours: Union[float, int]) -&gt; str: print(f&quot;{self.name} expands {hours} hours on the phone&quot;) class FactoryWorker(HourlyEmployee): def work(self, hours: Union[float, int]) -&gt; str: print(f&quot;{self.name} manufactures gadgets for {hours} hours&quot;) . To test our work method is working we create productivity platform, which display the work and hours the employee does. . import Employee from typing import Union, List class ProductivitySystem: def track(self, employees: List[Employee], hours: Union[float, int]) -&gt; None: print(&quot;Tracking Employee Productivity&quot;) print(&quot;==============================&quot;) for employee in employees: result = employee.work(hours) print(f&#39;{employee.name}: {result}&#39;) print(&#39;&#39;) . So far, we expect all our implemenation above to work. Testing, we implement a program (as below) which brings all together. . import PayrollSystem import Manager, Secretary, SalesPerson, FactoryWorker import ProductivitySystem manager = Manager(id=1, name=&#39;Mary Poppins&#39;, weekly_salary=3000) secretary = Secretary(id=2, name=&#39;John Smith&#39;, weekly_salary=1500) sales_guy = SalesPerson(id=3, name=&#39;Kevin Bacon&#39;, weekly_salary=1000, commission=250) factory_worker = FactoryWorker(id=4, name=&#39;Jane Doe&#39;, hours_worked=40, hour_rate=15) company_employees = [manager, secretary, sales_guy,factory_worker, ] productivity_system = ProductivitySystem() productivity_system.track(company_employees, 40) payroll_system = PayrollSystem() payroll_system.calculate_payroll(company_employees) . Running our code above we get the output below, which indicate all is fine as expected. . # output below Tracking Employee Productivity ============================== Mary Poppins screams and yells for 40 hours Mary Poppins: None John Smith expands 40 hours doing office paperwork John Smith: None Kevin Bacon expands 40 hours on the phone Kevin Bacon: None Jane Doe manufactures gadgets for 40 hours Jane Doe: None Calculating Payroll =================== Payroll for: 1 - Mary Poppins - Check amount: 3000 Payroll for: 2 - John Smith - Check amount: 1500 Payroll for: 3 - Kevin Bacon - Check amount: 1250 Payroll for: 2 - Jane Doe - Check amount: 600 . To further test how multiple inheritance work for dataclasses, we will go ahead and create other functions, then perfrom some multiple inheritance here. . We go ahead to add other roles and policies for employees. . from dataclasses import dataclass from typing import Union class ManagerRole: def work(self, hours: Union[float, int]) -&gt; str: return f&quot;screams and yells for {hours} hours.&quot; class SecretaryRole: def work(self, hours: Union[float, int]) -&gt; str: return f&quot;expands {hours} hours doing office paperwork.&quot; class SalesRole: def work(self, hours: Union[float, int]) -&gt; str: return f&quot;expands {hours} hours on phone.&quot; class FactoryRole: def work(self, hours: Union[float, int]) -&gt; str: return f&quot;manufactures gadgets for {hours} hours.&quot; @dataclass class SalaryPolicy: weekly_salary: Union[float, int] def calculate_payroll(self) -&gt; Union[float, int]: return self.weekly_salary @dataclass class HourlyPolicy: hours_worked: Union[float, int] hour_rate: Union[float, int] def calculate_payroll(self) -&gt; Union[float, int]: return self.hours_worked * self.hour_rate @dataclass class CommissionPolicy(SalaryPolicy): commission: int def calculate_payroll(self) -&gt; Union[float, int]: fixed = super().calculate_payroll() return fixed + self.commission . We go further to modify some class implemented earlier which make use of multiple inheritance. . from dataclasses import dataclass from typing import Union import SalaryPolicy, CommissionPolicy, HourlyPolicy import ManagerRole, SecretaryRole, SalesRole, FactoryRole @dataclass class Employee(): id: int name: str @dataclass class Manager(Employee, ManagerRole, SalaryPolicy): id: int name: str weekly_salary: Union[float, int] def __post_init__(self): SalaryPolicy.__init__(self, self.weekly_salary) super().__init__(self.id, self.name) @dataclass class Secretary(Employee, SecretaryRole, SalaryPolicy): id: int name: str weekly_salary: Union[float, int] def __post_init__(self): SalaryPolicy.__init__(self, self.weekly_salary) super().__init__(self.id, self.name) @dataclass class SalesPerson(Employee, SalesRole, CommissionPolicy): id: int name: str weekly_salary: Union[float, int] commission: int def __post_init__(self): CommissionPolicy.__init__(self, self.weekly_salary, self.commission) super().__init__(self.id, self.name) @dataclass class FactoryWorker(Employee, FactoryRole, HourlyPolicy): id: int name: str hours_worked: Union[float, int] hour_rate: Union[float, int] def __post_init__(self): HourlyPolicy.__init__(self, self.hours_worked, self.hour_rate) super().__init__(self.id, self.name) @dataclass class TemporarySecretary(Employee, SecretaryRole, HourlyPolicy): id: int name: str hours_worked: Union[float, int] hour_rate: Union[float, int] def __post_init__(self): HourlyPolicy.__init__(self, self.hours_worked, self.hour_rate) super().__init__(self.id, self.name) . From the code above, I guess you’re wondering there is the use of __post_init__ method and its purpose. . Though dataclass decorator automate creation of __init__ method for us, we would like to get control of this process to tune it for our use. Including __post_init__ in our class, we can provide other instruction for modifying fields or even instantiate other data. . As you can see in the Manager class, we inherited Employee, ManagerRole, SalaryPolicy class and used __post_init__ to initialize SalaryPolicy class. We also used super(), which allows us to call methods of the superclass in our subclass. . To test our multple inheritance, we modify our program as done below . import Manager, Secretary, SalesPerson, FactoryWorker, TemporarySecretary import PayrollSystem import ProductivitySystem manager = Manager(id=1, name=&#39;Mary Poppins&#39;, weekly_salary=3000) secretary = Secretary(id=2, name=&#39;John Smith&#39;, weekly_salary=1500) sales_guy = SalesPerson(id=3, name=&#39;Kevin Bacon&#39;, weekly_salary=1000, commission=250) factory_worker = FactoryWorker(id=2, name=&#39;Jane Doe&#39;, hours_worked=40, hour_rate=15) temporary_secretary = TemporarySecretary(id=5, name=&#39;Robin Williams&#39;, hours_worked=40, hour_rate=9) employees = [manager, secretary, sales_guy, factory_worker, temporary_secretary] productivity_system = ProductivitySystem() productivity_system.track(employees, 40) payroll_system = PayrollSystem() payroll_system.calculate_payroll(employees=employees) . Running the code above, as done ealier we get the same output as ealier. . # output below Tracking Employee Productivity ============================== Mary Poppins screams and yells for 40 hours Mary Poppins: None John Smith expands 40 hours doing office paperwork John Smith: None Kevin Bacon expands 40 hours on the phone Kevin Bacon: None Jane Doe manufactures gadgets for 40 hours Jane Doe: None Calculating Payroll =================== Payroll for: 1 - Mary Poppins - Check amount: 3000 Payroll for: 2 - John Smith - Check amount: 1500 Payroll for: 3 - Kevin Bacon - Check amount: 1250 Payroll for: 2 - Jane Doe - Check amount: 600 . Compostion Here . From realpython’s article, “Composition is an OO design concept that models has a realationship. In composition, a class known as composite contains an object of another class known to as components”. . One advantage of composition compared to inheritance is, one component can be changed and such change can rarely affect the composite class. Vice versa a change in the composite class does not affect the component class. . This advantage enables code adaptability and code base changes without introducing problems. . Lets go ahead and implement a Address class which components of an address using dataclass; . from dataclasses import dataclass, field from typing import Optional, Union, Dict @dataclass class Address: street: str city: str state: str zipcode: str street2: Optional[str] = &#39;&#39; def __str__(self) -&gt; str: &quot;&quot;&quot;Provides pretty response of address.&quot;&quot;&quot; lines = [self.street] if self.street2: lines.append(self.street2) lines.append(f&quot;{self.city}, {self.state} {self.zipcode}&quot;) return &quot; n&quot;.join(lines) . In the code above, we implement the __str__ method which provides us with pretty implementation of our Address object. . Testing our implmentation works, we run the following code . address1 = Address(street=&quot;55 main st.&quot;, city=&quot;concord&quot;, state=&quot;NH&quot;, zipcode=&quot;03301&quot;) address2 = Address(street=&quot;55 main st.&quot;, city=&quot;concord&quot;, state=&quot;NH&quot;, zipcode=&quot;03301&quot;, street2=&quot;denso&quot;) print(address1) print(address2) . This gives output . # output below 55 main st. concord, NH 03301 55 main st. denso concord, NH 03301 . Since all is working as expected, we modify the Employee class by adding the Address class as a composite. . import Address from dataclasses import dataclass from typing import Union @dataclass class Employee(): &quot;&quot;&quot;We making the Employee an abstract base class. There are two side effects here; * You telling users of the module that objects of type Employee can&#39;t be created. * You telling other devs working on the hr module hat if they derive from Employee, the they must override the .calculate_payroll abstract method.&quot;&quot;&quot; id: int name: str address: Address = None . We further go ahead and modify the PayrollSystem class to print employees address if present. . from typing import List from dataclasses import dataclass class PayrollSystem: def calculate_payroll(self, employees: List[dataclass]) -&gt; None: &quot;&quot;&quot;Takes a collection of employees and prints their id: str, name: str and check amount: float using the .calculate_payroll() method expoed on each employee object. Args: employees (List): collection of employees &quot;&quot;&quot; print(&quot;Calculating Payroll&quot;) print(&quot;===================&quot;) for employee in employees: print(f&quot;Payroll for: {employee.id} - {employee.name}&quot;) print(f&quot;- Check amount: {employee.calculate_payroll()}&quot;) if employee.address: print(&quot;- Sent to:&quot;) print(employee.address) print(&quot;&quot;) . We also modify our program to include Address as done below . import Manager, Secretary, SalesPerson, FactoryWorker, TemporarySecretary import Address import PayrollSystem import ProductivitySystem manager = Manager(id=1, name=&#39;Mary Poppins&#39;, weekly_salary=3000) manager.address = Address(&quot;121 Admin Rd&quot;, &quot;Concord&quot;, &quot;NH&quot;, &quot;03301&quot;) secretary = Secretary(id=2, name=&#39;John Smith&#39;, weekly_salary=1500) secretary.address = Address(&#39;67 Paperwork Ave.&#39;, &#39;Manchester&#39;, &#39;NH&#39;, &#39;03101&#39;) sales_guy = SalesPerson(id=3, name=&#39;Kevin Bacon&#39;, weekly_salary=1000, commission=250) factory_worker = FactoryWorker(id=2, name=&#39;Jane Doe&#39;, hours_worked=40, hour_rate=15) temporary_secretary = TemporarySecretary(id=5, name=&#39;Robin Williams&#39;, hours_worked=40, hour_rate=9) employees = [manager, secretary, sales_guy, factory_worker, temporary_secretary,] productivity_system = ProductivitySystem() productivity_system.track(employees, 40) payroll_system = PayrollSystem() payroll_system.calculate_payroll(employees) . Running the code above, as done ealier we get the same output as ealier. . Tracking Employee Productivity ============================== Mary Poppins: screams and yells for 40 hours. John Smith: expands 40 hours doing office paperwork. Kevin Bacon: expands 40 hours on phone. Jane Doe: manufactures gadgets for 40 hours. Robin Williams: expands 40 hours doing office paperwork. Calculating Payroll =================== Payroll for: 1 - Mary Poppins - Check amount: 3000 - Sent to: 121 Admin Rd Concord, NH 03301 Payroll for: 2 - John Smith - Check amount: 1500 - Sent to: 67 Paperwork Ave. Manchester, NH 03101 Payroll for: 3 - Kevin Bacon - Check amount: 1250 Payroll for: 2 - Jane Doe - Check amount: 600 Payroll for: 5 - Robin Williams - Check amount: 360 . As we can see the address was printed out if present. As we can see, this design is flexible and we can change Address class without having impact on the Employee class. . Dataclass field . As you can see, using dataclass is cool and simple. However, in some cases, we will require or like to customize our dataclass field. This is where we the use of field comes to play. Also, with the default parameter, we can define the default value of our attributes we declared. . Example One: We use field to define default values from a function for an attributes: . import uuid from dataclasses import dataclass, field def gen_random_id(): return uuid.uuid1().hex @dataclass class Employee: name: str id: str = field(default_factory=gen_random_id) # Testing our implementation Employee(name=&quot;kwesi&quot;) #output Employee(name=&#39;kwesi&#39;, id=&#39;54073e27060b11ec85e6a44cc81af35c&#39;) . In the code above, we have a function that generate a random id using uuid and Employee class attribute id uses it. . Example Two: We use field to define default values for a class attribute. . import uuid from dataclasses import dataclass, field def gen_random_id(): return uuid.uuid1().hex @dataclass class Employee: name: str id: str = field(default_factory=gen_random_id) working_hrs: int = field(default=40) # Testing our implementation Employee(name=&quot;kwesi&quot;) . # output Employee(name=&#39;kwesi&#39;, id=&#39;f6b1f661060d11ec9ec9a44cc81af35c&#39;, working_hrs=40) . In the code above, we extended the function in example one by defining a default value for working_hrs attribute. . Example Three: Here things get a bit complicated. We create a new class EmployeeDB, which we use field to define the class attribute _employees. We further use __post_init__ to modify the _employees data and finally we created a method to display all _employees when called. . import uuid from dataclasses import dataclass, field from typing import List, Dict def gen_random_id(): return uuid.uuid1().hex @dataclass class Employee: name: str id: str = field(default_factory=gen_random_id) working_hrs: int = field(default=40) @dataclass class EmployeesDB: _employees: List[Dict[str, Employee]] = field(default=Dict) def __post_init__(self): self._employees = [{ &quot;emp1&quot;: Employee(&quot;Doe&quot;), &quot;emp2&quot;: Employee(&quot;Jane&quot;, working_hrs=50), &quot;emp3&quot;: Employee(&quot;Kwesi&quot;, working_hrs=20), }] @property def employees(self): return [employee for employee in self._employees] # Testing our implementation EmployeesDB().employees . #output [{&#39;emp1&#39;: Employee(name=&#39;Doe&#39;, id=&#39;b6809f19061111ec86cba44cc81af35c&#39;, working_hrs=40), &#39;emp2&#39;: Employee(name=&#39;Jane&#39;, id=&#39;b680a0cc061111ecb53ca44cc81af35c&#39;, working_hrs=50), &#39;emp3&#39;: Employee(name=&#39;Kwesi&#39;, id=&#39;b680a120061111eca92ca44cc81af35c&#39;, working_hrs=20)}] . For more about field check the official documentation on dataclass. . Check code on github. .",
            "url": "https://emilearthur.github.io/fastblog/python/oop/data/2021/08/18/DataClass-Inheritance-and-Composition.html",
            "relUrl": "/python/oop/data/2021/08/18/DataClass-Inheritance-and-Composition.html",
            "date": " • Aug 18, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Product Manager (PM)- What and How- Am I One?",
            "content": "Frequently, I am conflicted when I’m asked, Are you doing PM stuff? Are you a PM?; and What is a PM? . What is a PM . According to Wikipedia, Product Management “is an organizational function within a company dealing with new product development, business justification, planning, verification, forecasting, pricing, product launch, and marketing of a product or products at all stages of the product lifecycle”. . Wikipedia further defines a Product Manager as a “professional role that is responsible for the development of products for an organization, known as the practice of product management. Product managers own the business strategy behind a product (both physical and digital products), specify its functional requirements, and generally manage the launch of features”. . Are you doing PM stuff? Are you a PM? . Taking into consideration the above definitions, then i think i may consider myself as somewhat a project manager who has done a couple of PM stuff. Wait, did I say “somewhat”? Hmmm, let me rephrase, taking the definitions above plus reading SHERIF MANSOUR article, I am a PM and, I am doing PM stuff. . In the last year plus some months, I happen to be doing PM stuff by chance. By chance, I mean; I was not ready, did not know all, plus I was not a fan of writing (Note PM job involves 80% documentation and writing, and trust me you should be good at it!) and I was the last man standing in the department. . Types of PM? . Reading this article, Jonathan Golden mentions there are three types of PMs; . Pioneers - These are PMs who are excited to build prototypes and are mostly entrepreneurs and founders. They are risk-takers and always want to create something new. . | Settlers - These are PMs who focus on impact. They care about reaching lots of people - growth, plus they’re obsessed with optimizing. Settlers PMs are highly analytical, driven by metrics, work in hand with data science teams. . | Town Planners - These are PMs that are platform managers. They lead when it’s time to build an infrastructure or systems to handle scale and accommodate the product’s use case for now and in the futures. . | . Which Type of PM am I? . I somehow believe no PM is 100% in all the types above; however, I might be wrong as I have read about some PM who started as Settlers, become Town Planners and Build product from the ground up. For me, I’m not special and, from what I have done and what I continue to do in and outside my current organization, I would say I am: . 50% Settler - I helped build and designed a USSD application that optimizes our lead conversion process and customer repayment processes. This USSD application helped influence how leads convert to applicants compared to the old method used. Further, it also influenced how users make payment when their loans are due. . | 45% Town Planner - From the start, I joined my current organization; growth was the focus and, my role was to identify systems that were preventing us from achieving targets. In the process of discovering, I developed and built metrics to measure all third-party systems, which played a critical role and led migrations that replaced certain providers that were not functioning per our threshold. After, I built backup mechanisms for some systems, improved and introduced some new platforms that could do some jobs and even reduce cost in some process. In this process, our team discovered USSD and, I extended it to repayments. . | 5% Pioneer - I failed to build Occupy as I made some steps and, I learnt some lessons in the process. But trust me, I will revisit it soon and make it plus other ideas in my head work. I know I would be a builder and risk-taker soon and am looking forward to that day. . | . Thanks for reading my article, and I hope you enjoyed it and also discover yourself. . I am Frederick Emile Bondzie-Arthur, a Business and Systems Analyst and Product and Information Technology lead at Fido MicroCredit Limited. Aside PM stuff, I have skills in backed dev (Python: Django Rest Framework and FastAPI, Learning Go), Machine Learning and Deep Learning. You can find my work at github . Reference . Produt Management - Wikipedia . Product Manager - Wikipedia . Product Manager - Atlassian . The power of elastic product team - Airbnb .",
            "url": "https://emilearthur.github.io/fastblog/about/career/product%20management/2021/06/28/Product-Manager(PM)-Why-And-What-Makes-Me-One.html",
            "relUrl": "/about/career/product%20management/2021/06/28/Product-Manager(PM)-Why-And-What-Makes-Me-One.html",
            "date": " • Jun 28, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Jane Street Prediction Competition with Fastai+PCA+XGBOOST",
            "content": "This notebook ocntains my solution (submission not made yet due some challenges with my submission pipeline) to the Kaggle&#39;s Jane Prediction Challenge. . Introduction . Jane Street Market Prediction is a competition organized by kaggle, which you build a model to predict financial market. This competition is a classification competition with the goal to predict an action of class 0 or 1. . More about the competition can be found in the link above. . Why THIS Competition . Currently, I am Reading Jeremy Howard and Sylvain Gugger&#39;s Deep Learning for Coders with Fastai and Pytorch book and to understand more about using NN to solve tabular challenges, I entered this challenge. . Further, the rules of the competition that caught my attention, as your model is passed through 1M test dataset in 5 hours. This means your model should be optimzed, efficient and fast. . My Goal: . My major goal in 2021 is to solve more data science problem and also ship codes in production and I believe participating in kaggle challenges will help me achieve that. . To to waste your time let start. . Installing libraries and downloading Datasets . %%capture # installing libaries !pip install fastai==2.1.2 !pip install --upgrade fastai !pip install nbdev !pip install numba !pip install optuna !pip install xgboost !pip install kaggle import sys from fastai.tabular.all import * . import joblib import numpy as np import numpy.ma as ma from numba import njit import seaborn as sns import matplotlib matplotlib.rc(&#39;image&#39;, cmap=&#39;Greys&#39;) from IPython.display import Image, display_svg, SVG import time from tqdm.notebook import tqdm #import cudf # install cudf on google colab before running this. import pandas as pd from pandas.api.types import is_string_dtype, is_numeric_dtype, is_categorical_dtype pd.options.display.max_rows = 20 pd.options.display.max_columns = 8 from sklearn.metrics import accuracy_score from sklearn.metrics import confusion_matrix from sklearn.metrics import roc_auc_score from sklearn.metrics import roc_curve from sklearn.inspection import plot_partial_dependence from sklearn.decomposition import PCA from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler import xgboost as xgb import optuna from fastai.tabular.all import * import torch.nn as nn import torch.nn.functional as F import torch.optim as optim import torch . Downloading datasets from Kagggle. . Before running this make sure you have registered for kaggle, accepted the competition rules and also generated a key to access kaggle&#39;s API. . creds = &#39;{&quot;username&quot;:&quot;xxxxxxxx&quot;,&quot;key&quot;:&quot;xxxxxxxxxxxxx&quot;}&#39; . cred_path = Path(&#39;~/.kaggle/kaggle.json&#39;).expanduser() if not cred_path.exists(): cred_path.parent.mkdir(exist_ok=True) cred_path.write_text(creds) cred_path.chmod(0o600) . from kaggle import api . path = URLs.path(&#39;jane_street_prediction&#39;) print(path) Path.BASE_PATH = path . if not path.exists(): path.mkdir(parents=true) api.competition_download_cli(&#39;jane-street-market-prediction&#39;,path=path) file_extract(path/&#39;jane-street-market-prediction.zip&#39;) path.ls(file_type=&#39;text&#39;) . !rm -rf /root/.fastai/archive/jane_street_prediction/jane-street-market-prediction.zip . Loading Data and Preprocessing . &quot;&quot;&quot; %%time train_cudf = cudf.read_csv(path/&#39;train.csv&#39;, nrows=250000) df = train_cudf.to_pandas() del train_cudf features = pd.read_csv(path/&#39;features.csv&#39;) example_test = pd.read_csv(path/&#39;example_test.csv&#39;) sample_prediction_df = pd.read_csv(path/&#39;example_sample_submission.csv&#39;) print (&quot;Data is loaded!&quot;) &quot;&quot;&quot; . &#39; n%%time ntrain_cudf = cudf.read_csv(path/ &#39;train.csv &#39;, nrows=250000) ndf = train_cudf.to_pandas() ndel train_cudf nfeatures = pd.read_csv(path/ &#39;features.csv &#39;) nexample_test = pd.read_csv(path/ &#39;example_test.csv &#39;) nsample_prediction_df = pd.read_csv(path/ &#39;example_sample_submission.csv &#39;) nprint (&#34;Data is loaded!&#34;) n&#39; . df = pd.read_csv(path/&#39;train.csv&#39;, nrows=200000) features = pd.read_csv(path/&#39;features.csv&#39;) example_test = pd.read_csv(path/&#39;example_test.csv&#39;) sample_prediction_df = pd.read_csv(path/&#39;example_sample_submission.csv&#39;) . print(&#39;train shape is {}&#39;.format(df.shape)) print(&#39;features shape is {}&#39;.format(features.shape)) print(&#39;example_test shape is {}&#39;.format(example_test.shape)) print(&#39;sample_prediction_df shape is {}&#39;.format(sample_prediction_df.shape)) . train shape is (200000, 138) . df.head() . date weight resp_1 resp_2 ... feature_127 feature_128 feature_129 ts_id . 0 0 | 0.000000 | 0.009916 | 0.014079 | ... | 12.600292 | 2.301488 | 11.445807 | 0 | . 1 0 | 16.673515 | -0.002828 | -0.003226 | ... | 2.297459 | -1.304614 | 1.898684 | 1 | . 2 0 | 0.000000 | 0.025134 | 0.027607 | ... | 10.060014 | 6.638248 | 9.427299 | 2 | . 3 0 | 0.000000 | -0.004730 | -0.003273 | ... | 1.266037 | 3.856384 | 1.013469 | 3 | . 4 0 | 0.138531 | 0.001252 | 0.002165 | ... | 5.233243 | 0.362636 | 3.926633 | 4 | . 5 rows × 138 columns . df = df[df[&#39;weight&#39;] != 0].reset_index(drop = True) . dep_var = &#39;action&#39; df[dep_var] = (((df[&#39;resp&#39;]* df[&#39;weight&#39;])&gt;0)*1).astype(&#39;category&#39;) . df = df.loc[:, ~df.columns.str.contains(&#39;resp&#39;)] . features_one = [col for col in list(df.columns) if &#39;feature&#39; in col] features_nn = features_one + [dep_var] len(features_one), len(features_nn) . (130, 131) . Due to the nature of the competition, the code below was not executed in my final submission as it decreased the number of iterations/sec. Ideally, the number of iterations/sec should be about 50-60. However the code below when included in the final run, reduces the number of iterations/sec to 7 (maximum). . Also, it is important to note that the accuray of our model slightly increases when applied. . def augment_df(df, features): for feature in features: df[f&#39;{feature}_sq&#39;] = np.square(df[feature].to_numpy()) #df[f&#39;{feature}_log&#39;] = df[feature].apply(lambda x: 0 if x==0 else np.log(x)) df[f&#39;{feature}_log&#39;] = ma.log(df[feature].to_numpy()) df[&#39;feature_min&#39;] = df[features].min(axis=1) df[&#39;feature_mean&#39;] = df[features].mean(axis=1) df[&#39;feature_max&#39;] = df[features].max(axis=1) df[&#39;feature_median&#39;] = df[features].median(axis=1) df[&#39;feature_std&#39;] = df[features].std(axis=1) df[&#39;feature_var&#39;] = df[features].var(axis=1) df[&#39;feature_abs_mean&#39;] = df[features].abs().mean(axis=1) df[&#39;feature_abs_median&#39;] = df[features].abs().median(axis=1) df[&#39;feature_abs_std&#39;] = df[features].abs().std(axis=1) df[&#39;feature_skew&#39;] = df[features].skew(axis=1) df[&#39;feature_kurt&#39;] = df[features].kurt(axis=1) df[&#39;feature_sq_kurt&#39;] = np.square(df[features_one].kurt(axis=1)) return df . %time df = augment_df(df, features_one) . CPU times: user 6.07 s, sys: 445 ms, total: 6.51 s Wall time: 6.53 s . features_nn = [col for col in list(df.columns) if &#39;feature&#39; in col] + [dep_var] feature_nn_test = [col for col in list(df.columns) if &#39;feature&#39; in col] len(feature_nn_test), len(features_nn) . (402, 403) . df.shape . (155528, 406) . df_median = df.median() # replacing missing values. df = df.fillna(df_median) . df.isnull().sum().sum() . 0 . df[feature_nn_test].astype(&#39;float32&#39;) df[dep_var].astype(&#39;int&#39;) . 0 0 1 0 2 1 3 1 4 0 .. 155523 1 155524 1 155525 1 155526 1 155527 1 Name: action, Length: 155528, dtype: int64 . utility function. . # getting continous and categorical variables from dataset def cont_cat_split(df, max_card=20, dep_var=None): &quot;Helper function that returns column names of cont and cat variables from given `df`.&quot; cont_names, cat_names = [], [] for label in df: if label in L(dep_var): continue if (pd.api.types.is_integer_dtype(df[label].dtype) and df[label].unique().shape[0] &gt; max_card or pd.api.types.is_float_dtype(df[label].dtype)): cont_names.append(label) else: cat_names.append(label) return cont_names, cat_names cont_nn,cat_nn = cont_cat_split(df.loc[:,features_nn], max_card=9000, dep_var=dep_var) . def create_train_ds(df, cat, cont, y_name, splits): splits = RandomSplitter(valid_pct=0.1)(range_of(df)) procs = [Categorify, FillMissing, Normalize] to = TabularPandas(df, procs, cat, cont, y_names=dep_var, splits=splits) xs, y = to.train.xs.astype(np.float32), to.train.y.astype(np.float32) valid_xs,valid_y = to.valid.xs.astype(np.float32),to.valid.y.astype(np.float32) print(f&quot;length of train {len(to.train)} and legnth of valid {len(to.valid)}&quot;) return to, xs, valid_xs, y, valid_y def m_accuracy(m, xs, y): return accuracy_score(y.values, m.predict(xs)) def _feature_importance(m, df): return pd.DataFrame({&#39;cols&#39;:df.columns,&#39;imp&#39;:m.feature_importances_}).sort_values(&#39;imp&#39;, ascending=False) def plot_feature_importance(fi): return fi.plot(&#39;cols&#39;,&#39;imp&#39;, &#39;barh&#39;, figsize=(15,15), legend=False) def roc_auc(m, xs, valid_xs, y, valid_y): y_proba = m.predict_proba(valid_xs) roc_auc = roc_auc_score(valid_y,m.predict(valid_xs)) fpr, tpr, thresholds = roc_curve(valid_y, y_proba[:,1]) plt.figure() plt.plot(fpr, tpr, label=&#39;(area = %0.2f)&#39; % roc_auc) plt.plot([0, 1], [0, 1],&#39;r--&#39;) plt.xlim([0.0, 1.0]) plt.ylim([0.0, 1.05]) plt.xlabel(&#39;False Positive Rate&#39;) plt.ylabel(&#39;True Positive Rate&#39;) plt.title(&#39;Receiver operating characteristic&#39;) plt.legend(loc=&quot;lower right&quot;) plt.show() . from numba import njit @njit def fillna_npwhere(array, values): if np.isnan(array.sum()): array = np.where(np.isnan(array), values, array) return array # We impute the missing values with the medians def fill_nan(test_values, features): na_arr=np.ones((1,len(feature_nn_test)), dtype=np.float32) na_arr=na_arr*(999) xar = test_values - na_arr #xar = np.nan_to_num(xar, nan=-999) xar = fillna_npwhere(xar, -999) xar = xar + na_arr test_df = torch.FloatTensor(xar) return test_df . NN using Fastai and using output of model as input to another model. . In this section, we could have Fastai&#39;s TabularPandas function but due to some bugs I encounter (still encountering more), I created custom dataloarders for the task. . splits = RandomSplitter(valid_pct=0.1)(range_of(df)) . xs, valid_xs = df.loc[splits[0], feature_nn_test], df.loc[splits[1], feature_nn_test] y, valid_y = df.loc[splits[0], dep_var], df.loc[splits[1], dep_var] . class Fastai_dls(): def __init__(self, df, cats=None, y=None): df = df.copy() if cats is not None: self.dfcats = df[cats] self.cats = np.stack([c.values for n, c in self.dfcats.items()], axis=1).astype(np.long) self.dfconts = df.drop(cats, axis=1) self.conts = np.stack([c.values for n, c in self.dfconts.items()], axis=1).astype(np.float32) else: self.dfconts = df.copy() self.conts = np.stack([c.values for n, c in self.dfconts.items()], axis=1).astype(np.float32) self.cats = np.zeros(len(df),).astype(np.long) self.y = y.values def __len__(self): return len(self.y) def __getitem__(self, idx): return [self.cats[idx], self.conts[idx], self.y[idx]] . train_ds = Fastai_dls(df=xs, y=y) valid_ds = Fastai_dls(df=valid_xs, y=valid_y) . train_dl = DataLoader(train_ds, batch_size = 4096, drop_last=True, shuffle=False) valid_dl = DataLoader(valid_ds, batch_size = 2048, drop_last=True, shuffle=False) dls = DataLoaders(train_dl, valid_dl, device=&#39;cuda&#39;) . dls.cats.shape, dls.conts.shape, dls.y.shape . ((139976,), (139976, 402), (139976,)) . device = torch.device(&#39;cuda:0&#39; if torch.cuda.is_available() else &#39;cpu&#39;) . loss_func = CrossEntropyLossFlat() roc_auc = RocAucBinary() cbs = [GradientAccumulation(), EarlyStoppingCallback(monitor=&#39;accuracy&#39;, comp=np.greater, min_delta=0.01, patience=4), SaveModelCallback(monitor=&#39;accuracy&#39;, comp=np.greater, min_delta=0.01), ReduceLROnPlateau(monitor=&#39;accuracy&#39;, comp=np.greater, min_delta=0.01, patience=2)] . class JaneStreet(Module): def __init__(self): dropout_rate = 0.2 hidden_size = 256 n = len(feature_nn_test) self.batch_norm0 = nn.BatchNorm1d(n) self.dropout0 = nn.Dropout(dropout_rate) self.dense1 = nn.Linear(n, hidden_size) self.batch_norm1 = nn.BatchNorm1d(hidden_size) self.dropout1 = nn.Dropout(dropout_rate) self.dense2 = nn.Linear(hidden_size + n, hidden_size) self.batch_norm2 = nn.BatchNorm1d(hidden_size) self.dropout2 = nn.Dropout(dropout_rate) self.dense3 = nn.Linear(hidden_size + hidden_size, hidden_size) self.batch_norm3 = nn.BatchNorm1d(hidden_size) self.dropout3 = nn.Dropout(dropout_rate) self.dense4 = nn.Linear(hidden_size + hidden_size, hidden_size) self.batch_norm4 = nn.BatchNorm1d(hidden_size) self.dropout4 = nn.Dropout(dropout_rate) self.dense5 = nn.Linear(hidden_size+hidden_size, 2) self.LeakyReLU = nn.LeakyReLU(negative_slope=0.1, inplace=True) self.layers = nn.Sequential( nn.BatchNorm1d(n), LinBnDrop(n, 400, bn=True, p=0, act=Mish(), lin_first=False), LinBnDrop(400, 800, bn=True, p=0.2289, act=Mish(), lin_first=False), LinBnDrop(800, 400, bn=True, p=0.2289, act=Mish(), lin_first=False), LinBnDrop(400, n, bn=False, act=None, lin_first=False),) def forward(self, cat,x): x = self.layers(x) x = self.batch_norm0(x) x = self.dropout0(x) x1 = self.dense1(x) x1 = self.batch_norm1(x1) x1 = self.LeakyReLU(x1) x1 = self.dropout1(x1) x = torch.cat([x, x1], 1) x2 = self.dense2(x) x2 = self.batch_norm2(x2) x2 = self.LeakyReLU(x2) x2 = self.dropout2(x2) x = torch.cat([x1, x2], 1) #x3 = self.dense3(x) #x3 = self.batch_norm3(x3) #x3 = self.LeakyReLU(x3) #x3 = self.dropout3(x3) # x = torch.cat([x2, x3], 1) #x4 = self.dense4(x) #x4 = self.batch_norm4(x4) #x4 = self.LeakyReLU(x4) #x4 = self.dropout4(x4) # x = torch.cat([x3, x4], 1) x = self.dense5(x) return F.softmax(x, dim=1) model_nn = JaneStreet() model_nn = model_nn.to(device) . learn = Learner(dls, model_nn, loss_func = loss_func, metrics=[accuracy,roc_auc]).to_fp32() . learn.lr_find() . SuggestedLRs(lr_min=0.04365158379077912, lr_steep=0.010964781977236271) . learn.fit_one_cycle(20, 1e-2, cbs=cbs) . epoch train_loss valid_loss accuracy roc_auc_score time . 0 | 0.691607 | 0.684890 | 0.540806 | 0.560280 | 00:02 | . 1 | 0.685817 | 0.685720 | 0.550293 | 0.573549 | 00:03 | . 2 | 0.681287 | 0.678165 | 0.560826 | 0.594965 | 00:03 | . 3 | 0.676755 | 0.673536 | 0.568429 | 0.605073 | 00:03 | . 4 | 0.671056 | 0.670174 | 0.576521 | 0.617103 | 00:02 | . 5 | 0.664675 | 0.673411 | 0.559849 | 0.599095 | 00:03 | . 6 | 0.658145 | 0.668097 | 0.586147 | 0.633828 | 00:02 | . 7 | 0.650803 | 0.651233 | 0.605748 | 0.659833 | 00:02 | . 8 | 0.642964 | 0.655354 | 0.606934 | 0.659029 | 00:02 | . 9 | 0.634794 | 0.650624 | 0.604771 | 0.661042 | 00:02 | . 10 | 0.626779 | 0.643351 | 0.624512 | 0.683313 | 00:02 | . 11 | 0.617199 | 0.660196 | 0.611328 | 0.666140 | 00:02 | . 12 | 0.607306 | 0.632880 | 0.639369 | 0.701388 | 00:02 | . 13 | 0.595890 | 0.641265 | 0.624163 | 0.684749 | 00:02 | . 14 | 0.585098 | 0.635842 | 0.636370 | 0.700417 | 00:02 | . 15 | 0.573853 | 0.628843 | 0.651786 | 0.717595 | 00:03 | . 16 | 0.564586 | 0.627700 | 0.652692 | 0.721528 | 00:02 | . 17 | 0.555632 | 0.627453 | 0.654715 | 0.722589 | 00:02 | . 18 | 0.548891 | 0.627366 | 0.655971 | 0.723653 | 00:03 | . 19 | 0.544899 | 0.627353 | 0.655552 | 0.723790 | 00:02 | . Better model found at epoch 0 with accuracy value: 0.5408063530921936. Better model found at epoch 2 with accuracy value: 0.5608258843421936. Better model found at epoch 4 with accuracy value: 0.5765206217765808. Epoch 6: reducing lr to 0.0009580172347940181 Better model found at epoch 7 with accuracy value: 0.6057477593421936. Epoch 9: reducing lr to 0.0007526650921209491 Better model found at epoch 10 with accuracy value: 0.62451171875. Better model found at epoch 12 with accuracy value: 0.6393694281578064. Epoch 14: reducing lr to 0.0002526794836121448 Better model found at epoch 15 with accuracy value: 0.6517857313156128. Epoch 17: reducing lr to 4.449824457047561e-05 No improvement since epoch 15: early stopping . learn.fit_one_cycle(20, 1e-3, wd = 0.0001, cbs=cbs) . epoch train_loss valid_loss accuracy roc_auc_score time . 0 | 0.554790 | 0.627454 | 0.653878 | 0.719309 | 00:02 | . 1 | 0.552611 | 0.626815 | 0.653809 | 0.722306 | 00:02 | . 2 | 0.550028 | 0.628586 | 0.651786 | 0.721557 | 00:02 | . 3 | 0.548423 | 0.628071 | 0.654018 | 0.722426 | 00:03 | . 4 | 0.546515 | 0.626714 | 0.654785 | 0.724814 | 00:02 | . Better model found at epoch 0 with accuracy value: 0.6538783311843872. Epoch 2: reducing lr to 6.598670704145258e-05 No improvement since epoch 0: early stopping . learn.fit_one_cycle(20,slice(1e-03),wd = 0.0001, cbs=cbs) . epoch train_loss valid_loss accuracy roc_auc_score time . 0 | 0.551819 | 0.627065 | 0.653878 | 0.720447 | 00:02 | . 1 | 0.550544 | 0.627526 | 0.653878 | 0.722107 | 00:03 | . 2 | 0.549451 | 0.626863 | 0.654576 | 0.723404 | 00:03 | . 3 | 0.547920 | 0.626525 | 0.655622 | 0.722520 | 00:02 | . 4 | 0.546614 | 0.626699 | 0.655901 | 0.722730 | 00:02 | . Better model found at epoch 0 with accuracy value: 0.6538783311843872. Epoch 2: reducing lr to 6.598670704145258e-05 No improvement since epoch 0: early stopping . %time X_test = fill_nan(df.loc[:,features_nn].drop(dep_var, axis=1).values, feature_nn_test).cuda() . CPU times: user 1.26 s, sys: 274 ms, total: 1.54 s Wall time: 1.57 s . %time preds = learn.model(0, X_test).argmax(dim=1).detach().cpu().numpy() . CPU times: user 133 ms, sys: 93.2 ms, total: 226 ms Wall time: 227 ms . df[&#39;feature_fastai&#39;] = pd.DataFrame(preds) . df.head() . date weight feature_0 feature_1 ... feature_skew feature_kurt feature_sq_kurt feature_fastai . 0 0 | 16.673515 | -1 | -1.349537 | ... | 0.333055 | 1.320575 | 1.743918 | 0 | . 1 0 | 0.138531 | 1 | -3.172026 | ... | 0.565369 | 0.448392 | 0.201055 | 1 | . 2 0 | 0.190575 | -1 | -3.172026 | ... | 0.587222 | 0.820025 | 0.672440 | 1 | . 3 0 | 3.820844 | -1 | 0.446050 | ... | 0.435421 | 0.071277 | 0.005080 | 1 | . 4 0 | 0.116557 | 1 | -3.172026 | ... | 1.260976 | 3.391439 | 11.501862 | 1 | . 5 rows × 407 columns . df.isnull().sum().sum() . 0 . features = [col for col in list(df.columns) if &#39;feature&#39; in col] len(features) . 403 . df_median = df.median() . PCA and Normalization . Since we did not used fastai&#39;s Tabularpandas, we out performed dimension reduction using PCA and also used the StandardScaler to normlize our dataset. . X = df.loc[:,features] y =df.loc[:, &#39;action&#39;] . xs, valid_xs, y, valid_y = train_test_split(X, y, test_size=0.1, random_state = 42) . scalar = StandardScaler() scalar.fit(xs) xs_norm = scalar.transform(xs) pca = PCA() comp = pca.fit(xs_norm) . plt.plot(np.cumsum(comp.explained_variance_ratio_)) plt.grid() plt.xlabel(&#39;Number of PC&#39;) plt.ylabel(&#39;Explained Variance&#39;) sns.despine() . pca = PCA(n_components=175).fit(xs_norm) xs_transform = pca.transform(xs_norm) # transform validation set valid_xs_transform = pca.transform(scalar.transform(valid_xs)) . Xgboost and Hypertunning . Now that all is set and done. We use optuna for hypertunning to get the best params to run our final model . dtrain = xgb.DMatrix(xs_transform, label=y) dvalid = xgb.DMatrix(valid_xs_transform, label=valid_y) def objective(trial): # parameters for hypertunning params = {&#39;n_estimators&#39;: trial.suggest_int(&#39;n_estimators&#39;,400, 600), &#39;max_depth&#39;: trial.suggest_int(&#39;max_depth&#39;, 10, 20), &#39;learning_rate&#39;: trial.suggest_uniform(&#39;learning_rate&#39;, 0.01, .1), &#39;subsample&#39; : trial.suggest_uniform(&#39;subsample&#39;, 0.50, 1), &#39;colsample_bytree&#39;: trial.suggest_uniform(&#39;colsample_bytree&#39;, 0.50, 1), &#39;gamma&#39;: trial.suggest_int(&#39;gamma&#39;, 0, 10), &#39;tree_method&#39;: &#39;gpu_hist&#39;, &#39;objective&#39;: &#39;binary:logistic&#39;} best = xgb.train(params, dtrain) preds = np.rint(best.predict(dvalid)) accuracy = accuracy_score(valid_y, preds) return accuracy . study = optuna.create_study() study.optimize(objective,n_trials=15) . [I 2021-01-26 17:21:58,843] A new study created in memory with name: no-name-cef3f5eb-a80c-4775-a9ab-1e89b9c5d961 [I 2021-01-26 17:22:07,762] Trial 0 finished with value: 0.712852825821385 and parameters: {&#39;n_estimators&#39;: 432, &#39;max_depth&#39;: 20, &#39;learning_rate&#39;: 0.05316590799747048, &#39;subsample&#39;: 0.6030339348493646, &#39;colsample_bytree&#39;: 0.5041951234556589, &#39;gamma&#39;: 0}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:18,330] Trial 1 finished with value: 0.7280267472513341 and parameters: {&#39;n_estimators&#39;: 495, &#39;max_depth&#39;: 20, &#39;learning_rate&#39;: 0.06994275310474216, &#39;subsample&#39;: 0.7878025178834351, &#39;colsample_bytree&#39;: 0.8803972779006508, &#39;gamma&#39;: 7}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:21,231] Trial 2 finished with value: 0.7388285218285862 and parameters: {&#39;n_estimators&#39;: 575, &#39;max_depth&#39;: 12, &#39;learning_rate&#39;: 0.08469370253489612, &#39;subsample&#39;: 0.9542683974475639, &#39;colsample_bytree&#39;: 0.9402130470011565, &#39;gamma&#39;: 5}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:29,584] Trial 3 finished with value: 0.7240403780621102 and parameters: {&#39;n_estimators&#39;: 581, &#39;max_depth&#39;: 17, &#39;learning_rate&#39;: 0.09737274652139076, &#39;subsample&#39;: 0.7626282267740945, &#39;colsample_bytree&#39;: 0.8350626423397698, &#39;gamma&#39;: 1}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:41,359] Trial 4 finished with value: 0.7266122291519321 and parameters: {&#39;n_estimators&#39;: 574, &#39;max_depth&#39;: 19, &#39;learning_rate&#39;: 0.0866660132820294, &#39;subsample&#39;: 0.9174260796450562, &#39;colsample_bytree&#39;: 0.969457811009965, &#39;gamma&#39;: 7}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:44,620] Trial 5 finished with value: 0.7390214106603228 and parameters: {&#39;n_estimators&#39;: 580, &#39;max_depth&#39;: 13, &#39;learning_rate&#39;: 0.012933330058851871, &#39;subsample&#39;: 0.6227659686086489, &#39;colsample_bytree&#39;: 0.7404931965812653, &#39;gamma&#39;: 1}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:46,335] Trial 6 finished with value: 0.7400501510962515 and parameters: {&#39;n_estimators&#39;: 480, &#39;max_depth&#39;: 11, &#39;learning_rate&#39;: 0.0282232395401555, &#39;subsample&#39;: 0.7980018979397375, &#39;colsample_bytree&#39;: 0.6231721323422814, &#39;gamma&#39;: 5}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:54,191] Trial 7 finished with value: 0.7307914871728927 and parameters: {&#39;n_estimators&#39;: 588, &#39;max_depth&#39;: 18, &#39;learning_rate&#39;: 0.07896845483088494, &#39;subsample&#39;: 0.622006053733118, &#39;colsample_bytree&#39;: 0.9691729657870658, &#39;gamma&#39;: 7}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:22:55,488] Trial 8 finished with value: 0.7435221500675111 and parameters: {&#39;n_estimators&#39;: 580, &#39;max_depth&#39;: 10, &#39;learning_rate&#39;: 0.01675790370010787, &#39;subsample&#39;: 0.8766339219100194, &#39;colsample_bytree&#39;: 0.7468055644625144, &#39;gamma&#39;: 6}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:23:06,888] Trial 9 finished with value: 0.7300199318459462 and parameters: {&#39;n_estimators&#39;: 575, &#39;max_depth&#39;: 20, &#39;learning_rate&#39;: 0.016929814973638317, &#39;subsample&#39;: 0.8505585597383483, &#39;colsample_bytree&#39;: 0.9721352043360518, &#39;gamma&#39;: 8}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:23:11,057] Trial 10 finished with value: 0.7226258599627081 and parameters: {&#39;n_estimators&#39;: 400, &#39;max_depth&#39;: 15, &#39;learning_rate&#39;: 0.04571749310434029, &#39;subsample&#39;: 0.5052117411246719, &#39;colsample_bytree&#39;: 0.5032220267129726, &#39;gamma&#39;: 10}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:23:15,119] Trial 11 finished with value: 0.7253263036070211 and parameters: {&#39;n_estimators&#39;: 404, &#39;max_depth&#39;: 15, &#39;learning_rate&#39;: 0.04547748707170171, &#39;subsample&#39;: 0.5094138178759925, &#39;colsample_bytree&#39;: 0.528006777428292, &#39;gamma&#39;: 10}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:23:19,125] Trial 12 finished with value: 0.7247476371118112 and parameters: {&#39;n_estimators&#39;: 405, &#39;max_depth&#39;: 15, &#39;learning_rate&#39;: 0.05165598894060981, &#39;subsample&#39;: 0.501102929169433, &#39;colsample_bytree&#39;: 0.520841589905559, &#39;gamma&#39;: 2}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:23:25,420] Trial 13 finished with value: 0.7284768211920529 and parameters: {&#39;n_estimators&#39;: 446, &#39;max_depth&#39;: 17, &#39;learning_rate&#39;: 0.03830772039565017, &#39;subsample&#39;: 0.6137824255626344, &#39;colsample_bytree&#39;: 0.6199330542446446, &#39;gamma&#39;: 3}. Best is trial 0 with value: 0.712852825821385. [I 2021-01-26 17:23:29,049] Trial 14 finished with value: 0.7336848196489423 and parameters: {&#39;n_estimators&#39;: 436, &#39;max_depth&#39;: 14, &#39;learning_rate&#39;: 0.06400777080482419, &#39;subsample&#39;: 0.5591318563800007, &#39;colsample_bytree&#39;: 0.6050716610853394, &#39;gamma&#39;: 10}. Best is trial 0 with value: 0.712852825821385. . best_params = study.best_trial.params best_params[&#39;tree_method&#39;] = &#39;gpu_hist&#39; best_params[&#39;objective&#39;] = &#39;binary:logistic&#39; best_params[&#39;missing&#39;] = -999 best_params[&#39;random_state&#39;] = 2020 . clf = xgb.XGBClassifier(**best_params) %time clf.fit(xs_transform, y) . CPU times: user 1min 50s, sys: 28 s, total: 2min 18s Wall time: 2min 18s . XGBClassifier(base_score=0.5, booster=&#39;gbtree&#39;, colsample_bylevel=1, colsample_bynode=1, colsample_bytree=0.5041951234556589, gamma=0, learning_rate=0.05316590799747048, max_delta_step=0, max_depth=20, min_child_weight=1, missing=-999, n_estimators=432, n_jobs=1, nthread=None, objective=&#39;binary:logistic&#39;, random_state=2020, reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None, silent=None, subsample=0.6030339348493646, tree_method=&#39;gpu_hist&#39;, verbosity=1) . fig = optuna.visualization.plot_optimization_history(study) fig.show() . . . fig = optuna.visualization.plot_param_importances(study) fig.show() . . . m_accuracy(clf, xs_transform, y), m_accuracy(clf, valid_xs_transform, valid_y) . (1.0, 0.7538738507040442) . cm = confusion_matrix(valid_y, clf.predict(valid_xs_transform)) cm . array([[5519, 2000], [1828, 6206]]) . del dvalid, dtrain . kaggle Submission Method . from tqdm import tqdm import janestreet env = janestreet.make_env() # initialize the environment iter_test = env.iter_test() # an ite-ator which loops over the test set . for (test_df, pred_df) in tqdm(iter_test): wt = test_df.iloc[0].weight if (wt == 0): pred_df.action = 0 else: test_df = augment_df(test_df, features_one) #X_test = fill_nan(test_df).cuda() X_test = fill_nan(test_df.values, feature_nn_test).cuda() preds = learn.model(0, X_test).argmax(dim=1).detach().cpu().numpy() test_df[&#39;feature_fastai&#39;] = preds pred_df.action = clf.predict(pca.transform(scalar.transform( fillna_npwhere(test_df[features].values, df_median[features].values))), validate_features=False) env.predict(pred_df) . 15219it [49:10, 5.16it/s] . Conclusion . As discussed earlier, I have not submitted yet due to some bugs in my submission pipeline above, and also exchausting my kaggle weekly GPU quota. Will do that next week. For now, I go back to algo and data structures and reading Jeremy&#39;s Book . Reference: . https://www.kaggle.com/ahmedelhaddad/fastai-submission-custom-ds | Collaborative filtering tutorial. (https://docs.fast.ai/tutorial.collab) | .",
            "url": "https://emilearthur.github.io/fastblog/fastai/kaggle/2021/01/26/jane-street-prediction-with-fastai-pca-xgb.html",
            "relUrl": "/fastai/kaggle/2021/01/26/jane-street-prediction-with-fastai-pca-xgb.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Why You NEED ME!",
            "content": "Hi👋 There!, . You are building a great product, and I love it - I love innovation and disruption too. Also, I hope you have a good culture, which one can innovate, grow and learn, at the same time. . If there is, here are the reasons I think you need me for a product manager, product analyst, data analyst/scientist, or business analyst positions. . I have almost three years of experience in product management, business analysis and data analysis and, have two-plus years of experience working tools such as Confluence - for project documentation, Jira - for tracking product development &amp; agile project management, Python (scikit-learn, pandas, fastai, PyTorch, numpy) and excel (Advance) - for data analysis &amp; machine learning, and SQL(Intermediate) - for data analysis. Maybe, many people have these. | I have two-plus years of startup experience, so I know how to take several responsibilities and make sure the job is complete, delivered, clean, whiles keeping an eye on the greater goal. Not made a decision yet? keep going … | I have implemented features for a mobile application, which have 1M+ installs and 60K avg monthly users; reduced Cost of Acquisition by 50% whiles increasing lead conversion rate and disbursement rate by 30% and 9% respectively MoM using A/B testing techniques. If this ignites your interest, then maybe check out my CV on how I saved my company some money by optimizing, and led two major system integrations and upgrades. | Aside from all stated above, I have worked on Omdena in using sentiment analysis techniques to classify tweets in solve violence issues in Chicago. Also worked in building models to detect water bodies from satellite imagery data in fighting malaria. Hope you’re willing to review now.. | Further, I am Learner, and I am working on becoming a Machine Learning Engineer or Software Engineer (data &amp; analytics/machine learning), as such I have started self-learning in software development (Python), SQL in-depth, cloud infrastructure and others. | I will add to the diversity of your team and research has shown that diversity often makes for a better, more successful team. | . If, by now, I have given you a reason to consider why you need me (aside from making sure things are done and customers and business are happy) and I hope I have, then kindly connect via frederickauthur@hotmail.com. If not, then maybe I am not a good fit for you :). .",
            "url": "https://emilearthur.github.io/fastblog/about/career/2021/01/15/Why-You-Need-Me.html",
            "relUrl": "/about/career/2021/01/15/Why-You-Need-Me.html",
            "date": " • Jan 15, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Collaborative Filtering with Fastai",
            "content": "In this post, we will use fastai library for Collaborative Filtering. . Introduction . Collaborative filtering is a technique for developing recommendation systems. Recommendation systems are used often by most social media (Facebook, Twitter, Tictok), entertainment (Youtube, Spotify, Netflix) and other internet companies. . In simple terms, collaborative filtering is the use of machine learning to predict the interest of customers or users towards a product or content. . We do this by analyzing previous taste. Organizations use signup surveys to predict interest for new customers or users. . Installing and Importing Libraries . Installing libraries and downloading Datasets . In this notebook we use movielens small datasets. Also we installing fastai library. . %%capture !pip install fastai==2.1.2 !pip install --upgrade fastai !pip install nbdev . import os import seaborn as sns from fastai.collab import * from fastai.tabular.all import * from sklearn.metrics import mean_absolute_error from sklearn.metrics import mean_squared_error . Downloading dataset, preprocessing and EDA . %%capture # ! wget http://files.grouplens.org/datasets/movielens/ml-latest.zip # ! unzip ml-latest.zip # ! rm -rf ml-latest.zip ! wget http://files.grouplens.org/datasets/movielens/ml-latest-small.zip ! unzip ml-latest-small.zip ! rm -rf ml-latest-small.zip . path = Path(&#39;/content/ml-latest-small&#39;) path . Path(&#39;/content/ml-latest-small&#39;) . ratings = pd.read_csv(path/&#39;ratings.csv&#39;, header=0, names=[&#39;user&#39;,&#39;movie&#39;,&#39;rating&#39;,&#39;timestamp&#39;]) ratings.head() . user movie rating timestamp . 0 1 | 1 | 4.0 | 964982703 | . 1 1 | 3 | 4.0 | 964981247 | . 2 1 | 6 | 4.0 | 964982224 | . 3 1 | 47 | 5.0 | 964983815 | . 4 1 | 50 | 5.0 | 964982931 | . movies = pd.read_csv(path/&#39;movies.csv&#39;, header=0, names=[&#39;movie&#39;,&#39;title&#39;,&#39;genres&#39;]) movies.head() . movie title genres . 0 1 | Toy Story (1995) | Adventure|Animation|Children|Comedy|Fantasy | . 1 2 | Jumanji (1995) | Adventure|Children|Fantasy | . 2 3 | Grumpier Old Men (1995) | Comedy|Romance | . 3 4 | Waiting to Exhale (1995) | Comedy|Drama|Romance | . 4 5 | Father of the Bride Part II (1995) | Comedy | . n_users, n_movies = len(ratings.user.unique()), len(movies.movie.unique()) print(n_users, n_movies) . 610 9742 . ratings = ratings.merge(movies, on=&quot;movie&quot;) ratings.head() . user movie rating timestamp title genres . 0 1 | 1 | 4.0 | 964982703 | Toy Story (1995) | Adventure|Animation|Children|Comedy|Fantasy | . 1 5 | 1 | 4.0 | 847434962 | Toy Story (1995) | Adventure|Animation|Children|Comedy|Fantasy | . 2 7 | 1 | 4.5 | 1106635946 | Toy Story (1995) | Adventure|Animation|Children|Comedy|Fantasy | . 3 15 | 1 | 2.5 | 1510577970 | Toy Story (1995) | Adventure|Animation|Children|Comedy|Fantasy | . 4 17 | 1 | 4.5 | 1305696483 | Toy Story (1995) | Adventure|Animation|Children|Comedy|Fantasy | . sns.set_theme(style=&quot;whitegrid&quot;) sns.barplot(x = ratings.rating, y=ratings.user) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff2f98fb978&gt; . sns.set_theme(style=&quot;whitegrid&quot;) sns.countplot(ratings.rating) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. FutureWarning . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7ff2f983eeb8&gt; . g = ratings.groupby(&#39;title&#39;)[&#39;rating&#39;].count() top_movies = g.sort_values(ascending=False).index.values[:1000] top_movies[:25] . array([&#39;Forrest Gump (1994)&#39;, &#39;Shawshank Redemption, The (1994)&#39;, &#39;Pulp Fiction (1994)&#39;, &#39;Silence of the Lambs, The (1991)&#39;, &#39;Matrix, The (1999)&#39;, &#39;Star Wars: Episode IV - A New Hope (1977)&#39;, &#39;Jurassic Park (1993)&#39;, &#39;Braveheart (1995)&#39;, &#39;Terminator 2: Judgment Day (1991)&#39;, &#34;Schindler&#39;s List (1993)&#34;, &#39;Fight Club (1999)&#39;, &#39;Toy Story (1995)&#39;, &#39;Star Wars: Episode V - The Empire Strikes Back (1980)&#39;, &#39;Usual Suspects, The (1995)&#39;, &#39;American Beauty (1999)&#39;, &#39;Seven (a.k.a. Se7en) (1995)&#39;, &#39;Independence Day (a.k.a. ID4) (1996)&#39;, &#39;Apollo 13 (1995)&#39;, &#39;Raiders of the Lost Ark (Indiana Jones and the Raiders of the Lost Ark) (1981)&#39;, &#39;Lord of the Rings: The Fellowship of the Ring, The (2001)&#39;, &#39;Star Wars: Episode VI - Return of the Jedi (1983)&#39;, &#39;Godfather, The (1972)&#39;, &#39;Fugitive, The (1993)&#39;, &#39;Batman (1989)&#39;, &#39;Saving Private Ryan (1998)&#39;], dtype=object) . Creating DataLoader &amp; Training . Here we seed parameters in the DataLoader and also use 30% of data for validation. . dls = CollabDataLoaders.from_df(ratings, item_name=&quot;title&quot;, valid_pct=0.3, seed=42, bs=64) dls.show_batch() . user title rating . 0 28 | American Beauty (1999) | 4.0 | . 1 606 | Sorry, Wrong Number (1948) | 3.5 | . 2 346 | Dracula (Bram Stoker&#39;s Dracula) (1992) | 2.5 | . 3 217 | Wild America (1997) | 3.0 | . 4 187 | This Film Is Not Yet Rated (2006) | 4.0 | . 5 43 | Children of the Corn IV: The Gathering (1996) | 5.0 | . 6 21 | Men in Black III (M.III.B.) (M.I.B.³) (2012) | 4.0 | . 7 282 | ¡Three Amigos! (1986) | 4.0 | . 8 368 | Santa Claus: The Movie (1985) | 2.0 | . 9 23 | Samouraï, Le (Godson, The) (1967) | 5.0 | . dls.classes . {&#39;title&#39;: [&#39;#na#&#39;, &#34;&#39;71 (2014)&#34;, &#34;&#39;Hellboy&#39;: The Seeds of Creation (2004)&#34;, &#34;&#39;Round Midnight (1986)&#34;, &#34;&#39;Salem&#39;s Lot (2004)&#34;, &#34;&#39;Til There Was You (1997)&#34;, &#34;&#39;Tis the Season for Love (2015)&#34;, &#34;&#39;burbs, The (1989)&#34;, &#34;&#39;night Mother (1986)&#34;, &#39;(500) Days of Summer (2009)&#39;, &#39;*batteries not included (1987)&#39;, &#39;...All the Marbles (1981)&#39;, &#39;...And Justice for All (1979)&#39;, &#39;00 Schneider - Jagd auf Nihil Baxter (1994)&#39;, &#39;1-900 (06) (1994)&#39;, &#39;10 (1979)&#39;, &#39;10 Cent Pistol (2015)&#39;, &#39;10 Cloverfield Lane (2016)&#39;, &#39;10 Items or Less (2006)&#39;, &#39;10 Things I Hate About You (1999)&#39;, &#39;10 Years (2011)&#39;, &#39;10,000 BC (2008)&#39;, &#39;100 Girls (2000)&#39;, &#39;100 Streets (2016)&#39;, &#39;101 Dalmatians (1996)&#39;, &#39;101 Dalmatians (One Hundred and One Dalmatians) (1961)&#39;, &#34;101 Dalmatians II: Patch&#39;s London Adventure (2003)&#34;, &#39;101 Reykjavik (101 Reykjavík) (2000)&#39;, &#39;102 Dalmatians (2000)&#39;, &#39;10th &amp; Wolf (2006)&#39;, &#39;10th Kingdom, The (2000)&#39;, &#39;10th Victim, The (La decima vittima) (1965)&#39;, &#39;11 &#39;09&#34;01 - September 11 (2002)&#39;, &#39;11:14 (2003)&#39;, &#39;11th Hour, The (2007)&#39;, &#39;12 Angry Men (1957)&#39;, &#39;12 Angry Men (1997)&#39;, &#39;12 Chairs (1971)&#39;, &#39;12 Chairs (1976)&#39;, &#39;12 Rounds (2009)&#39;, &#39;12 Years a Slave (2013)&#39;, &#39;127 Hours (2010)&#39;, &#39;13 Assassins (Jûsan-nin no shikaku) (2010)&#39;, &#39;13 Ghosts (1960)&#39;, &#39;13 Going on 30 (2004)&#39;, &#39;13 Hours (2016)&#39;, &#39;13 Sins (2014)&#39;, &#39;13 Tzameti (2005)&#39;, &#39;13th (2016)&#39;, &#39;13th Warrior, The (1999)&#39;, &#39;1408 (2007)&#39;, &#39;1492: Conquest of Paradise (1992)&#39;, &#39;15 Minutes (2001)&#39;, &#39;16 Blocks (2006)&#39;, &#39;17 Again (2009)&#39;, &#39;1776 (1972)&#39;, &#39;18 Again! (1988)&#39;, &#39;187 (One Eight Seven) (1997)&#39;, &#39;1900 (Novecento) (1976)&#39;, &#39;1941 (1979)&#39;, &#39;1969 (1988)&#39;, &#39;1984 (Nineteen Eighty-Four) (1984)&#39;, &#39;2 Days in New York (2012)&#39;, &#39;2 Days in Paris (2007)&#39;, &#39;2 Days in the Valley (1996)&#39;, &#39;2 Fast 2 Furious (Fast and the Furious 2, The) (2003)&#39;, &#39;2 Guns (2013)&#39;, &#39;20 Dates (1998)&#39;, &#39;20 Feet from Stardom (Twenty Feet from Stardom) (2013)&#39;, &#39;20 Million Miles to Earth (1957)&#39;, &#39;20,000 Days on Earth (2014)&#39;, &#39;20,000 Leagues Under the Sea (1916)&#39;, &#39;20,000 Leagues Under the Sea (1954)&#39;, &#39;200 Cigarettes (1999)&#39;, &#39;2001 Maniacs (2005)&#39;, &#39;2001: A Space Odyssey (1968)&#39;, &#39;2010: The Year We Make Contact (1984)&#39;, &#39;2012 (2009)&#39;, &#39;2046 (2004)&#39;, &#39;2048: Nowhere to Run (2017)&#39;, &#39;21 (2008)&#39;, &#39;21 Grams (2003)&#39;, &#39;21 Jump Street (2012)&#39;, &#39;21 Up (1977)&#39;, &#39;21 and Over (2013)&#39;, &#39;22 Jump Street (2014)&#39;, &#39;24 Hour Party People (2002)&#39;, &#39;25th Hour (2002)&#39;, &#39;27 Dresses (2008)&#39;, &#39;28 Days (2000)&#39;, &#39;28 Days Later (2002)&#39;, &#39;28 Up (1985)&#39;, &#39;28 Weeks Later (2007)&#39;, &#39;3 Days to Kill (2014)&#39;, &#39;3 Extremes (Three... Extremes) (Saam gaang yi) (2004)&#39;, &#39;3 Idiots (2009)&#39;, &#39;3 Ninjas (1992)&#39;, &#39;3 Ninjas Kick Back (1994)&#39;, &#39;3 Ninjas Knuckle Up (1995)&#39;, &#39;3 Ninjas: High Noon On Mega Mountain (1998)&#39;, &#39;3 Women (Three Women) (1977)&#39;, &#39;3 dev adam (Three Giant Men) (1973) &#39;, &#39;3-Iron (Bin-jip) (2004)&#39;, &#39;30 Days of Night (2007)&#39;, &#39;30 Minutes or Less (2011)&#39;, &#39;300 (2007)&#39;, &#39;3000 Miles to Graceland (2001)&#39;, &#39;300: Rise of an Empire (2014)&#39;, &#39;31 (2016)&#39;, &#39;35 Up (1991)&#39;, &#39;39 Steps, The (1935)&#39;, &#39;3:10 to Yuma (1957)&#39;, &#39;3:10 to Yuma (2007)&#39;, &#39;4 Little Girls (1997)&#39;, &#39;4 Months, 3 Weeks and 2 Days (4 luni, 3 saptamâni si 2 zile) (2007)&#39;, &#39;40 Days and 40 Nights (2002)&#39;, &#39;40-Year-Old Virgin, The (2005)&#39;, &#39;400 Blows, The (Les quatre cents coups) (1959)&#39;, &#39;42 (2013)&#39;, &#39;42 Up (1998)&#39;, &#39;42nd Street (1933)&#39;, &#39;47 Ronin (2013)&#39;, &#39;48 Hrs. (1982)&#39;, &#39;49 Up (2005)&#39;, &#39;5 Centimeters per Second (Byôsoku 5 senchimêtoru) (2007)&#39;, &#39;5 to 7 (2014)&#39;, &#39;5,000 Fingers of Dr. T, The (1953)&#39;, &#39;50 First Dates (2004)&#39;, &#39;50/50 (2011)&#39;, &#39;52 Pick-Up (1986)&#39;, &#39;54 (1998)&#39;, &#39;6 Days to Air: The Making of South Park (2011)&#39;, &#39;61* (2001)&#39;, &#39;6th Day, The (2000)&#39;, &#39;6th Man, The (Sixth Man, The) (1997)&#39;, &#39;7 Days in Hell (2015)&#39;, &#39;7 Faces of Dr. Lao (1964)&#39;, &#39;7th Voyage of Sinbad, The (1958)&#39;, &#39;8 1/2 (8½) (1963)&#39;, &#39;8 Heads in a Duffel Bag (1997)&#39;, &#39;8 Mile (2002)&#39;, &#39;8 Seconds (1994)&#39;, &#39;8 Women (2002)&#39;, &#39;8 ½ Women (a.k.a. 8 1/2 Women) (a.k.a. Eight and a Half Women) (1999)&#39;, &#39;800 Bullets (800 Balas) (2002)&#39;, &#39;84 Charing Cross Road (1987)&#39;, &#39;8MM (1999)&#39;, &#39;9 (2009)&#39;, &#39;9 1/2 Weeks (Nine 1/2 Weeks) (1986)&#39;, &#39;9/11 (2002)&#39;, &#39;96 Minutes (2011) &#39;, &#39;964 Pinocchio (1991)&#39;, &#39;99 francs (2007)&#39;, &#39;9to5: Days in Porn (a.k.a. 9 to 5: Days in Porn) (2008)&#39;, &#39;A Bad Moms Christmas (2017)&#39;, &#39;A Christmas Story Live! (2017)&#39;, &#39;A Cosmic Christmas (1977)&#39;, &#39;A Detective Story (2003)&#39;, &#34;A Dog&#39;s Purpose (2017)&#34;, &#39;A Flintstones Christmas Carol (1994)&#39;, &#39;A German Life (2016)&#39;, &#39;A Home at the End of the World (2004)&#39;, &#39;A Man Called Blade (1977)&#39;, &#39;A Man from Boulevard des Capucines (1987)&#39;, &#34;A Merry Friggin&#39; Christmas (2014)&#34;, &#34;A Midsummer Night&#39;s Dream (2016)&#34;, &#39;A Million Ways to Die in the West (2014)&#39;, &#39;A Most Wanted Man (2014)&#39;, &#39;A Perfect Day (2015)&#39;, &#39;A Pigeon Sat on a Branch Reflecting on Existence (2014)&#39;, &#39;A Plasticine Crow (1981)&#39;, &#39;A Quiet Place (2018)&#39;, &#39;A Silent Voice (2016)&#39;, &#39;A Story of Children and Film (2013)&#39;, &#39;A Street Cat Named Bob (2016)&#39;, &#39;A Very Murray Christmas (2015)&#39;, &#39;A Walk in the Woods (2015)&#39;, &#39;A Wrinkle in Time (2018)&#39;, &#39;A-Team, The (2010)&#39;, &#39;A.I. Artificial Intelligence (2001)&#39;, &#39;ABCs of Death, The (2012)&#39;, &#39;ARQ (2016)&#39;, &#39;AVP: Alien vs. Predator (2004)&#39;, &#39;AVPR: Aliens vs. Predator - Requiem (2007)&#39;, &#39;Abandoned, The (2006)&#39;, &#39;Abbott and Costello Meet Frankenstein (1948)&#39;, &#39;Abduction (2011)&#39;, &#39;Abominable Dr. Phibes, The (1971)&#39;, &#39;Abominable Snowman, The (Abominable Snowman of the Himalayas, The) (1957)&#39;, &#39;About Adam (2000)&#39;, &#39;About Last Night (2014)&#39;, &#39;About Last Night... (1986)&#39;, &#39;About Schmidt (2002)&#39;, &#39;About Time (2013)&#39;, &#39;About a Boy (2002)&#39;, &#39;Above the Law (1988)&#39;, &#39;Above the Rim (1994)&#39;, &#39;Abraham Lincoln: Vampire Hunter (2012)&#39;, &#39;Absence of Malice (1981)&#39;, &#39;Absent-Minded Professor, The (1961)&#39;, &#39;Absentia (2011)&#39;, &#39;Absolute Power (1997)&#39;, &#39;Absolutely Anything (2015)&#39;, &#39;Abyss, The (1989)&#39;, &#39;Accepted (2006)&#39;, &#39;Accidental Spy, The (Dak miu mai shing) (2001)&#39;, &#39;Accidental Tourist, The (1988)&#39;, &#39;Accused, The (1988)&#39;, &#39;Ace Ventura: Pet Detective (1994)&#39;, &#39;Ace Ventura: When Nature Calls (1995)&#39;, &#39;Ace in the Hole (Big Carnival, The) (1951)&#39;, &#39;Aces: Iron Eagle III (1992)&#39;, &#39;Acid House, The (1998)&#39;, &#39;Across the Hall (2009)&#39;, &#39;Across the Universe (2007)&#39;, &#39;Act of Killing, The (2012)&#39;, &#39;Act of Valor (2012)&#39;, &#39;Action Jackson (1988)&#39;, &#34;Adam and Eve (National Lampoon&#39;s Adam &amp; Eve) (2005)&#34;, &#34;Adam&#39;s Apples (Adams æbler) (2005)&#34;, &#34;Adam&#39;s Rib (1949)&#34;, &#39;Adanggaman (2000)&#39;, &#39;Adaptation (2002)&#39;, &#39;Addams Family Reunion (1998)&#39;, &#39;Addams Family Values (1993)&#39;, &#39;Addams Family, The (1991)&#39;, &#39;Addicted to Love (1997)&#39;, &#39;Addiction, The (1995)&#39;, &#39;Adjustment Bureau, The (2011)&#39;, &#39;Admission (2013)&#39;, &#39;Adventureland (2009)&#39;, &#39;Adventures Of Sherlock Holmes And Dr. Watson: The Twentieth Century Approaches (1986)&#39;, &#39;Adventures in Babysitting (1987)&#39;, &#39;Adventures in Plymptoons! (2011)&#39;, &#39;Adventures of Baron Munchausen, The (1988)&#39;, &#39;Adventures of Buckaroo Banzai Across the 8th Dimension, The (1984)&#39;, &#39;Adventures of Elmo in Grouchland, The (1999)&#39;, &#39;Adventures of Ford Fairlane, The (1990)&#39;, &#39;Adventures of Huck Finn, The (1993)&#39;, &#39;Adventures of Ichabod and Mr. Toad, The (1949)&#39;, &#39;Adventures of Mary-Kate and Ashley, The: The Case of the Christmas Caper (1995)&#39;, &#39;Adventures of Milo and Otis, The (Koneko monogatari) (1986)&#39;, &#39;Adventures of Mowgli: The Kidnapping (1968)&#39;, &#39;Adventures of Pinocchio, The (1996)&#39;, &#39;Adventures of Pluto Nash, The (2002)&#39;, &#39;Adventures of Priscilla, Queen of the Desert, The (1994)&#39;, &#39;Adventures of Robin Hood, The (1938)&#39;, &#39;Adventures of Rocky and Bullwinkle, The (2000)&#39;, &#39;Adventures of Sebastian Cole, The (1998)&#39;, &#39;Adventures of Sharkboy and Lavagirl 3-D, The (2005)&#39;, &#39;Adventures of Tintin, The (2011)&#39;, &#39;Advise and Consent (1962)&#39;, &#39;Aelita: The Queen of Mars (Aelita) (1924)&#39;, &#39;Aeon Flux (2005)&#39;, &#39;Affair of Love, An (Liaison pornographique, Une) (1999)&#39;, &#39;Affair of the Necklace, The (2001)&#39;, &#39;Affair to Remember, An (1957)&#39;, &#39;Afflicted (2013)&#39;, &#39;Affliction (1997)&#39;, &#39;Afonya (1975)&#39;, &#39;Africa: The Serengeti (1994)&#39;, &#39;African Cats (2011)&#39;, &#39;African Queen, The (1951)&#39;, &#39;Afro Samurai (2007)&#39;, &#39;Afro Samurai: Resurrection (2009)&#39;, &#39;After Earth (2013)&#39;, &#39;After Hours (1985)&#39;, &#39;After Life (Wandafuru raifu) (1998)&#39;, &#39;After the Fox (Caccia alla volpe) (1966)&#39;, &#39;After the Sunset (2004)&#39;, &#39;After the Thin Man (1936)&#39;, &#39;After the Wedding (Efter brylluppet) (2006)&#39;, &#39;Afterglow (1997)&#39;, &#39;Against All Odds (1984)&#39;, &#39;Against the Ropes (2004)&#39;, &#39;Age of Innocence, The (1993)&#39;, &#39;Agent Cody Banks (2003)&#39;, &#39;Agent Cody Banks 2: Destination London (2004)&#39;, &#39;Agnes of God (1985)&#39;, &#39;Agony and the Ecstasy, The (1965)&#39;, &#39;Agora (2009)&#39;, &#39;Aguirre: The Wrath of God (Aguirre, der Zorn Gottes) (1972)&#39;, &#39;Aileen: Life and Death of a Serial Killer (2003)&#39;, &#39;Air America (1990)&#39;, &#39;Air Bud (1997)&#39;, &#39;Air Bud: Golden Receiver (1998)&#39;, &#39;Air Force One (1997)&#39;, &#39;Air I Breathe, The (2007)&#39;, &#39;Air Up There, The (1994)&#39;, &#39;Airborne (1993)&#39;, &#39;Airheads (1994)&#39;, &#39;Airplane II: The Sequel (1982)&#39;, &#39;Airplane! (1980)&#39;, &#34;Airport &#39;77 (1977)&#34;, &#39;Airport (1970)&#39;, &#39;Airport 1975 (1974)&#39;, &#39;Akeelah and the Bee (2006)&#39;, &#39;Akira (1988)&#39;, &#34;Akira Kurosawa&#39;s Dreams (Dreams) (1990)&#34;, &#39;Aladdin (1992)&#39;, &#39;Aladdin and the King of Thieves (1996)&#39;, &#39;Alamo, The (1960)&#39;, &#39;Alan Partridge: Alpha Papa (2013)&#39;, &#39;Alaska (1996)&#39;, &#39;Alaska: Spirit of the Wild (1997)&#39;, &#39;Albatross (2011)&#39;, &#39;Albino Alligator (1996)&#39;, &#39;Alesha Popovich and Tugarin the Dragon (2004)&#39;, &#39;Alex Cross (2012)&#39;, &#39;Alex and Emma (2003)&#39;, &#39;Alexander (2004)&#39;, &#39;Alexander Nevsky (Aleksandr Nevskiy) (1938)&#39;, &#39;Alfie (1966)&#39;, &#39;Alfie (2004)&#39;, &#39;Ali (2001)&#39;, &#39;Ali G Indahouse (2002)&#39;, &#39;Ali Wong: Baby Cobra (2016)&#39;, &#39;Ali: Fear Eats the Soul (Angst essen Seele auf) (1974)&#39;, &#39;Alias Betty (Betty Fisher et autres histoires) (2001)&#39;, &#39;Alice (1990)&#39;, &#39;Alice (2009)&#39;, &#39;Alice (Neco z Alenky) (1988)&#39;, &#39;Alice Adams (1935)&#39;, &#34;Alice Doesn&#39;t Live Here Anymore (1974)&#34;, &#39;Alice Through the Looking Glass (2016)&#39;, &#39;Alice in Wonderland (1933)&#39;, &#39;Alice in Wonderland (1951)&#39;, &#39;Alice in Wonderland (2010)&#39;, &#39;Alien (1979)&#39;, &#39;Alien Contamination (1980)&#39;, &#39;Alien Nation (1988)&#39;, &#39;Alien from L.A. (1988)&#39;, &#39;Alien: Covenant (2017)&#39;, &#39;Alien: Resurrection (1997)&#39;, &#39;Aliens (1986)&#39;, &#39;Alien³ (a.k.a. Alien 3) (1992)&#39;, &#39;Alive (1993)&#39;, &#39;All About Eve (1950)&#39;, &#39;All About Lily Chou-Chou (Riri Shushu no subete) (2001)&#39;, &#39;All About My Mother (Todo sobre mi madre) (1999)&#39;, &#39;All About the Benjamins (2002)&#39;, &#39;All Dogs Christmas Carol, An (1998)&#39;, &#39;All Dogs Go to Heaven (1989)&#39;, &#39;All Dogs Go to Heaven 2 (1996)&#39;, &#39;All Good Things (2010)&#39;, &#39;All Is Lost (2013)&#39;, &#39;All Over the Guy (2001)&#39;, &#39;All Quiet on the Western Front (1930)&#39;, &#39;All Roads Lead to Rome (2016)&#39;, &#39;All That Heaven Allows (1955)&#39;, &#39;All That Jazz (1979)&#39;, &#39;All This, and Heaven Too (1940)&#39;, &#39;All Watched Over by Machines of Loving Grace (2011)&#39;, &#39;All Yours (2016)&#39;, &#39;All is Bright (2013)&#39;, &#39;All of Me (1984)&#39;, &#39;All or Nothing (2002)&#39;, &#39;All the Boys Love Mandy Lane (2006)&#39;, &#34;All the King&#39;s Men (1949)&#34;, &#34;All the King&#39;s Men (2006)&#34;, &#34;All the President&#39;s Men (1976)&#34;, &#39;All the Pretty Horses (2000)&#39;, &#39;All the Real Girls (2003)&#39;, &#39;All the Right Moves (1983)&#39;, &#39;All the Vermeers in New York (1990)&#39;, &#39;All-Star Superman (2011)&#39;, &#39;Allan Quatermain and the Lost City of Gold (1987)&#39;, &#39;Allegro non troppo (1977)&#39;, &#39;Alles Inklusive (2014)&#39;, &#39;Alligator (1980)&#39;, &#39;Allnighter, The (1987)&#39;, &#39;Almost Famous (2000)&#39;, &#39;Almost Heroes (1998)&#39;, &#39;Almost an Angel (1990)&#39;, &#39;Aloha (2015)&#39;, &#39;Alone in the Dark (2005)&#39;, &#39;Alone in the Dark II (2008)&#39;, &#39;Along Came Polly (2004)&#39;, &#39;Along Came a Spider (2001)&#39;, &#39;Alpha (2018)&#39;, &#39;Alpha Dog (2007)&#39;, &#39;Alpha and Omega 3: The Great Wolf Games (2014)&#39;, &#39;Alphaville (Alphaville, une étrange aventure de Lemmy Caution) (1965)&#39;, &#39;Altered (2006)&#39;, &#39;Altered States (1980)&#39;, &#39;Alvarez Kelly (1966)&#39;, &#39;Alvin and the Chipmunks (2007)&#39;, &#39;Alvin and the Chipmunks: Chipwrecked (2011)&#39;, &#39;Alvin and the Chipmunks: The Squeakquel (2009)&#39;, &#39;Always (1989)&#39;, &#39;Always Watching: A Marble Hornets Story (2015)&#39;, &#39;Amadeus (1984)&#39;, &#39;Amanda Knox (2016)&#39;, &#39;Amarcord (1973)&#39;, &#39;Amateur (1994)&#39;, &#39;Amazing Grace (2006)&#39;, &#39;Amazing Grace and Chuck (1987)&#39;, &#39;Amazing Panda Adventure, The (1995)&#39;, &#39;Amazing Spider-Man, The (2012)&#39;, &#39;Amazing Transparent Man, The (1960)&#39;, &#39;Amazon Women on the Moon (1987)&#39;, &#34;Amelie (Fabuleux destin d&#39;Amélie Poulain, Le) (2001)&#34;, &#39;Amen. (2002)&#39;, &#39;Amer (2009)&#39;, &#34;America&#39;s Sweethearts (2001)&#34;, &#39;American Astronaut, The (2001)&#39;, &#39;American Beauty (1999)&#39;, &#39;American Buffalo (1996)&#39;, &#39;American Carol, An (2008)&#39;, &#39;American Dreamz (2006)&#39;, &#39;American Drug War: The Last White Hope (2007)&#39;, &#39;American Fable (2017)&#39;, &#39;American Flyers (1985)&#39;, &#39;American Friend, The (Amerikanische Freund, Der) (1977)&#39;, &#39;American Gangster (2007)&#39;, &#39;American Gigolo (1980)&#39;, &#39;American Graffiti (1973)&#39;, &#39;American Grindhouse (2010)&#39;, &#39;American Hardcore (2006)&#39;, &#39;American Haunting, An (2005)&#39;, &#39;American Heist (2015)&#39;, &#39;American History X (1998)&#39;, &#39;American Hustle (2013)&#39;, &#39;American Made (2017)&#39;, &#39;American Me (1992)&#39;, &#39;American Movie (1999)&#39;, &#39;American Ninja (1985)&#39;, &#39;American Outlaws (2001)&#39;, &#39;American Pie (1999)&#39;, &#39;American Pie 2 (2001)&#39;, &#39;American Pie Presents Beta House (American Pie 6: Beta House) (2007)&#39;, &#39;American Pie Presents The Naked Mile (American Pie 5: The Naked Mile) (2006)&#39;, &#39;American Pie Presents: Band Camp (American Pie 4: Band Camp) (2005)&#39;, &#39;American Pie Presents: The Book of Love (American Pie 7: The Book of Love) (2009)&#39;, &#39;American Pop (1981)&#39;, &#39;American President, The (1995)&#39;, &#39;American Psycho (2000)&#39;, &#39;American Psycho II: All American Girl (2002)&#39;, &#39;American Reunion (American Pie 4) (2012)&#39;, &#39;American Sniper (2014)&#39;, &#39;American Splendor (2003)&#39;, &#39;American Tail, An (1986)&#39;, &#39;American Tail: Fievel Goes West, An (1991)&#39;, &#39;American Ultra (2015)&#39;, &#39;American Wedding (American Pie 3) (2003)&#39;, &#39;American Werewolf in London, An (1981)&#39;, &#39;American Werewolf in Paris, An (1997)&#39;, &#39;American in Paris, An (1951)&#39;, &#39;American, The (2010)&#39;, &#39;American: The Bill Hicks Story (2009)&#39;, &#39;Americanization of Emily, The (1964)&#39;, &#39;Americathon (1979)&#39;, &#39;Amistad (1997)&#39;, &#34;Amityville 1992: It&#39;s About Time (1992)&#34;, &#39;Amityville 3-D (1983)&#39;, &#39;Amityville Curse, The (1990)&#39;, &#39;Amityville Horror, The (1979)&#39;, &#39;Amityville Horror, The (2005)&#39;, &#39;Amityville II: The Possession (1982)&#39;, &#39;Amityville: A New Generation (1993)&#39;, &#39;Amityville: Dollhouse (1996)&#39;, &#34;Amores Perros (Love&#39;s a Bitch) (2000)&#34;, &#39;Amos &amp; Andrew (1993)&#39;, &#39;Amy (2015)&#39;, &#34;Amy&#39;s O (a.k.a. Amy&#39;s Orgasm) (2001)&#34;, &#39;An Amazing Couple (2002)&#39;, &#39;Anacleto: Agente secreto (2015)&#39;, &#39;Anaconda (1997)&#39;, &#39;Anaconda: The Offspring (2008)&#39;, &#39;Anacondas: The Hunt for the Blood Orchid (2004)&#39;, &#39;Analyze That (2002)&#39;, &#39;Analyze This (1999)&#39;, &#39;Anarchist Cookbook, The (2002)&#39;, &#39;Anastasia (1956)&#39;, &#39;Anastasia (1997)&#39;, &#39;Anatomy of a Murder (1959)&#39;, &#39;Anchorman 2: The Legend Continues (2013)&#39;, &#39;Anchorman: The Legend of Ron Burgundy (2004)&#39;, &#39;Anchors Aweigh (1945)&#39;, &#39;And God Created Woman (Et Dieu... créa la femme) (1956)&#39;, &#39;And Now... Ladies and Gentlemen... (2002)&#39;, &#39;And So It Goes (2014)&#39;, &#39;And Starring Pancho Villa as Himself (2003)&#39;, &#39;And Then There Were None (1945)&#39;, &#39;And Your Mother Too (Y tu mamá también) (2001)&#39;, &#39;And the Band Played On (1993)&#39;, &#39;And the Ship Sails On (E la nave va) (1983)&#39;, &#39;Andalusian Dog, An (Chien andalou, Un) (1929)&#39;, &#39;Andre (1994)&#39;, &#39;Andrei Rublev (Andrey Rublyov) (1969)&#39;, &#39;Andrew Dice Clay: Dice Rules (1991)&#39;, &#39;Android (1982)&#39;, &#39;Andromeda Strain, The (1971)&#39;, &#39;Angel Baby (1995)&#39;, &#39;Angel Eyes (2001)&#39;, &#39;Angel Heart (1987)&#39;, &#39;Angel at My Table, An (1990)&#39;, &#34;Angel&#39;s Egg (Tenshi no tamago) (1985)&#34;, &#39;Angel-A (2005)&#39;, &#34;Angela&#39;s Ashes (1999)&#34;, &#39;Angels &amp; Demons (2009)&#39;, &#39;Angels and Insects (1995)&#39;, &#39;Angels in the Outfield (1994)&#39;, &#39;Angels with Dirty Faces (1938)&#39;, &#34;Angels&#39; Share, The (2012)&#34;, &#39;Anger Management (2003)&#39;, &#39;Angie (1994)&#39;, &#39;Angriest Man in Brooklyn, The (2014)&#39;, &#39;Angry Red Planet, The (1959)&#39;, &#39;Angst (1983)&#39;, &#39;Angus (1995)&#39;, &#39;Angus, Thongs and Perfect Snogging (2008)&#39;, &#39;Animal Crackers (1930)&#39;, &#39;Animal Factory (2000)&#39;, &#39;Animal Farm (1954)&#39;, &#39;Animal House (1978)&#39;, &#39;Animal, The (2001)&#39;, &#39;Animals are Beautiful People (1974)&#39;, &#39;Animatrix, The (2003)&#39;, &#39;Anna Christie (1930)&#39;, &#39;Anna Karenina (1935)&#39;, &#39;Anna Karenina (1997)&#39;, &#39;Anna Karenina (2012)&#39;, &#39;Anna and the King (1999)&#39;, &#39;Annabelle (2014)&#39;, &#39;Annabelle: Creation (2017)&#39;, &#39;Annapolis (2006)&#39;, &#39;Anne Frank Remembered (1995)&#39;, &#39;Anne of Green Gables (1985)&#39;, &#39;Anne of Green Gables: The Sequel (a.k.a. Anne of Avonlea) (1987)&#39;, &#39;Anne of the Thousand Days (1969)&#39;, &#39;Annie (1982)&#39;, &#39;Annie Get Your Gun (1950)&#39;, &#39;Annie Hall (1977)&#39;, &#39;Annihilation (2018)&#39;, &#39;Anniversary Party, The (2001)&#39;, &#39;Anomalisa (2015)&#39;, &#39;Another 48 Hrs. (1990)&#39;, &#39;Another Cinderella Story (2008)&#39;, &#39;Another Earth (2011)&#39;, &#39;Another Gay Movie (2006)&#39;, &#39;Another Stakeout (1993)&#39;, &#39;Another Thin Man (1939)&#39;, &#39;Another Woman (1988)&#39;, &#39;Ant Bully, The (2006)&#39;, &#39;Ant-Man (2015)&#39;, &#39;Ant-Man and the Wasp (2018)&#39;, &#39;Anthony Adverse (1936)&#39;, &#39;Anti-Social (2015)&#39;, &#39;Antichrist (2009)&#39;, &#39;Antitrust (2001)&#39;, &#34;Antonia&#39;s Line (Antonia) (1995)&#34;, &#39;Antonio Gaudí (1985)&#39;, &#39;Antwone Fisher (2002)&#39;, &#39;Antz (1998)&#39;, &#39;Anvil! The Story of Anvil (2008)&#39;, &#39;Any Given Sunday (1999)&#39;, &#39;Any Which Way You Can (1980)&#39;, &#39;Anything Else (2003)&#39;, &#39;Anything for Her (Pour elle) (2008)&#39;, &#39;Anything for Love (2016)&#39;, &#39;Anywhere But Here (1999)&#39;, &#39;Apartment, The (1960)&#39;, &#34;Apartment, The (Appartement, L&#39;) (1996)&#34;, &#39;Apocalypse Now (1979)&#39;, &#39;Apocalypto (2006)&#39;, &#39;Apollo 13 (1995)&#39;, &#39;Apollo 18 (2011)&#39;, &#39;Apostle, The (1997)&#39;, &#39;Appaloosa (2008)&#39;, &#39;Apple Dumpling Gang Rides Again, The (1979)&#39;, &#39;Apple Dumpling Gang, The (1975)&#39;, &#39;Apple, The (Sib) (1998)&#39;, &#39;Applesauce (2015)&#39;, &#39;Appleseed (Appurushîdo) (2004)&#39;, &#34;April Fool&#39;s Day (1986)&#34;, &#39;April Morning (1988)&#39;, &#39;Apt Pupil (1998)&#39;, &#39;Aqua Teen Hunger Force Colon Movie Film for Theaters (2007)&#39;, &#39;Aquamarine (2006)&#39;, &#39;Arachnophobia (1990)&#39;, &#39;Ararat (2002)&#39;, &#39;Are We Done Yet? (2007)&#39;, &#39;Are We There Yet? (2005)&#39;, &#39;Are You Scared? (2006)&#39;, &#39;Argo (2012)&#39;, &#39;Ari Shaffir: Double Negative (2017)&#39;, &#39;Ariel (1988)&#39;, &#39;Aristocats, The (1970)&#39;, &#39;Aristocrats, The (2005)&#39;, &#39;Arizona Dream (1993)&#39;, &#39;Arlington Road (1999)&#39;, &#39;Armageddon (1998)&#39;, &#39;Armed and Dangerous (1986)&#39;, &#39;Armour of God (Long xiong hu di) (1987)&#39;, &#39;Armour of God II: Operation Condor (Operation Condor) (Fei ying gai wak) (1991)&#39;, &#39;Army of Darkness (1993)&#39;, &#34;Army of Shadows (L&#39;armée des ombres) (1969)&#34;, &#39;Around the World in 80 Days (1956)&#39;, &#39;Around the World in 80 Days (2004)&#39;, &#39;Arrival (2016)&#39;, &#39;Arrival, The (1996)&#39;, &#39;Arsenic and Old Lace (1944)&#39;, &#39;Art School Confidential (2006)&#39;, &#39;Art of Getting By, The (2011)&#39;, &#39;Art of War, The (2000)&#39;, &#39;Art of the Steal, The (2009)&#39;, &#39;Art of the Steal, The (2013)&#39;, &#39;Artemisia (1997)&#39;, &#39;Arthur (1981)&#39;, &#39;Arthur (2011)&#39;, &#39;Arthur 2: On the Rocks (1988)&#39;, &#39;Arthur Christmas (2011)&#39;, &#39;As Above, So Below (2014)&#39;, &#39;As Good as It Gets (1997)&#39;, &#39;As I Was Moving Ahead Occasionally I Saw Brief Glimpses of Beauty (2000)&#39;, &#39;As You Like It (2006)&#39;, &#39;Ascent, The (Voskhozhdeniye) (1977)&#39;, &#39;Ashby (2015)&#39;, &#39;Ashes and Diamonds (Popiól i diament) (1958)&#39;, &#39;Ashes of Time (Dung che sai duk) (1994)&#39;, &#39;Ask the Dust (2006)&#39;, &#39;Aspen Extreme (1993)&#39;, &#39;Asphalt Jungle, The (1950)&#39;, &#39;Asphyx, The (1973)&#39;, &#34;Assassin&#39;s Creed (2016)&#34;, &#39;Assassination (1987)&#39;, &#39;Assassination Tango (2002)&#39;, &#39;Assassination of Jesse James by the Coward Robert Ford, The (2007)&#39;, &#39;Assassination of Richard Nixon, The (2004)&#39;, &#39;Assassination of a High School President (2008)&#39;, &#39;Assassins (1995)&#39;, &#39;Assault on Precinct 13 (1976)&#39;, &#39;Assault on Precinct 13 (2005)&#39;, &#39;Assembly (Ji jie hao) (2007) &#39;, &#39;Assignment, The (1997)&#39;, &#39;Asterix &amp; Obelix vs. Caesar (Astérix et Obélix contre César) (1999)&#39;, &#39;Asterix &amp; Obelix: God Save Britannia (Astérix et Obélix: Au service de Sa Majesté) (2012)&#39;, &#39;Asterix &amp; Obelix: Mission Cleopatra (Astérix &amp; Obélix: Mission Cléopâtre) (2002)&#39;, &#39;Asterix and Cleopatra (Astérix et Cléopâtre) (1968)&#39;, &#39;Asterix and the Vikings (Astérix et les Vikings) (2006)&#39;, &#39;Asterix at the Olympic Games (Astérix aux jeux olympiques) (2008)&#39;, &#39;Asterix in America (a.k.a Asterix Conquers America) (Astérix et les Indiens) (1994)&#39;, &#39;Asterix: The Land of the Gods (Astérix: Le domaine des dieux) (2014)&#39;, &#39;Astronaut Farmer, The (2007)&#39;, &#34;Astronaut&#39;s Wife, The (1999)&#34;, &#39;At Close Range (1986)&#39;, &#39;At First Sight (1999)&#39;, &#39;At Middleton (2013)&#39;, &#39;At the Circus (1939)&#39;, &#34;Atalante, L&#39; (1934)&#34;, &#39;Atlantic City (1980)&#39;, &#39;Atlantis: The Lost Empire (2001)&#39;, &#39;Atlas Shrugged: Part 1 (2011)&#39;, &#39;Atomic Blonde (2017)&#39;, &#39;Atomic Brain, The (1963)&#39;, &#39;Atomic Cafe, The (1982)&#39;, &#39;Atomic Submarine, The (1959)&#39;, &#39;Atonement (2007)&#39;, &#39;Atragon (Kaitei Gunkan) (1963)&#39;, &#39;Attack of the 50 Foot Woman (1958)&#39;, &#39;Attack of the Crab Monsters (1957)&#39;, &#39;Attack of the Giant Leeches (1959)&#39;, &#39;Attack of the Killer Tomatoes! (1978)&#39;, &#39;Attack of the Puppet People (1958)&#39;, &#39;Attack the Block (2011)&#39;, &#39;Attila (Attila Flagello di Dio) (1982)&#39;, &#39;Au Hasard Balthazar (1966)&#39;, &#39;Au revoir les enfants (1987)&#39;, &#39;Audition (Ôdishon) (1999)&#39;, &#39;Audrey Rose (1977)&#39;, &#39;August Rush (2007)&#39;, &#39;Auntie Mame (1958)&#39;, &#39;Austenland (2013)&#39;, &#39;Austin Powers in Goldmember (2002)&#39;, &#39;Austin Powers: International Man of Mystery (1997)&#39;, &#39;Austin Powers: The Spy Who Shagged Me (1999)&#39;, &#39;Australia (2008)&#39;, &#39;Auto Focus (2002)&#39;, &#39;Autumn Marathon (1979)&#39;, &#39;Autumn Sonata (Höstsonaten) (1978)&#39;, &#39;Autumn Spring (Babí léto) (2001)&#39;, &#34;Autumn Tale, An (Conte d&#39;automne) (1998)&#34;, &#39;Autumn in New York (2000)&#39;, &#39;Autómata (Automata) (2014)&#39;, &#39;Avalanche (1978)&#39;, &#39;Avalon (1990)&#39;, &#39;Avalon (2001)&#39;, &#39;Avanti! (1972)&#39;, &#39;Avatar (2009)&#39;, &#39;Avengers, The (1998)&#39;, &#39;Avengers, The (2012)&#39;, &#39;Avengers: Age of Ultron (2015)&#39;, &#39;Avengers: Infinity War - Part I (2018)&#39;, &#39;Aviator, The (2004)&#39;, &#34;Avventura, L&#39; (Adventure, The) (1960)&#34;, &#39;Awake (2007)&#39;, &#39;Awakening, The (1980)&#39;, &#39;Awakenings (1990)&#39;, &#39;Away We Go (2009)&#39;, &#39;Away from Her (2006)&#39;, &#39;Awful Truth, The (1937)&#39;, &#39;Awfully Big Adventure, An (1995)&#39;, &#39;Azumi (2003)&#39;, &#39;B*A*P*S (1997)&#39;, &#39;B. Monkey (1998)&#39;, &#39;B/W (2015)&#39;, &#39;BASEketball (1998)&#39;, &#39;BMX Bandits (1983)&#39;, &#39;BURN-E (2008)&#39;, &#34;Baadasssss! (How to Get the Man&#39;s Foot Outta Your Ass) (2003)&#34;, &#39;Baader Meinhof Komplex, Der (2008)&#39;, &#39;Baarìa (2009)&#39;, &#39;Babadook, The (2014)&#39;, &#39;Babe (1995)&#39;, &#39;Babe, The (1992)&#39;, &#39;Babe: Pig in the City (1998)&#39;, &#39;Babel (2006)&#39;, &#39;Babes in Toyland (1934)&#39;, &#39;Babes in Toyland (1961)&#39;, &#34;Babette&#39;s Feast (Babettes gæstebud) (1987)&#34;, &#39;Baby Boom (1987)&#39;, &#39;Baby Boy (2001)&#39;, &#39;Baby Driver (2017)&#39;, &#39;Baby Geniuses (1999)&#39;, &#39;Baby Mama (2008)&#39;, &#34;Baby&#39;s Day Out (1994)&#34;, &#39;Baby, The (1973)&#39;, &#39;Baby-Sitters Club, The (1995)&#39;, &#39;Baby... Secret of the Lost Legend (1985)&#39;, &#39;Babylon 5&#39;, &#39;Babylon 5: A Call to Arms (1999)&#39;, &#39;Babylon 5: In the Beginning (1998)&#39;, &#39;Babylon 5: The Gathering (1993)&#39;, &#39;Babylon 5: The Legend of the Rangers: To Live and Die in Starlight (2002)&#39;, &#39;Babylon 5: The Lost Tales - Voices in the Dark (2007)&#39;, &#39;Babylon 5: The River of Souls (1998)&#39;, &#39;Babylon 5: Thirdspace (1998)&#39;, &#39;Babylon A.D. (2008)&#39;, &#39;Babysitter, The (1995)&#39;, &#39;Bachelor Party (1984)&#39;, &#39;Bachelor and the Bobby-Soxer, The (1947)&#39;, &#39;Bachelor, The (1999)&#39;, &#39;Back to School (1986)&#39;, &#39;Back to the Beach (1987)&#39;, &#39;Back to the Future (1985)&#39;, &#39;Back to the Future Part II (1989)&#39;, &#39;Back to the Future Part III (1990)&#39;, &#39;Back-up Plan, The (2010)&#39;, &#39;Backbeat (1993)&#39;, &#39;Backdraft (1991)&#39;, &#39;Bad Asses (Bad Ass 2) (2014)&#39;, &#39;Bad Asses on the Bayou (2015)&#39;, &#39;Bad Boy Bubby (1993)&#39;, &#39;Bad Boys (1995)&#39;, &#39;Bad Boys II (2003)&#39;, &#39;Bad Company (1995)&#39;, &#39;Bad Company (2002)&#39;, &#39;Bad Day at Black Rock (1955)&#39;, &#39;Bad Education (La mala educación) (2004)&#39;, &#39;Bad Girls (1994)&#39;, &#39;Bad Karma (2012)&#39;, &#39;Bad Lieutenant (1992)&#39;, &#39;Bad Lieutenant: Port of Call New Orleans (2009)&#39;, &#39;Bad Milo (Bad Milo!) (2013)&#39;, &#39;Bad Moms (2016)&#39;, &#39;Bad News Bears (2005)&#39;, &#39;Bad News Bears, The (1976)&#39;, &#39;Bad Santa (2003)&#39;, &#39;Bad Santa 2 (2016)&#39;, &#39;Bad Seed, The (1956)&#39;, &#39;Bad Taste (1987)&#39;, &#39;Bad Teacher (2011)&#39;, &#39;Bad Words (2013)&#39;, &#39;Bad and the Beautiful, The (1952)&#39;, &#39;Badlands (1973)&#39;, &#39;Bag Man, The (2014)&#39;, &#39;Bagdad Cafe (Out of Rosenheim) (1987)&#39;, &#39;Bait (2000)&#39;, &#39;Bakuman (2015)&#39;, &#39;Balance (1989)&#39;, &#39;Ballad of Jack and Rose, The (2005)&#39;, &#39;Ballad of Narayama, The (Narayama bushiko) (1983)&#39;, &#39;Ballistic: Ecks vs. Sever (2002)&#39;, &#39;Balls Out: Gary the Tennis Coach (2009)&#39;, &#39;Balls of Fury (2007)&#39;, &#39;Balto (1995)&#39;, &#39;Bamba, La (1987)&#39;, &#39;Bambi (1942)&#39;, &#39;Bamboozled (2000)&#39;, &#39;Banana Joe (1981)&#39;, &#39;Bananas (1971)&#39;, &#39;Band Wagon, The (1953)&#39;, &#39;Band of Brothers (2001)&#39;, &#39;Band of Outsiders (Bande à part) (1964)&#39;, &#39;Band of the Hand (1986)&#39;, &#34;Band&#39;s Visit, The (Bikur Ha-Tizmoret) (2007)&#34;, &#39;Bandidas (2006)&#39;, &#39;Bandits (2001)&#39;, &#34;Bang, Bang, You&#39;re Dead (2002)&#34;, &#39;Banger Sisters, The (2002)&#39;, &#39;Bangkok Dangerous (2008)&#39;, &#39;Bank Dick, The (1940)&#39;, &#39;Bank Job, The (2008)&#39;, &#39;Baraka (1992)&#39;, &#39;Baran (2001)&#39;, &#39;Barb Wire (1996)&#39;, &#39;Barbarella (1968)&#39;, &#39;Barbarian Invasions, The (Les invasions barbares) (2003)&#39;, &#39;Barbarians at the Gate (1993)&#39;, &#39;Barbershop (2002)&#39;, &#39;Barbershop 2: Back in Business (2004)&#39;, &#39;Barbershop: The Next Cut (2016)&#39;, &#39;Barcelona (1994)&#39;, &#39;Barefoot (2014)&#39;, &#39;Barefoot Contessa, The (1954)&#39;, &#39;Barefoot Executive, The (1971)&#39;, &#39;Barefoot in the Park (1967)&#39;, &#39;Barely Lethal (2015)&#39;, &#39;Barfly (1987)&#39;, &#39;Barking Dogs Never Bite (Flandersui gae) (2000)&#39;, &#34;Barney&#39;s Great Adventure (1998)&#34;, &#34;Barney&#39;s Version (2010)&#34;, &#39;Barry Lyndon (1975)&#39;, &#39;Bart Got a Room (2008)&#39;, &#39;Bartleby (2001)&#39;, &#39;Barton Fink (1991)&#39;, &#39;Basic (2003)&#39;, &#39;Basic Instinct (1992)&#39;, &#39;Basic Instinct 2 (2006)&#39;, &#39;Basket Case (1982)&#39;, &#39;Basketball Diaries, The (1995)&#39;, &#39;Basquiat (1996)&#39;, &#39;Bastard Out of Carolina (1996)&#39;, &#39;Bat*21 (1988)&#39;, &#39;Batman &amp; Robin (1997)&#39;, &#39;Batman (1966)&#39;, &#39;Batman (1989)&#39;, &#39;Batman Begins (2005)&#39;, &#39;Batman Beyond: Return of the Joker (2000)&#39;, &#39;Batman Forever (1995)&#39;, &#39;Batman Returns (1992)&#39;, &#39;Batman v Superman: Dawn of Justice (2016)&#39;, &#39;Batman vs. Robin (2015)&#39;, &#39;Batman/Superman Movie, The (1998)&#39;, &#39;Batman: Assault on Arkham (2014)&#39;, &#39;Batman: Gotham Knight (2008)&#39;, &#39;Batman: Mask of the Phantasm (1993)&#39;, &#39;Batman: Mystery of the Batwoman (2003)&#39;, &#39;Batman: The Dark Knight Returns, Part 1 (2012)&#39;, &#39;Batman: The Dark Knight Returns, Part 2 (2013)&#39;, &#39;Batman: The Killing Joke (2016)&#39;, &#39;Batman: Under the Red Hood (2010)&#39;, &#39;Batman: Year One (2011)&#39;, &#39;Bats (1999)&#39;, &#39;Battle Beyond the Stars (1980)&#39;, &#39;Battle Creek Brawl (Big Brawl, The) (1980)&#39;, &#39;Battle For Sevastopol (2015)&#39;, &#39;Battle Planet (2008)&#39;, &#39;Battle Royale (Batoru rowaiaru) (2000)&#39;, &#39;Battle Royale 2: Requiem (Batoru rowaiaru II: Chinkonka) (2003)&#39;, &#39;Battle for Haditha (2007)&#39;, &#39;Battle for the Planet of the Apes (1973)&#39;, &#39;Battle in Seattle (2007)&#39;, &#39;Battle of Algiers, The (La battaglia di Algeri) (1966)&#39;, &#39;Battle of Shaker Heights, The (2003)&#39;, &#39;Battle: Los Angeles (2011)&#39;, &#39;Battlefield Earth (2000)&#39;, &#39;Battles Without Honor &amp; Humanity (Jingi naki tatakai) (1973)&#39;, &#39;Battleship (2012)&#39;, &#39;Battleship Potemkin (1925)&#39;, &#39;Battlestar Galactica (2003)&#39;, &#39;Battlestar Galactica: Razor (2007)&#39;, &#39;Battlestar Galactica: The Plan (2009)&#39;, &#39;Baxter (1989)&#39;, &#39;Baxter, The (2005)&#39;, &#39;Bay, The (2012)&#39;, &#39;Baywatch (2017)&#39;, &#39;Be Cool (2005)&#39;, &#39;Be Kind Rewind (2008)&#39;, &#39;Beach Blanket Bingo (1965)&#39;, &#39;Beach, The (2000)&#39;, &#39;Beaches (1988)&#39;, &#39;Bean (1997)&#39;, &#34;Bear, The (Ours, L&#39;) (1988)&#34;, &#39;Beast Within, The (1982)&#39;, &#39;Beast of War, The (Beast, The) (1988)&#39;, &#39;Beastly (2011)&#39;, &#39;Beastmaster, The (1982)&#39;, &#39;Beasts of No Nation (2015)&#39;, &#39;Beasts of the Southern Wild (2012)&#39;, &#39;Beat Street (1984)&#39;, &#34;Beat That My Heart Skipped, The (battre mon coeur s&#39;est arrêté, De) (2005)&#34;, &#39;Beat the Devil (1953)&#39;, &#39;Beautician and the Beast, The (1997)&#39;, &#39;Beautiful (2000)&#39;, &#39;Beautiful Boy (2010)&#39;, &#39;Beautiful Creatures (2000)&#39;, &#39;Beautiful Creatures (2013)&#39;, &#39;Beautiful Girls (1996)&#39;, &#39;Beautiful Losers (2008)&#39;, &#39;Beautiful Mind, A (2001)&#39;, &#39;Beautiful People (1999)&#39;, &#39;Beautiful Thing (1996)&#39;, &#39;Beauty Shop (2005)&#39;, &#39;Beauty and the Beast (1991)&#39;, &#39;Beauty and the Beast (2017)&#39;, &#39;Beauty and the Beast (La belle et la bête) (1946)&#39;, &#39;Beauty and the Beast: The Enchanted Christmas (1997)&#39;, &#39;Beauty of the Day (Belle de jour) (1967)&#39;, &#39;Beavis and Butt-Head Do America (1996)&#39;, &#34;Bebe&#39;s Kids (1992)&#34;, &#39;Because I Said So (2007)&#39;, &#39;Because of Winn-Dixie (2005)&#39;, &#39;Becoming Jane (2007)&#39;, &#39;Bed of Roses (1996)&#39;, &#39;Bedazzled (1967)&#39;, &#39;Bedazzled (2000)&#39;, &#39;Bedknobs and Broomsticks (1971)&#39;, &#39;Bedrooms &amp; Hallways (1998)&#39;, &#39;Bedtime Stories (2008)&#39;, &#39;Bee Movie (2007)&#39;, &#39;Beer League (2006)&#39;, &#39;Beerfest (2006)&#39;, &#39;Beethoven (1992)&#39;, &#34;Beethoven&#39;s 2nd (1993)&#34;, &#39;Beetlejuice (1988)&#39;, &#39;Before Midnight (2013)&#39;, &#39;Before Night Falls (2000)&#39;, &#39;Before Sunrise (1995)&#39;, &#39;Before Sunset (2004)&#39;, &#39;Before We Go (2014)&#39;, &#39;Before and After (1996)&#39;, &#34;Before the Devil Knows You&#39;re Dead (2007)&#34;, &#39;Before the Fall (NaPolA - Elite für den Führer) (2004)&#39;, &#39;Before the Rain (Pred dozhdot) (1994)&#39;, &#39;Begin Again (2013)&#39;, &#39;Beginners (2010)&#39;, &#39;Beginning of the End (1957)&#39;, &#39;Begotten (1990)&#39;, &#39;Behind Enemy Lines (2001)&#39;, &#39;Behind Enemy Lines II: Axis of Evil (2006)&#39;, &#39;Behind the Candelabra (2013)&#39;, &#39;Behind the Mask: The Rise of Leslie Vernon (2006)&#39;, &#39;Beijing Bicycle (Shiqi sui de dan che) (2001)&#39;, &#34;Being Elmo: A Puppeteer&#39;s Journey (2011)&#34;, &#39;Being Human (1993)&#39;, &#39;Being John Malkovich (1999)&#39;, &#39;Being Julia (2004)&#39;, &#39;Being There (1979)&#39;, &#39;Believer, The (2001)&#39;, &#39;Believers, The (1987)&#39;, &#39;Bell, Book and Candle (1958)&#39;, &#39;Bella (2006)&#39;, &#39;Belladonna of Sadness (1973)&#39;, &#39;Belle époque (1992)&#39;, &#39;Bellflower (2011)&#39;, &#34;Bells of St. Mary&#39;s, The (1945)&#34;, &#39;Belly (1998)&#39;, &#39;Beloved (1998)&#39;, &#39;Below (2002)&#39;, &#39;Ben X (2007)&#39;, &#39;Ben-Hur (1959)&#39;, &#39;Ben-Hur: A Tale of the Christ (1925)&#39;, &#39;Ben-hur (2016)&#39;, &#39;Benchwarmers, The (2006)&#39;, &#39;Bend It Like Beckham (2002)&#39;, &#39;Beneath the Planet of the Apes (1970)&#39;, &#39;Benji (1974)&#39;, &#39;Benji the Hunted (1987)&#39;, &#39;Benny &amp; Joon (1993)&#39;, &#39;Bent (1997)&#39;, &#39;Beowulf &amp; Grendel (2005)&#39;, &#39;Beowulf (1999)&#39;, &#39;Beowulf (2007)&#39;, &#39;Berlin Calling (2008)&#39;, &#39;Bernie (1996)&#39;, &#39;Bernie (2011)&#39;, &#34;Besieged (a.k.a. L&#39; Assedio) (1998)&#34;, &#39;Best Defense (1984)&#39;, &#39;Best Exotic Marigold Hotel, The (2011)&#39;, &#39;Best Little Whorehouse in Texas, The (1982)&#39;, &#39;Best Man, The (1999)&#39;, &#39;Best Man, The (Testimone dello sposo, Il) (1998)&#39;, &#39;Best Men (1997)&#39;, &#39;Best Offer, The (Migliore offerta, La) (2013)&#39;, &#39;Best Seller (1987)&#39;, &#39;Best Worst Movie (2009)&#39;, &#39;Best Years of Our Lives, The (1946)&#39;, &#39;Best in Show (2000)&#39;, &#39;Best of Youth, The (La meglio gioventù) (2003)&#39;, &#39;Best of the Best (1989)&#39;, &#39;Best of the Best 3: No Turning Back (1995)&#39;, &#39;Betrayed (1988)&#39;, &#34;Betsy&#39;s Wedding (1990)&#34;, &#39;Better Living Through Chemistry (2014)&#39;, &#39;Better Living Through Circuitry (1999)&#39;, &#39;Better Luck Tomorrow (2002)&#39;, &#39;Better Off Dead... (1985)&#39;, &#39;Better Than Chocolate (1999)&#39;, &#39;Better Than Sex (2000)&#39;, &#39;Better Tomorrow II, A (Ying hung boon sik II) (1987)&#39;, &#39;Better Tomorrow, A (Ying hung boon sik) (1986)&#39;, &#39;Betting on Zero (2016)&#39;, &#39;Between Your Legs (Entre las piernas) (1999)&#39;, &#39;Between the Folds (2008)&#39;, &#39;Beverly Hillbillies, The (1993)&#39;, &#39;Beverly Hills Chihuahua (2008)&#39;, &#39;Beverly Hills Cop (1984)&#39;, &#39;Beverly Hills Cop II (1987)&#39;, &#39;Beverly Hills Cop III (1994)&#39;, &#39;Beverly Hills Ninja (1997)&#39;, &#39;Bewitched (2005)&#39;, &#39;Beyond Bedlam (1993)&#39;, &#39;Beyond Borders (2003)&#39;, &#39;Beyond Rangoon (1995)&#39;, &#39;Beyond Re-Animator (2003)&#39;, &#39;Beyond Silence (Jenseits der Stille) (1996)&#39;, &#39;Beyond the Clouds (Al di là delle nuvole) (1996)&#39;, &#39;Beyond the Mat (1999)&#39;, &#39;Beyond the Poseidon Adventure (1979)&#39;, &#39;Beyond the Sea (2004)&#39;, &#39;Beyond the Valley of the Dolls (1970)&#39;, &#39;Bhaji on the Beach (1993)&#39;, &#39;Bicentennial Man (1999)&#39;, &#39;Bicycle Thieves (a.k.a. The Bicycle Thief) (a.k.a. The Bicycle Thieves) (Ladri di biciclette) (1948)&#39;, &#39;Big (1988)&#39;, &#39;Big Bang, The (2011)&#39;, &#39;Big Bird Cage, The (1972)&#39;, &#39;Big Blue, The (Grand bleu, Le) (1988)&#39;, &#39;Big Boss, The (Fists of Fury) (Tang shan da xiong) (1971)&#39;, &#39;Big Bounce, The (2004)&#39;, &#39;Big Bully (1996)&#39;, &#39;Big Business (1988)&#39;, &#39;Big Chill, The (1983)&#39;, &#39;Big Country, The (1958)&#39;, &#39;Big Daddy (1999)&#39;, &#39;Big Deal on Madonna Street (I Soliti Ignoti) (1958)&#39;, &#39;Big Doll House, The (1971)&#39;, &#39;Big Easy, The (1987)&#39;, &#39;Big Eden (2000)&#39;, &#39;Big Empty, The (2003)&#39;, &#39;Big Eyes (2014)&#39;, &#39;Big Fat Liar (2002)&#39;, &#39;Big Fish (2003)&#39;, &#39;Big Green, The (1995)&#39;, &#39;Big Hero 6 (2014)&#39;, &#39;Big Hit, The (1998)&#39;, &#39;Big Kahuna, The (2000)&#39;, &#39;Big Lebowski, The (1998)&#39;, &#34;Big Momma&#39;s House (2000)&#34;, &#34;Big Momma&#39;s House 2 (2006)&#34;, &#39;Big Mommas: Like Father, Like Son (2011)&#39;, &#39;Big Night (1996)&#39;, &#39;Big One, The (1997)&#39;, &#39;Big Red One, The (1980)&#39;, &#39;Big Short, The (2015)&#39;, &#39;Big Sleep, The (1946)&#39;, &#39;Big Stan (2007)&#39;, &#39;Big Tease, The (1999)&#39;, &#39;Big Top Pee-Wee (1988)&#39;, &#39;Big Top Scooby-Doo! (2012)&#39;, &#39;Big Trouble (2002)&#39;, &#39;Big Trouble in Little China (1986)&#39;, &#39;Big Wednesday (1978)&#39;, &#39;Big Year, The (2011)&#39;, &#39;Bigger, Stronger, Faster* (2008)&#39;, &#39;Biggles (1986)&#39;, &#39;Biker Boyz (2003)&#39;, &#39;Bikini Beach (1964)&#39;, &#34;Bill &amp; Ted&#39;s Bogus Journey (1991)&#34;, &#34;Bill &amp; Ted&#39;s Excellent Adventure (1989)&#34;, &#34;Bill Burr: I&#39;m Sorry You Feel That Way (2014)&#34;, &#39;Bill Burr: Let It Go (2010)&#39;, &#39;Bill Burr: Walk Your Way Out (2017)&#39;, &#39;Bill Burr: Why Do I Do This? (2008)&#39;, &#39;Bill Burr: You People Are All the Same (2012)&#39;, &#39;Bill Cosby, Himself (1983)&#39;, &#39;Bill Cunningham New York (2011)&#39;, &#39;Bill Hicks: Revelations (1993)&#39;, &#39;Billabong Odyssey (2003)&#39;, &#39;Billy Bathgate (1991)&#39;, &#39;Billy Elliot (2000)&#39;, &#39;Billy Jack (1971)&#39;, &#39;Billy Jack Goes to Washington (1977)&#39;, &#39;Billy Liar (1963)&#39;, &#39;Billy Madison (1995)&#39;, &#39;Biloxi Blues (1988)&#39;, &#39;Bio-Dome (1996)&#39;, &#39;Bird People in China, The (Chûgoku no chôjin) (1998)&#39;, &#39;Bird on a Wire (1990)&#39;, &#34;Bird with the Crystal Plumage, The (Uccello dalle piume di cristallo, L&#39;) (1970)&#34;, &#39;Birdcage, The (1996)&#39;, &#39;Birdemic: Shock and Terror (2010)&#39;, &#39;Birdman of Alcatraz (1962)&#39;, &#39;Birdman: Or (The Unexpected Virtue of Ignorance) (2014)&#39;, &#39;Birds, The (1963)&#39;, &#39;Birdy (1984)&#39;, &#39;Birth (2004)&#39;, &#39;Birth of a Nation, The (1915)&#39;, &#39;Birthday Girl (2001)&#39;, &#34;Bishop&#39;s Wife, The (1947)&#34;, &#39;Bitter Lake (2015)&#39;, &#39;Bitter Moon (1992)&#39;, &#39;Bittersweet Life, A (Dalkomhan insaeng) (2005)&#39;, &#39;Biutiful (2010)&#39;, &#39;BlacKkKlansman (2018)&#39;, &#39;Black Beauty (1994)&#39;, &#39;Black Book (Zwartboek) (2006)&#39;, &#39;Black Butler: Book of the Atlantic (2017)&#39;, &#39;Black Cat, White Cat (Crna macka, beli macor) (1998)&#39;, &#39;Black Cauldron, The (1985)&#39;, &#39;Black Christmas (1974)&#39;, &#39;Black Christmas (2006)&#39;, &#39;Black Dahlia, The (2006)&#39;, &#39;Black Dynamite (2009)&#39;, &#39;Black Hawk Down (2001)&#39;, &#39;Black Hole, The (1979)&#39;, &#39;Black Knight (2001)&#39;, &#39;Black Mask (Hak hap) (1996)&#39;, &#39;Black Mass (2015)&#39;, &#39;Black Mirror&#39;, &#39;Black Mirror: White Christmas (2014)&#39;, &#39;Black Narcissus (1947)&#39;, &#39;Black Orpheus (Orfeu Negro) (1959)&#39;, &#39;Black Panther (2017)&#39;, &#39;Black Rain (1989)&#39;, &#39;Black Robe (1991)&#39;, &#39;Black Sabbath (Tre volti della paura, I) (1963)&#39;, &#39;Black Sea (2015)&#39;, &#39;Black Sheep (1996)&#39;, &#39;Black Sheep (2006)&#39;, &#39;Black Snake Moan (2006)&#39;, &#39;Black Stallion Returns, The (1983)&#39;, &#39;Black Stallion, The (1979)&#39;, &#39;Black Swan (2010)&#39;, &#39;Black Tar Heroin: The Dark End of the Street (2000)&#39;, &#39;Black Widow (1987)&#39;, &#39;Blackadder Back &amp; Forth (1999)&#39;, &#34;Blackadder&#39;s Christmas Carol (1988)&#34;, &#34;Blackbeard&#39;s Ghost (1968)&#34;, &#39;Blackboard Jungle (1955)&#39;, &#39;Blackfish (2013)&#39;, &#39;Blackhat (2015)&#39;, &#39;Blackrock (1997)&#39;, &#39;Blade (1998)&#39;, &#39;Blade II (2002)&#39;, &#39;Blade Runner (1982)&#39;, &#39;Blade Runner 2049 (2017)&#39;, &#39;Blade: Trinity (2004)&#39;, &#39;Blades of Glory (2007)&#39;, &#39;Blair Witch (2016)&#39;, &#39;Blair Witch Project, The (1999)&#39;, &#39;Blame It on Rio (1984)&#39;, &#39;Blame It on the Bellboy (1992)&#39;, &#39;Blank Check (1994)&#39;, &#39;Blankman (1994)&#39;, &#39;Blast from the Past (1999)&#39;, &#39;Blaze (1989)&#39;, &#39;Blazing Saddles (1974)&#39;, &#39;Bleeder (1999)&#39;, &#39;Blended (2014)&#39;, &#39;Bless the Child (2000)&#39;, &#39;Blind Date (1984)&#39;, &#39;Blind Date (1987)&#39;, &#39;Blind Fury (1989)&#39;, &#39;Blind Side, The (2009)&#39;, &#34;Blind Spot: Hitler&#39;s Secretary (Im toten Winkel - Hitlers Sekretärin) (2002)&#34;, &#39;Blind Swordsman: Zatoichi, The (Zatôichi) (2003)&#39;, &#39;Blindness (2008)&#39;, &#39;Bling Ring, The (2013)&#39;, &#39;Blink (1994)&#39;, &#39;BlinkyTM (2011)&#39;, &#39;Bliss (1997)&#39;, &#39;Bliss (2012)&#39;, &#39;Blitz (2011)&#39;, &#39;Blob, The (1958)&#39;, &#39;Blob, The (1988)&#39;, &#34;Block Party (a.k.a. Dave Chappelle&#39;s Block Party) (2005)&#34;, &#39;Blockers (2018)&#39;, &#39;Blood Beach (1981)&#39;, &#39;Blood Creek (a.k.a. Town Creek) (2009)&#39;, &#39;Blood Diamond (2006)&#39;, &#39;Blood Feast (1963)&#39;, &#39;Blood In, Blood Out (1993)&#39;, &#39;Blood Simple (1984)&#39;, &#39;Blood Work (2002)&#39;, &#39;Blood and Chocolate (2007)&#39;, &#39;Blood and Wine (Blood &amp; Wine) (1996)&#39;, &#34;Blood for Dracula (Andy Warhol&#39;s Dracula) (1974)&#34;, &#39;Blood of Heroes, The (Salute of the Jugger, The) (1989)&#39;, &#39;Blood of the Beasts (Sang des bêtes, Le) (1949)&#39;, &#39;Blood: The Last Vampire (2000)&#39;, &#39;Blood: The Last Vampire (2009)&#39;, &#39;Bloodmoon (1997)&#39;, &#39;Bloodsport (1988)&#39;, &#39;Bloodsport 2 (a.k.a. Bloodsport II: The Next Kumite) (1996)&#39;, &#39;Bloodsport III (1996)&#39;, &#39;Bloodsport: The Dark Kumite (1999)&#39;, &#39;Bloodsucking Bastards (2015)&#39;, &#39;Bloody Sunday (2002)&#39;, &#39;Blow (2001)&#39;, &#39;Blow Out (1981)&#39;, &#39;Blow-Out (La grande bouffe) (1973)&#39;, &#39;Blow-Up (Blowup) (1966)&#39;, &#39;Blown Away (1994)&#39;, &#39;Blue Angel, The (Blaue Engel, Der) (1930)&#39;, &#39;Blue Car (2002)&#39;, &#39;Blue Chips (1994)&#39;, &#39;Blue Collar Comedy Tour: The Movie (2003)&#39;, &#39;Blue Crush (2002)&#39;, &#39;Blue Exorcist: The Movie (2012)&#39;, &#34;Blue Is the Warmest Color (La vie d&#39;Adèle) (2013)&#34;, &#39;Blue Jasmine (2013)&#39;, &#39;Blue Juice (1995)&#39;, &#39;Blue Lagoon, The (1980)&#39;, &#39;Blue Mountain State: The Rise of Thadland (2015)&#39;, &#39;Blue Planet II (2017)&#39;, &#39;Blue Ruin (2013)&#39;, &#39;Blue Sky (1994)&#39;, &#39;Blue Steel (1990)&#39;, &#39;Blue Streak (1999)&#39;, &#39;Blue Thunder (1983)&#39;, &#39;Blue Valentine (2010)&#39;, &#39;Blue Velvet (1986)&#39;, &#39;Blue in the Face (1995)&#39;, &#39;Blueberry (2004)&#39;, &#39;Blues Brothers 2000 (1998)&#39;, &#39;Blues Brothers, The (1980)&#39;, &#39;Bo Burnham: Make Happy (2016)&#39;, &#39;Boat Trip (2003)&#39;, &#39;Bob &amp; Carol &amp; Ted &amp; Alice (1969)&#39;, &#39;Bob Roberts (1992)&#39;, &#39;Bob le Flambeur (1955)&#39;, &#39;Bobby (2006)&#39;, &#39;Bobby Jones, Stroke of Genius (2004)&#39;, &#39;Bobik Visiting Barbos (1977)&#39;, &#34;Boccaccio &#39;70 (1962)&#34;, &#39;Bodies, Rest &amp; Motion (1993)&#39;, &#39;Body (2015)&#39;, &#39;Body Double (1984)&#39;, &#39;Body Heat (1981)&#39;, &#39;Body Parts (1991)&#39;, &#39;Body Shots (1999)&#39;, &#39;Body Snatcher, The (1945)&#39;, &#39;Body Snatchers (1993)&#39;, &#39;Body of Evidence (1993)&#39;, &#39;Body of Lies (2008)&#39;, &#39;Bodyguard, The (1992)&#39;, &#39;Bogus (1996)&#39;, &#39;Boiler Room (2000)&#39;, &#39;Boiling Point (1993)&#39;, &#39;Bollywood/Hollywood (2002)&#39;, &#39;Bolt (2008)&#39;, &#39;Bone Collector, The (1999)&#39;, &#39;Bone Man, The (Der Knochenmann) (2009)&#39;, &#39;Bone Tomahawk (2015)&#39;, &#39;Bones (2001)&#39;, &#39;Bonfire of the Vanities (1990)&#39;, &#34;Boniface&#39;s Holiday (1965)&#34;, &#39;Bonnie and Clyde (1967)&#39;, &#39;Boogeyman (2005)&#39;, &#39;Boogeyman, The (1980)&#39;, &#39;Boogie Nights (1997)&#39;, &#39;Book Thief, The (2013)&#39;, &#39;Book of Eli, The (2010)&#39;, &#39;Book of Love (1990)&#39;, &#39;Book of Shadows: Blair Witch 2 (2000)&#39;, &#39;Boomerang (1992)&#39;, &#39;Boondock Saints II: All Saints Day, The (2009)&#39;, &#39;Boondock Saints, The (2000)&#39;, &#39;Boot, Das (Boat, The) (1981)&#39;, &#39;Bootleggers (1961)&#39;, &#39;Booty Call (1997)&#39;, &#39;Borat: Cultural Learnings of America for Make Benefit Glorious Nation of Kazakhstan (2006)&#39;, &#39;Born Free (1966)&#39;, &#39;Born Yesterday (1950)&#39;, &#39;Born in East L.A. (1987)&#39;, &#39;Born into Brothels (2004)&#39;, &#39;Born on the Fourth of July (1989)&#39;, &#39;Born to Be Wild (1995)&#39;, &#39;Born to Kill (1947)&#39;, &#39;Borrowers, The (1997)&#39;, &#39;Boss of It All, The (Direktøren for det hele) (2006)&#39;, &#39;Bossa Nova (2000)&#39;, &#39;Bottle Rocket (1996)&#39;, &#39;Boudu Saved From Drowning (Boudu sauvé des eaux) (1932)&#39;, &#39;Bounce (2000)&#39;, &#39;Bound (1996)&#39;, &#39;Boundaries (2018)&#39;, &#39;Bounty Hunter, The (2010)&#39;, &#39;Bounty, The (1984)&#39;, &#39;Bourne Identity, The (1988)&#39;, &#39;Bourne Identity, The (2002)&#39;, &#39;Bourne Legacy, The (2012)&#39;, &#39;Bourne Supremacy, The (2004)&#39;, &#39;Bourne Ultimatum, The (2007)&#39;, &#39;Bow, The (Hwal) (2005)&#39;, &#39;Bowfinger (1999)&#39;, &#39;Bowling for Columbine (2002)&#39;, &#39;Boxcar Bertha (1972)&#39;, &#39;Boxer, The (1997)&#39;, &#39;Boxing Helena (1993)&#39;, &#39;Boy (2010)&#39;, &#39;Boy A (2007)&#39;, &#39;Boy Eats Girl (2005)&#39;, &#39;Boy Meets Girl (1984)&#39;, &#39;Boy Meets Girl (2015)&#39;, &#39;Boy Who Could Fly, The (1986)&#39;, &#39;Boy and His Dog, A (1975)&#39;, &#39;Boy in the Striped Pajamas, The (Boy in the Striped Pyjamas, The) (2008)&#39;, &#39;Boyhood (2014)&#39;, &#39;Boys (1996)&#39;, &#34;Boys Don&#39;t Cry (1999)&#34;, &#39;Boys Life (1995)&#39;, &#39;Boys Town (1938)&#39;, &#39;Boys and Girls (2000)&#39;, &#39;Boys from Brazil, The (1978)&#39;, &#39;Boys of Baraka, The (2005)&#39;, &#39;Boys of St. Vincent, The (1992)&#39;, &#39;Boys on the Side (1995)&#39;, &#39;Boys, The (1998)&#39;, &#39;Boyz N the Hood (1991)&#39;, &#39;Braddock: Missing in Action III (1988)&#39;, &#39;Brady Bunch Movie, The (1995)&#39;, &#39;Brain Smasher... A Love Story (Bouncer and the Lady, The) (1993)&#39;, &#34;Brain That Wouldn&#39;t Die, The (1962)&#34;, &#39;Brainstorm (1983)&#39;, &#39;Brainstorm (2001)&#39;, &#39;Brake (2012)&#39;, &#39;Branded to Kill (Koroshi no rakuin) (1967)&#39;, &#39;Brandon Teena Story, The (1998)&#39;, &#39;Brass Teapot, The (2012)&#39;, &#39;Brassed Off (1996)&#39;, &#39;Brave (2012)&#39;, &#39;Brave Little Toaster, The (1987)&#39;, &#39;Brave New World (1998)&#39;, &#39;Brave One, The (2007)&#39;, &#39;Braveheart (1995)&#39;, &#39;Brazil (1985)&#39;, &#39;Breach (2007)&#39;, &#39;Bread and Chocolate (Pane e cioccolata) (1973)&#39;, &#39;Bread and Roses (2000)&#39;, &#39;Bread and Tulips (Pane e tulipani) (2000)&#39;, &#39;Break-Up, The (2006)&#39;, &#39;Breakdown (1997)&#39;, &#39;Breaker Morant (1980)&#39;, &#39;Breakfast Club, The (1985)&#39;, &#34;Breakfast at Tiffany&#39;s (1961)&#34;, &#39;Breakfast on Pluto (2005)&#39;, &#39;Breakfast with Scot (2007)&#39;, &#34;Breakin&#39; (1984)&#34;, &#34;Breakin&#39; 2: Electric Boogaloo (1984)&#34;, &#34;Breakin&#39; All the Rules (2004)&#34;, &#39;Breaking Away (1979)&#39;, &#39;Breaking the Waves (1996)&#39;, &#39;Breathe (2014)&#39;, &#39;Breathless (1983)&#39;, &#39;Breathless (À bout de souffle) (1960)&#39;, &#39;Breed, The (2006)&#39;, &#34;Brewster&#39;s Millions (1985)&#34;, &#39;Brice Man, The (Brice de Nice) (2005)&#39;, &#39;Brick (2005)&#39;, &#39;Brick Mansions (2014)&#39;, &#39;Bride &amp; Prejudice (2004)&#39;, &#39;Bride Wars (2009)&#39;, &#34;Bride of Chucky (Child&#39;s Play 4) (1998)&#34;, &#39;Bride of Frankenstein, The (Bride of Frankenstein) (1935)&#39;, &#39;Bride of Re-Animator (1990)&#39;, &#39;Bridesmaids (2011)&#39;, &#39;Bridge Too Far, A (1977)&#39;, &#39;Bridge at Remagen, The (1969)&#39;, &#39;Bridge of Spies (2015)&#39;, &#39;Bridge on the River Kwai, The (1957)&#39;, &#39;Bridge to Terabithia (2007)&#39;, &#39;Bridge, The (2006)&#39;, &#39;Bridges of Madison County, The (1995)&#39;, &#34;Bridget Jones&#39;s Baby (2016)&#34;, &#34;Bridget Jones&#39;s Diary (2001)&#34;, &#39;Bridget Jones: The Edge of Reason (2004)&#39;, &#39;Brief Encounter (1946)&#39;, &#39;Brief History of Time, A (1991)&#39;, &#39;Brigadoon (1954)&#39;, &#39;Brigham City (2001)&#39;, &#39;Bright (2017)&#39;, &#39;Bright Lights, Big City (1988)&#39;, &#39;Bright Star (2009)&#39;, &#39;Brighton Beach Memoirs (1986)&#39;, &#39;Bring It On (2000)&#39;, &#39;Bring It On Again (2004)&#39;, &#39;Bring It On: All or Nothing (2006)&#39;, &#39;Bring It On: Fight to the Finish (2009)&#39;, &#39;Bring It On: In It To Win It (2007)&#39;, &#39;Bring Me the Head of Alfredo Garcia (1974)&#39;, &#39;Bringing Down the House (2003)&#39;, &#39;Bringing Out the Dead (1999)&#39;, &#39;Bringing Up Baby (1938)&#39;, &#39;Broadcast News (1987)&#39;, &#39;Broadway Danny Rose (1984)&#39;, &#39;Broadway Melody, The (1929)&#39;, &#39;Brokeback Mountain (2005)&#39;, &#39;Brokedown Palace (1999)&#39;, &#39;Broken (2012)&#39;, &#39;Broken Arrow (1950)&#39;, &#39;Broken Arrow (1996)&#39;, &#39;Broken English (1996)&#39;, &#39;Broken Flowers (2005)&#39;, &#39;Broken Hearts Club, The (2000)&#39;, &#39;Broken Wings (Knafayim Shvurot) (2002)&#39;, &#39;Bronco Billy (1980)&#39;, &#39;Bronson (2009)&#39;, &#39;Bronx Tale, A (1993)&#39;, &#39;Brood, The (1979)&#39;, &#39;Brooklyn (2015)&#39;, &#39;Bros Before Hos (2013)&#39;, &#39;Brother (2000)&#39;, &#39;Brother (Brat) (1997)&#39;, &#39;Brother 2 (Brat 2) (2000)&#39;, &#39;Brother Bear (2003)&#39;, &#39;Brother from Another Planet, The (1984)&#39;, &#34;Brother&#39;s Keeper (1992)&#34;, &#39;Brotherhood of the Wolf (Pacte des loups, Le) (2001)&#39;, &#39;Brothers (2009)&#39;, &#39;Brothers (Brødre) (2004)&#39;, &#39;Brothers Bloom, The (2008)&#39;, &#39;Brothers Grimm, The (2005)&#39;, &#39;Brothers McMullen, The (1995)&#39;, &#39;Brothers Solomon, The (2007)&#39;, &#39;Brown Bunny, The (2003)&#39;, &#39;Brown Sugar (2002)&#39;, &#39;Browning Version, The (1994)&#39;, &#39;Brubaker (1980)&#39;, &#39;Bruce Almighty (2003)&#39;, &#34;Bruce Lee: A Warrior&#39;s Journey (2000)&#34;, &#39;Brüno (Bruno) (2009)&#39;, &#39;Bubba Ho-tep (2002)&#39;, &#39;Bubble Boy (2001)&#39;, &#39;Buck Rogers in the 25th Century (1979)&#39;, &#39;Bucket List, The (2007)&#39;, &#39;Bucket Of Blood, A (1959)&#39;, &#39;Buddy (1997)&#39;, &#39;Buddy Boy (1999)&#39;, &#39;Buddy Holly Story, The (1978)&#39;, &#39;Buena Vista Social Club (1999)&#39;, &#34;Buffalo &#39;66 (a.k.a. Buffalo 66) (1998)&#34;, &#39;Buffalo Soldiers (2001)&#39;, &#39;Buffy the Vampire Slayer (1992)&#39;, &#39;Bug (2007)&#39;, &#34;Bug&#39;s Life, A (1998)&#34;, &#39;Bugsy (1991)&#39;, &#39;Bugsy Malone (1976)&#39;, &#39;Bull Durham (1988)&#39;, &#39;Bullet in the Head (1990)&#39;, &#39;Bullet to the Head (2012)&#39;, &#39;Bulletproof (1996)&#39;, &#39;Bulletproof Monk (2003)&#39;, &#39;Bullets Over Broadway (1994)&#39;, &#39;Bullitt (1968)&#39;, &#39;Bully (2001)&#39;, &#39;Bully (2011)&#39;, &#39;Bulworth (1998)&#39;, &#39;Bungo Stray Dogs: Dead Apple (2018)&#39;, &#39;Bunny (1998)&#39;, &#39;Bunny Lake Is Missing (1965)&#39;, &#39;Bunraku (2010)&#39;, &#39;Burden of Dreams (1982)&#39;, &#39;Burglar (1987)&#39;, &#39;Buried (2010)&#39;, &#39;Burke and Hare (2010)&#39;, &#39;Burlesque (2010)&#39;, &#39;Burma VJ: Reporting from a Closed Country (Burma VJ: Reporter i et lukket land) (2008)&#39;, &#39;Burn After Reading (2008)&#39;, &#39;Burnt (2015)&#39;, &#39;Burnt Offerings (1976)&#39;, &#39;Burnt by the Sun (Utomlyonnye solntsem) (1994)&#39;, &#39;Burrowers, The (2008)&#39;, &#39;Bus 174 (Ônibus 174) (2002)&#39;, &#34;Bush&#39;s Brain (2004)&#34;, &#39;Bushwhacked (1995)&#39;, &#39;Business of Strangers, The (2001)&#39;, &#34;Buster&#39;s Mal Heart (2017)&#34;, &#34;Bustin&#39; Loose (1981)&#34;, &#34;But I&#39;m a Cheerleader (1999)&#34;, &#39;Butch Cassidy and the Sundance Kid (1969)&#39;, &#39;Butcher Boy, The (1997)&#39;, &#34;Butcher&#39;s Wife, The (1991)&#34;, &#39;Butterfield 8 (1960)&#39;, &#39;Butterflies Are Free (1972)&#39;, &#39;Butterfly (La lengua de las mariposas) (1999)&#39;, &#39;Buzzard (2015)&#39;, &#39;By the Gun (2014)&#39;, &#39;By the Law (1926)&#39;, &#39;Byzantium (2012)&#39;, &#39;C.R.A.Z.Y. (2005)&#39;, &#39;CB4 - The Movie (1993)&#39;, &#39;CHiPS (2017)&#39;, &#39;CQ (2001)&#39;, &#39;Cabaret (1972)&#39;, &#39;Cabin Boy (1994)&#39;, &#39;Cabin Fever (2002)&#39;, &#39;Cabin in the Woods, The (2012)&#39;, &#39;Cabinet of Dr. Caligari, The (Cabinet des Dr. Caligari., Das) (1920)&#39;, &#39;Cable Guy, The (1996)&#39;, &#39;Caddyshack (1980)&#39;, &#39;Caddyshack II (1988)&#39;, &#39;Cadillac Man (1990)&#39;, &#39;Café Society (2016)&#39;, &#39;Cage Dive (2017)&#39;, &#39;Cage aux Folles, La (1978)&#39;, &#39;Caine Mutiny, The (1954)&#39;, &#39;Cake (2014)&#39;, &#39;Calamity Jane (1953)&#39;, &#39;Calcium Kid, The (2004)&#39;, &#39;Calendar Girl (1993)&#39;, &#39;Calendar Girls (2003)&#39;, &#39;California Split (1974)&#39;, &#39;Caligula (1979)&#39;, &#39;Call Me by Your Name (2017)&#39;, &#39;Call, The (2013)&#39;, &#39;Callas Forever (2002)&#39;, &#39;Calvary (2014)&#39;, &#39;Camelot (1967)&#39;, &#39;Camera Buff (Amator) (1979)&#39;, &#39;Camille (1936)&#39;, &#39;Camille Claudel (1988)&#39;, &#39;Camino (2016)&#39;, &#39;Camp (2003)&#39;, &#39;Camp Nowhere (1994)&#39;, &#39;Camp Rock (2008)&#39;, &#39;Camp X-Ray (2014)&#39;, &#39;Campaign, The (2012)&#39;, &#39;Campfire Tales (1997)&#39;, &#39;Campus Man (1987)&#39;, &#34;Can&#39;t Buy Me Love (1987)&#34;, &#34;Can&#39;t Hardly Wait (1998)&#34;, &#34;Can&#39;t Stop the Music (1980)&#34;, &#39;Canadian Bacon (1995)&#39;, &#39;Candidate, The (1972)&#39;, &#39;Candleshoe (1977)&#39;, &#39;Candy (2006)&#39;, &#39;Candyman (1992)&#39;, &#39;Candyman 3: Day of the Dead (1999)&#39;, &#39;Candyman: Farewell to the Flesh (1995)&#39;, &#39;Cannibal Holocaust (1980)&#39;, &#39;Cannonball Run II (1984)&#39;, &#39;Cannonball Run, The (1981)&#39;, &#39;Cape Fear (1962)&#39;, &#39;Cape Fear (1991)&#39;, &#39;Capote (2005)&#39;, &#39;Captain America (1979)&#39;, &#39;Captain America (1990)&#39;, &#39;Captain America II: Death Too Soon (1979)&#39;, &#39;Captain America: Civil War (2016)&#39;, &#39;Captain America: The First Avenger (2011)&#39;, &#39;Captain America: The Winter Soldier (2014)&#39;, &#39;Captain Blood (1935)&#39;, &#34;Captain Corelli&#39;s Mandolin (2001)&#34;, &#39;Captain Fantastic (2016)&#39;, &#39;Captain Horatio Hornblower R.N. (1951)&#39;, &#39;Captain Newman, M.D. (1963)&#39;, &#39;Captain Phillips (2013)&#39;, &#39;Captain Ron (1992)&#39;, &#39;Captain Underpants: The First Epic Movie (2017)&#39;, &#39;Captains Courageous (1937)&#39;, &#39;Captive, The (2014)&#39;, &#39;Capturing the Friedmans (2003)&#39;, &#39;Car Wash (1976)&#39;, &#39;Carabineers, The (Carabiniers, Les) (1963)&#39;, &#39;Carandiru (2003)&#39;, &#39;Care Bears Movie II: A New Generation (1986)&#39;, &#39;Care Bears Movie, The (1985)&#39;, &#39;Career Girls (1997)&#39;, &#39;Career Opportunities (1991)&#39;, &#39;Careful What You Wish For (2015)&#39;, &#39;Cargo (2009)&#39;, &#34;Carlito&#39;s Way (1993)&#34;, &#39;Carnage (2011)&#39;, &#39;Carnal Knowledge (1971)&#39;, &#39;Carnival Magic (1981)&#39;, &#39;Carnival of Souls (1962)&#39;, &#39;Carnosaur (1993)&#39;, &#39;Carnosaur 2 (1995)&#39;, &#39;Carnosaur 3: Primal Species (1996)&#39;, &#39;Carol (2015)&#39;, &#39;Carpool (1996)&#39;, &#39;Carrie (1976)&#39;, &#39;Carrie (2002)&#39;, &#39;Carrie (2013)&#39;, &#34;Carry On Don&#39;t Lose Your Head (1966)&#34;, &#39;Carry on Cabby (1963)&#39;, &#39;Carry on Cruising (1962)&#39;, &#39;Cars (2006)&#39;, &#39;Cars 2 (2011)&#39;, &#39;Cars 3 (2017)&#39;, &#39;Casablanca (1942)&#39;, &#39;Casanova (2005)&#39;, &#39;Case 39 (2009)&#39;, &#39;Cashback (2004)&#39;, &#39;Cashback (2006)&#39;, &#39;Casino (1995)&#39;, &#39;Casino Jack (2010)&#39;, &#39;Casino Royale (1967)&#39;, &#39;Casino Royale (2006)&#39;, &#39;Casper (1995)&#39;, &#39;Casper Meets Wendy (1998)&#39;, &#34;Cassandra&#39;s Dream (2007)&#34;, &#39;Casshern (2004)&#39;, &#39;Cast Away (2000)&#39;, &#39;Castaway on the Moon (Kimssi pyoryugi) (2009)&#39;, &#39;Castle Freak (1995)&#39;, &#39;Castle, The (1997)&#39;, &#39;Casualties of War (1989)&#39;, &#39;Cat Ballou (1965)&#39;, &#39;Cat People (1942)&#39;, &#39;Cat People (1982)&#39;, &#39;Cat Returns, The (Neko no ongaeshi) (2002)&#39;, &#39;Cat Soup (Nekojiru-so) (2001)&#39;, &#39;Cat and the Canary, The (1927)&#39;, &#39;Cat from Outer Space, The (1978)&#39;, &#39;Cat in the Hat, The (2003)&#39;, &#34;Cat o&#39; Nine Tails, The (Gatto a nove code, Il) (1971)&#34;, &#39;Cat on a Hot Tin Roof (1958)&#39;, &#34;Cat&#39;s Eye (1985)&#34;, &#34;Cat&#39;s Meow, The (2002)&#34;, &#39;Catch .44 (2011)&#39;, &#39;Catch Me If You Can (2002)&#39;, &#39;Catch That Kid (2004)&#39;, &#39;Catch a Fire (2006)&#39;, &#39;Catch and Release (2006)&#39;, &#39;Catch-22 (1970)&#39;, &#39;Catfish (2010)&#39;, &#39;Cats &amp; Dogs (2001)&#39;, &#39;Cats (1998)&#39;, &#34;Cats Don&#39;t Dance (1997)&#34;, &#39;Catwalk (1996)&#39;, &#39;Catwoman (2004)&#39;, &#39;Cave of Forgotten Dreams (2010)&#39;, &#39;Cave, The (2005)&#39;, &#39;Caveman (1981)&#39;, &#34;Caveman&#39;s Valentine, The (2001)&#34;, &#39;Cecil B. DeMented (2000)&#39;, &#39;Cedar Rapids (2011)&#39;, &#39;Celebration, The (Festen) (1998)&#39;, &#39;Celebrity (1998)&#39;, &#39;Cell 211 (Celda 211) (2009)&#39;, &#39;Cell, The (2000)&#39;, &#39;Cellular (2004)&#39;, &#39;Celluloid Closet, The (1995)&#39;, &#39;Celtic Pride (1996)&#39;, &#39;Cement Garden, The (1993)&#39;, &#39;Cemetery Junction (2010)&#39;, &#39;Cemetery Man (Dellamorte Dellamore) (1994)&#39;, &#39;Center Stage (2000)&#39;, &#39;Center of the World, The (2001)&#39;, &#39;Central Intelligence (2016)&#39;, &#39;Central Station (Central do Brasil) (1998)&#39;, &#39;Century of the Self, The (2002)&#39;, &#39;Cercle Rouge, Le (Red Circle, The) (1970)&#39;, &#39;Certified Copy (Copie conforme) (2010)&#39;, &#39;Cesar Chavez (2014)&#39;, &#39;Chain Reaction (1996)&#39;, &#39;Chain of Fools (2000)&#39;, &#39;Chairman of the Board (1998)&#39;, &#39;Chamber, The (1996)&#39;, &#39;Champ, The (1979)&#39;, &#39;Chances Are (1989)&#39;, &#39;Change-Up, The (2011)&#39;, &#39;Changeling (2008)&#39;, &#39;Changeling, The (1980)&#39;, &#39;Changing Lanes (2002)&#39;, &#39;Chaos (2005)&#39;, &#39;Chaos Theory (2007)&#39;, &#39;Chapayev (1934)&#39;, &#39;Chaplin (1992)&#39;, &#39;Chappie (2015)&#39;, &#39;Character (Karakter) (1997)&#39;, &#39;Charade (1963)&#39;, &#39;Chariots of Fire (1981)&#39;, &#39;Charley Varrick (1973)&#39;, &#39;Charlie Bartlett (2007)&#39;, &#39;Charlie Brown Christmas, A (1965)&#39;, &#39;Charlie Countryman (2013)&#39;, &#34;Charlie Wilson&#39;s War (2007)&#34;, &#39;Charlie and the Chocolate Factory (2005)&#39;, &#34;Charlie&#39;s Angels (2000)&#34;, &#34;Charlie&#39;s Angels: Full Throttle (2003)&#34;, &#39;Charlie, the Lonesome Cougar (1967)&#39;, &#39;Charlotte Gray (2001)&#39;, &#34;Charlotte&#39;s Web (1973)&#34;, &#34;Charlotte&#39;s Web (2006)&#34;, &#39;Charly (1968)&#39;, &#39;Chase, The (1994)&#39;, &#39;Chaser, The (Chugyeogja) (2008)&#39;, &#39;Chasers (1994)&#39;, &#39;Chasing Amy (1997)&#39;, &#39;Chasing Liberty (2004)&#39;, &#39;Chasing Papi (a.k.a. Papi Chulo) (2003)&#39;, &#34;Chasuke&#39;s Journey (2015)&#34;, &#39;Che: Part One (2008)&#39;, &#39;Che: Part Two (2008)&#39;, &#39;Cheap Detective, The (1978)&#39;, &#39;Cheaper by the Dozen (1950)&#39;, &#39;Cheaper by the Dozen (2003)&#39;, &#39;Cheaper by the Dozen 2 (2005)&#39;, &#39;Cheburashka (1971)&#39;, &#34;Cheech &amp; Chong&#39;s The Corsican Brothers (1984)&#34;, &#34;Cheech and Chong&#39;s Up in Smoke (1978)&#34;, &#39;Chef (2014)&#39;, &#39;Cherish (2002)&#39;, &#39;Cherry 2000 (1987)&#39;, &#39;Cherrybomb (2009)&#39;, &#39;Chi-Raq (2015)&#39;, &#39;Chicago (2002)&#39;, &#39;Chicken Little (2005)&#39;, &#39;Chicken Run (2000)&#39;, &#34;Child&#39;s Play (1988)&#34;, &#34;Child&#39;s Play 2 (1990)&#34;, &#34;Child&#39;s Play 3 (1991)&#34;, &#34;Child, The (L&#39;enfant) (2005)&#34;, &#39;Children Are Watching Us, The (Bambini ci guardano, I) (1944)&#39;, &#39;Children of Dune (2003)&#39;, &#39;Children of Heaven, The (Bacheha-Ye Aseman) (1997)&#39;, &#39;Children of Huang Shi, The (2008)&#39;, &#39;Children of Men (2006)&#39;, &#39;Children of a Lesser God (1986)&#39;, &#39;Children of the Corn (1984)&#39;, &#39;Children of the Corn II: The Final Sacrifice (1993)&#39;, &#39;Children of the Corn III (1994)&#39;, &#39;Children of the Corn IV: The Gathering (1996)&#39;, &#39;Children of the Damned (1963)&#39;, &#39;Children of the Night (1991)&#39;, &#39;Children of the Revolution (1996)&#39;, &#34;Children&#39;s Hour, The (1961)&#34;, &#39;Children, The (2008)&#39;, &#39;Chill Factor (1999)&#39;, &#39;China Blue (2005)&#39;, &#39;China Syndrome, The (1979)&#39;, &#39;Chinatown (1974)&#39;, &#39;Chinese Box (1997)&#39;, &#39;Chinese Ghost Story, A (Sinnui yauwan) (1987)&#39;, &#39;Chinese Puzzle (Casse-tête chinois) (2013)&#39;, &#39;Chitty Chitty Bang Bang (1968)&#39;, &#39;Chocolat (1988)&#39;, &#39;Chocolat (2000)&#39;, &#39;Choke (2008)&#39;, &#39;Chopper (2000)&#39;, &#39;Chopper Chicks in Zombietown (1989)&#39;, &#39;Chopping Mall (a.k.a. Killbots) (1986)&#39;, &#39;Chorus Line, A (1985)&#39;, &#39;Chorus, The (Choristes, Les) (2004)&#39;, &#39;Chouchou (2003)&#39;, &#39;Chris Rock: Bigger &amp; Blacker (1999)&#39;, &#39;Christiane F. (a.k.a. We Children from Bahnhof Zoo) (Christiane F. - Wir Kinder vom Bahnhof Zoo) (1981)&#39;, &#39;Christina P: Mother Inferior (2017)&#39;, &#39;Christine (1983)&#39;, &#39;Christmas Carol, A (1938)&#39;, &#39;Christmas Carol, A (1977)&#39;, &#39;Christmas Carol, A (1999)&#39;, &#39;Christmas Carol, A (2009)&#39;, &#39;Christmas Carol, A (Scrooge) (1951)&#39;, &#39;Christmas Story, A (1983)&#39;, &#34;Christmas Vacation (National Lampoon&#39;s Christmas Vacation) (1989)&#34;, &#39;Christmas in Connecticut (1992)&#39;, &#39;Christmas with the Kranks (2004)&#39;, &#39;Christopher Columbus: The Discovery (1992)&#39;, &#39;Chronicle (2012)&#39;, &#39;Chronicles of Narnia: Prince Caspian, The (2008)&#39;, &#39;Chronicles of Narnia: The Lion, the Witch and the Wardrobe, The (2005)&#39;, &#39;Chronicles of Narnia: The Voyage of the Dawn Treader, The (2010)&#39;, &#39;Chronicles of Riddick, The (2004)&#39;, &#39;Chuck &amp; Buck (2000)&#39;, &#39;Chump at Oxford, A (1940)&#39;, &#39;Chungking Express (Chung Hing sam lam) (1994)&#39;, &#39;Ciao, Professore! (Io speriamo che me la cavo) (1992)&#39;, &#39;Cider House Rules, The (1999)&#39;, &#39;Cigarette Burns (2005)&#39;, &#39;Cimarron (1931)&#39;, &#39;Cincinnati Kid, The (1965)&#39;, &#39;Cinderella (1950)&#39;, &#39;Cinderella (1997)&#39;, &#39;Cinderella (2015)&#39;, &#39;Cinderella Man (2005)&#39;, &#39;Cinderella Story, A (2004)&#39;, &#39;Cinema Paradiso (Nuovo cinema Paradiso) (1989)&#39;, &#39;Cinemania (2002)&#39;, &#39;Circle of Friends (1995)&#39;, &#39;Circle, The (Dayereh) (2000)&#39;, &#39;Circus (2000)&#39;, &#39;Circus, The (1928)&#39;, &#34;Cirque du Freak: The Vampire&#39;s Assistant (2009)&#34;, &#39;Citizen Kane (1941)&#39;, &#39;Citizen Ruth (1996)&#39;, &#39;Citizen X (1995)&#39;, &#39;Citizenfour (2014)&#39;, &#39;City Hall (1996)&#39;, &#39;City Heat (1984)&#39;, &#39;City Hunter (Sing si lip yan) (1993)&#39;, &#39;City Island (2009)&#39;, &#39;City Lights (1931)&#39;, &#39;City Slickers (1991)&#39;, &#34;City Slickers II: The Legend of Curly&#39;s Gold (1994)&#34;, &#39;City by the Sea (2002)&#39;, &#39;City of Angels (1998)&#39;, &#39;City of Ember (2008)&#39;, &#39;City of God (Cidade de Deus) (2002)&#39;, &#39;City of Lost Children, The (Cité des enfants perdus, La) (1995)&#39;, &#39;City of Lost Souls, The (Hyôryuu-gai) (2000)&#39;, &#39;City of Men (Cidade dos Homens) (2007)&#39;, &#39;City of Women, The (Città delle donne, La) (1980)&#39;, &#39;City of the Living Dead (a.k.a. Gates of Hell, The) (Paura nella città dei morti viventi) (1980)&#39;, &#39;Civil Action, A (1998)&#39;, &#39;Civil War, The (1990)&#39;, &#39;Claim, The (2000)&#39;, &#34;Claire&#39;s Knee (Genou de Claire, Le) (1970)&#34;, &#39;Clan of the Cave Bear, The (1986)&#39;, &#34;Clara&#39;s Heart (1988)&#34;, &#39;Clash of the Titans (1981)&#39;, &#39;Clash of the Titans (2010)&#39;, &#39;Class (1983)&#39;, &#39;Class Act (1992)&#39;, &#39;Class Action (1991)&#39;, &#39;Class Reunion (1982)&#39;, &#34;Class of Nuke &#39;Em High (1986)&#34;, &#39;Class, The (Entre les murs) (2008)&#39;, &#39;Class, The (Klass) (2007)&#39;, &#39;Clay Pigeons (1998)&#39;, &#39;Claymation Christmas Celebration, A (1987)&#39;, &#39;Clean Slate (1994)&#39;, &#39;Cleanskin (2012)&#39;, &#39;Clear and Present Danger (1994)&#39;, &#39;Clerks (1994)&#39;, &#39;Clerks II (2006)&#39;, &#39;Click (2006)&#39;, &#39;Client, The (1994)&#39;, &#39;Cliffhanger (1993)&#39;, &#39;Cloak &amp; Dagger (1984)&#39;, &#39;Clockers (1995)&#39;, &#39;Clockstoppers (2002)&#39;, &#39;Clockwatchers (1997)&#39;, &#39;Clockwise (1986)&#39;, &#39;Clockwork Orange, A (1971)&#39;, &#39;Clonus Horror, The (1979)&#39;, &#39;Close Encounters of the Third Kind (1977)&#39;, &#39;Close Range (2015)&#39;, &#39;Closely Watched Trains (Ostre sledované vlaky) (1966)&#39;, &#39;Closer (2004)&#39;, &#39;Closer You Get, The (2000)&#39;, &#39;Closer to the Moon (2013)&#39;, &#39;Closet, The (Placard, Le) (2001)&#39;, &#39;Cloud Atlas (2012)&#39;, &#39;Cloudburst (2011)&#39;, &#39;Cloudy with a Chance of Meatballs (2009)&#39;, &#39;Cloudy with a Chance of Meatballs 2 (2013)&#39;, &#39;Cloverfield (2008)&#39;, &#39;Clown (2014)&#39;, &#39;Club Dread (2004)&#39;, &#39;Club Paradise (1986)&#39;, &#39;Clue (1985)&#39;, &#39;Clueless (1995)&#39;, &#39;Coach Carter (2005)&#39;, &#34;Coal Miner&#39;s Daughter (1980)&#34;, &#39;Cobb (1994)&#39;, &#39;Cobra (1986)&#39;, &#39;Cocaine Cowboys (2006)&#39;, &#39;Cocktail (1988)&#39;, &#39;Coco (2017)&#39;, &#39;Coco Before Chanel (Coco avant Chanel) (2009)&#39;, &#39;Cocoanuts, The (1929)&#39;, &#39;Cocoon (1985)&#39;, &#39;Cocoon: The Return (1988)&#39;, &#39;Code 46 (2003)&#39;, &#39;Codependent Lesbian Space Alien Seeks Same (2011)&#39;, &#39;Coffee Town (2013)&#39;, &#39;Coffee and Cigarettes (2003)&#39;, &#39;Coffy (1973)&#39;, &#39;Coherence (2013)&#39;, &#39;Cold Comes the Night (2013)&#39;, &#39;Cold Comfort Farm (1995)&#39;, &#39;Cold Creek Manor (2003)&#39;, &#39;Cold Fever (Á köldum klaka) (1995)&#39;, &#39;Cold Fish (Tsumetai nettaigyo) (2010)&#39;, &#39;Cold Mountain (2003)&#39;, &#39;Cold in July (2014)&#39;, &#39;Collateral (2004)&#39;, &#39;Collateral Damage (2002)&#39;, &#39;Collector, The (1965)&#39;, &#39;Collector, The (2009)&#39;, &#39;Collector, The (La collectionneuse) (1967)&#39;, &#39;College (1927)&#39;, &#39;College Road Trip (2008)&#39;, &#39;Collision Course (1989)&#39;, &#39;Colombiana (2011)&#39;, &#39;Colonel Chabert, Le (1994)&#39;, &#39;Colonia (2016)&#39;, &#39;Color Purple, The (1985)&#39;, &#39;Color of Money, The (1986)&#39;, &#39;Color of Night (1994)&#39;, &#39;Colors (1988)&#39;, &#39;Colourful (Karafuru) (2010)&#39;, &#39;Coma (1978)&#39;, &#39;Comandante (2003)&#39;, &#39;Come Back, Little Sheba (1952)&#39;, &#39;Come See the Paradise (1990)&#39;, &#39;Come and See (Idi i smotri) (1985)&#39;, &#39;Comebacks, The (2007)&#39;, &#39;Comedian (2002)&#39;, &#39;Comedy Central Roast of David Hasselhoff (2010)&#39;, &#39;Comedy Central Roast of James Franco (2013)&#39;, &#39;Comedy of the Strict Regime (1993)&#39;, &#39;Comic Book Villains (2002)&#39;, &#39;Comic Book: The Movie (2004)&#39;, &#34;Comic-Con Episode IV: A Fan&#39;s Hope (2011)&#34;, &#39;Coming Home (1978)&#39;, &#39;Coming to America (1988)&#39;, &#39;Commando (1985)&#39;, &#39;Comme un chef (2012)&#39;, &#39;Commitments, The (1991)&#39;, &#39;Common Thread, A (a.k.a. Sequins) (Brodeuses) (2004)&#39;, &#39;Communion (1989)&#39;, &#39;Company Man (2000)&#39;, &#39;Company Men, The (2010)&#39;, &#39;Company of Wolves, The (1984)&#39;, &#39;Company, The (2003)&#39;, &#39;Competition, The (1980)&#39;, &#39;Computer Wore Tennis Shoes, The (1969)&#39;, &#39;Con Air (1997)&#39;, &#39;Conan the Barbarian (1982)&#39;, &#39;Conan the Barbarian (2011)&#39;, &#39;Conan the Destroyer (1984)&#39;, &#39;Conception (2011)&#39;, &#39;Concert, Le (2009)&#39;, &#39;Concussion (2015)&#39;, &#39;Condorman (1981)&#39;, &#39;Coneheads (1993)&#39;, &#39;Confessions (Kokuhaku) (2010)&#39;, &#39;Confessions of a Dangerous Mind (2002)&#39;, &#39;Confessions of a Shopaholic (2009)&#39;, &#39;Confessions of a Teenage Drama Queen (2004)&#39;, &#39;Confidence (2003)&#39;, &#39;Confidential Report (1955)&#39;, &#39;Conformist, The (Conformista, Il) (1970)&#39;, &#39;Congo (1995)&#39;, &#39;Conjuring, The (2013)&#39;, &#39;Connections (1978)&#39;, &#39;Conquest of the Planet of the Apes (1972)&#39;, &#39;Conspiracy Theory (1997)&#39;, &#39;Constant Gardener, The (2005)&#39;, &#39;Constantine (2005)&#39;, &#39;Contact (1997)&#39;, &#39;Contact High (2009)&#39;, &#39;Contagion (2011)&#39;, &#39;Contempt (Mépris, Le) (1963)&#39;, &#39;Contender, The (2000)&#39;, &#39;Continental Divide (1981)&#39;, &#39;Contraband (2012)&#39;, &#39;Control (2007)&#39;, &#39;Control (Kontroll) (2003)&#39;, &#39;Control Room (2004)&#39;, &#39;Conversation, The (1974)&#39;, &#39;Conversations with Other Women (2005)&#39;, &#39;Cook the Thief His Wife &amp; Her Lover, The (1989)&#39;, &#34;Cookie&#39;s Fortune (1999)&#34;, &#39;Cool Hand Luke (1967)&#39;, &#39;Cool Runnings (1993)&#39;, &#39;Cool World (1992)&#39;, &#39;Cool, Dry Place, A (1998)&#39;, &#39;Cooler, The (2003)&#39;, &#39;Cooties (2015)&#39;, &#39;Cop (1988)&#39;, &#39;Cop Car (2015)&#39;, &#39;Cop Land (1997)&#39;, &#39;Cop Out (2010)&#39;, &#39;Cop and ½ (1993)&#39;, &#39;Copenhagen (2014)&#39;, &#39;Cops and Robbersons (1994)&#39;, &#39;Copycat (1995)&#39;, &#39;Coraline (2009)&#39;, &#39;Corbeau, Le (Raven, The) (1943)&#39;, &#39;Core, The (2003)&#39;, &#39;Coriolanus (2011)&#39;, &#39;Corky Romano (2001)&#39;, &#39;Corner Gas: The Movie (2014)&#39;, &#39;Cornered! (2009)&#39;, &#39;Corporation, The (2003)&#39;, &#39;Corpse Bride (2005)&#39;, &#39;Corrina, Corrina (1994)&#39;, &#39;Corruptor, The (1999)&#39;, &#39;Cosmic Scrat-tastrophe (2015)&#39;, &#39;Cosmos&#39;, &#39;Cottage, The (2008)&#39;, &#39;Cotton Club, The (1984)&#39;, &#39;Couch Trip, The (1988)&#39;, &#39;Counselor, The (2013)&#39;, &#39;Counterfeiters, The (Die Fälscher) (2007)&#39;, &#39;Country Girl, The (1954)&#39;, &#39;Couples Retreat (2009)&#39;, &#39;Courage Under Fire (1996)&#39;, &#39;Courier (1987)&#39;, &#39;Court Jester, The (1956)&#39;, &#39;Cousins (1989)&#39;, &#39;Cove, The (2009)&#39;, &#39;Covenant, The (2006)&#39;, &#39;Cowboy Bebop: The Movie (Cowboy Bebop: Tengoku no Tobira) (2001)&#39;, &#39;Cowboy Way, The (1994)&#39;, &#39;Cowboys &amp; Aliens (2011)&#39;, &#39;Coyote Ugly (2000)&#39;, &#39;Cradle 2 the Grave (2003)&#39;, &#39;Cradle Will Rock (1999)&#39;, &#39;Craft, The (1996)&#39;, &#34;Craig Ferguson: I&#39;m Here To Help (2013)&#34;, &#39;Craig Ferguson: Tickle Fight (2017)&#39;, &#39;Cranes Are Flying, The (Letyat zhuravli) (1957)&#39;, &#39;Crank (2006)&#39;, &#39;Crank: High Voltage (2009)&#39;, &#39;Crash (1996)&#39;, &#39;Crash (2004)&#39;, &#39;Crazies, The (2010)&#39;, &#39;Crazies, The (a.k.a. Code Name: Trixie) (1973)&#39;, &#39;Crazy Heart (2009)&#39;, &#39;Crazy in Alabama (1999)&#39;, &#39;Crazy, Stupid, Love. (2011)&#39;, &#39;Crazy/Beautiful (2001)&#39;, &#39;Creature Comforts (1989)&#39;, &#39;Creature from the Black Lagoon, The (1954)&#39;, &#39;Creed (2015)&#39;, &#39;Creep (2004)&#39;, &#39;Creep (2014)&#39;, &#39;Creep 2 (2017)&#39;, &#39;Creepshow (1982)&#39;, &#39;Creepshow 2 (1987)&#39;, &#39;Crew, The (2000)&#39;, &#39;Cries and Whispers (Viskningar och rop) (1972)&#39;, &#39;Crime Busters (1977)&#39;, &#39;Crime Story (Zhong an zu) (1993)&#39;, &#39;Crime and Punishment in Suburbia (2000)&#39;, &#39;Crime of Father Amaro, The (Crimen del padre Amaro, El) (2002)&#39;, &#39;Crimes and Misdemeanors (1989)&#39;, &#39;Crimes of the Heart (1986)&#39;, &#39;Crimewave (1985)&#39;, &#39;Crimson Gold (Talaye sorgh) (2003)&#39;, &#39;Crimson Peak (2015)&#39;, &#39;Crimson Pirate, The (1952)&#39;, &#34;Crimson Rivers 2: Angels of the Apocalypse (Rivières pourpres II - Les anges de l&#39;apocalypse, Les) (2004)&#34;, &#39;Crimson Rivers, The (Rivières pourpres, Les) (2000)&#39;, &#39;Crimson Tide (1995)&#39;, &#39;Crippled Avengers (Can que) (Return of the 5 Deadly Venoms) (1981)&#39;, &#39;Critical Care (1997)&#39;, &#39;Critters (1986)&#39;, &#39;Crocodile Dundee (1986)&#39;, &#39;Crocodile Dundee II (1988)&#39;, &#39;Crocodile Dundee in Los Angeles (2001)&#39;, &#39;Crocodile Hunter: Collision Course, The (2002)&#39;, &#39;Croods, The (2013)&#39;, &#39;Crooklyn (1994)&#39;, &#39;Crossfire (1947)&#39;, &#39;Crossing Delancey (1988)&#39;, &#39;Crossing Guard, The (1995)&#39;, &#39;Crossing Over (2009)&#39;, &#39;Crossroads (1986)&#39;, &#39;Crossroads (2002)&#39;, &#39;Crouching Tiger, Hidden Dragon (Wo hu cang long) (2000)&#39;, &#39;Croupier (1998)&#39;, &#39;Crow, The (1994)&#39;, &#39;Crow, The: Wicked Prayer (2005)&#39;, &#39;Crow: City of Angels, The (1996)&#39;, &#39;Crow: Salvation, The (2000)&#39;, &#39;Crows Zero (Kurôzu zero) (2007)&#39;, &#39;Crucible, The (1996)&#39;, &#39;Cruel Intentions (1999)&#39;, &#39;Cruel Romance, A (Zhestokij Romans) (1984)&#39;, &#39;Cruise, The (1998)&#39;, &#39;Crumb (1994)&#39;, &#39;Crush (2001)&#39;, &#39;Crush, The (1993)&#39;, &#39;Cry in the Dark, A (1988)&#39;, &#39;Cry, the Beloved Country (1995)&#39;, &#39;Cry-Baby (1990)&#39;, &#39;Cry_Wolf (a.k.a. Cry Wolf) (2005)&#39;, &#39;Crying Game, The (1992)&#39;, &#39;Crystal Fairy &amp; the Magical Cactus and 2012 (2013)&#39;, &#39;Cube (1997)&#39;, &#39;Cube 2: Hypercube (2002)&#39;, &#39;Cube Zero (2004)&#39;, &#39;Cuckoo, The (Kukushka) (2002)&#39;, &#39;Cujo (1983)&#39;, &#39;Culture High, The (2014)&#39;, &#39;Cup, The (Phörpa) (1999)&#39;, &#39;Cure (1997)&#39;, &#39;Cure, The (1995)&#39;, &#39;Curious Case of Benjamin Button, The (2008)&#39;, &#39;Curious George (2006)&#39;, &#39;Curly Sue (1991)&#39;, &#39;Curse of Frankenstein, The (1957)&#39;, &#39;Curse of the Golden Flower (Man cheng jin dai huang jin jia) (2006)&#39;, &#39;Curse of the Jade Scorpion, The (2001)&#39;, &#39;Cursed (2005)&#39;, &#34;Cutter&#39;s Way (1981)&#34;, &#39;Cutthroat Island (1995)&#39;, &#39;Cutting Edge, The (1992)&#39;, &#39;Cyborg (1989)&#39;, &#39;Cyrano de Bergerac (1990)&#39;, &#39;Cyrus (2010)&#39;, &#39;D.A.R.Y.L. (1985)&#39;, &#39;D.E.B.S. (2004)&#39;, &#39;D.O.A. (1950)&#39;, &#39;D.O.A. (1988)&#39;, &#39;D2: The Mighty Ducks (1994)&#39;, &#39;D3: The Mighty Ducks (1996)&#39;, &#39;DC Super Hero Girls: Hero of the Year (2016)&#39;, &#39;DOA: Dead or Alive (2006)&#39;, &#39;Da Sweet Blood of Jesus (2014)&#39;, &#39;Da Vinci Code, The (2006)&#39;, &#39;Da geht noch was! (2013)&#39;, &#39;Dad (1989)&#39;, &#34;Dad&#39;s Army (1971)&#34;, &#34;Dad&#39;s Army (2016)&#34;, &#39;Daddy Day Camp (2007)&#39;, &#39;Daddy Day Care (2003)&#39;, &#39;Daddy Long Legs (1919)&#39;, &#34;Daddy&#39;s Home (2015)&#34;, &#34;Daddy&#39;s Home 2 (2017)&#34;, &#34;Daddy, I&#39;m A Zombie (2012)&#34;, &#34;Daffy Duck&#39;s Quackbusters (1988)&#34;, &#39;Dallas Buyers Club (2013)&#39;, &#39;Dam Busters, The (1955)&#39;, &#39;Damage (Fatale) (1992)&#39;, &#39;Damien: Omen II (1978)&#39;, &#39;Damn Yankees! (1958)&#39;, &#39;Damned United, The (2009)&#39;, &#39;Damned, The (La Caduta degli dei) (1969)&#39;, &#39;Dampfnudelblues (2013)&#39;, &#39;Damsels in Distress (2011)&#39;, &#39;Dan in Real Life (2007)&#39;, &#39;Dana Carvey: Straight White Male, 60 (2016)&#39;, &#39;Dance of Reality, The (Danza de la realidad, La) (2013)&#39;, &#39;Dance of the Dead (2008)&#39;, &#39;Dancemaker (1998)&#39;, &#39;Dancer Upstairs, The (2002)&#39;, &#39;Dancer in the Dark (2000)&#39;, &#39;Dancer, Texas Pop. 81 (1998)&#39;, &#39;Dances with Wolves (1990)&#39;, &#39;Dane Cook: Troublemaker (2014)&#39;, &#39;Dangerous Beauty (1998)&#39;, &#39;Dangerous Ground (1997)&#39;, &#39;Dangerous Liaisons (1988)&#39;, &#39;Dangerous Lives of Altar Boys, The (2002)&#39;, &#39;Dangerous Method, A (2011)&#39;, &#39;Dangerous Minds (1995)&#39;, &#39;Danny Collins (2015)&#39;, &#39;Danny Deckchair (2003)&#39;, &#34;Dante&#39;s Inferno: An Animated Epic (2010)&#34;, &#34;Dante&#39;s Peak (1997)&#34;, &#34;Darby O&#39;Gill and the Little People (1959)&#34;, &#39;Daredevil (2003)&#39;, &#39;Daria: Is It College Yet? (2002)&#39;, &#39;Daria: Is It Fall Yet? (2000)&#39;, &#39;Darjeeling Limited, The (2007)&#39;, &#39;Dark Blue (2003)&#39;, &#39;Dark Blue World (Tmavomodrý svet) (2001)&#39;, &#39;Dark City (1998)&#39;, &#39;Dark Crystal, The (1982)&#39;, &#39;Dark Days (2000)&#39;, &#39;Dark Half, The (1993)&#39;, &#39;Dark Knight Rises, The (2012)&#39;, &#39;Dark Knight, The (2008)&#39;, &#39;Dark Passage (1947)&#39;, &#39;Dark Places (2015)&#39;, &#39;Dark Portals: The Chronicles of Vidocq (Vidocq) (2001)&#39;, &#39;Dark Shadows (2012)&#39;, &#39;Dark Skies (2013)&#39;, &#39;Dark Star (1974)&#39;, &#39;Dark Tide (2012)&#39;, &#39;Dark Victory (1939)&#39;, &#39;Dark Water (2005)&#39;, &#39;Dark Water (Honogurai mizu no soko kara) (2002)&#39;, &#39;Darkest Hour (2017)&#39;, &#39;Darkest Hour, The (2011)&#39;, &#39;Darkman (1990)&#39;, &#39;Darkman II: Return of Durant, The (1995)&#39;, &#39;Darkness (2002)&#39;, &#39;Darkness Falls (2003)&#39;, &#39;Darkon (2006)&#39;, &#34;Darwin&#39;s Nightmare (2004)&#34;, &#39;Das Experiment (Experiment, The) (2001)&#39;, &#39;Date Movie (2006)&#39;, &#39;Date Night (2010)&#39;, &#39;Date and Switch (2014)&#39;, &#39;Date with an Angel (1987)&#39;, &#39;Daughters of the Dust (1991)&#39;, &#39;Dave (1993)&#39;, &#39;Dave Chappelle: Deep in the Heart of Texas (2017)&#39;, &#39;Dave Chappelle: Equanimity (2017)&#39;, &#34;Dave Chappelle: For What it&#39;s Worth (2004)&#34;, &#34;Dave Chappelle: Killin&#39; Them Softly (2000)&#34;, &#39;Dave Chappelle: The Age of Spin (2017)&#39;, &#39;Dave Chappelle: The Bird Revelation (2017)&#39;, &#39;David Cross: Making America Great Again (2016)&#39;, &#39;Davy Crockett, King of the Wild Frontier (1955)&#39;, &#39;Dawn of the Dead (1978)&#39;, &#39;Dawn of the Dead (2004)&#39;, &#39;Dawn of the Planet of the Apes (2014)&#39;, &#39;Day &amp; Night (2010)&#39;, &#39;Day After Tomorrow, The (2004)&#39;, &#39;Day After, The (1983)&#39;, &#39;Day Watch (Dnevnoy dozor) (2006)&#39;, &#39;Day at the Races, A (1937)&#39;, &#39;Day for Night (La Nuit Américaine) (1973)&#39;, &#39;Day of Wrath (Vredens dag) (1943)&#39;, &#39;Day of the Beast, The (Día de la Bestia, El) (1995)&#39;, &#39;Day of the Dead (1985)&#39;, &#39;Day of the Doctor, The (2013)&#39;, &#39;Day of the Jackal, The (1973)&#39;, &#39;Day of the Locust, The (1975)&#39;, &#39;Day the Earth Stood Still, The (1951)&#39;, &#39;Day the Earth Stood Still, The (2008)&#39;, &#39;Daybreakers (2010)&#39;, &#39;Daylight (1996)&#39;, &#39;Days of Being Wild (A Fei jingjyuhn) (1990)&#39;, &#39;Days of Heaven (1978)&#39;, &#39;Days of Thunder (1990)&#39;, &#39;Days of Wine and Roses (1962)&#39;, &#39;Daytrippers, The (1996)&#39;, &#39;Dazed and Confused (1993)&#39;, &#39;De platte jungle (1978)&#39;, &#39;De-Lovely (2004)&#39;, &#39;Dead Again (1991)&#39;, &#39;Dead Alive (Braindead) (1992)&#39;, &#39;Dead Calm (1989)&#39;, &#39;Dead End (2003)&#39;, &#39;Dead Fury (2008)&#39;, &#39;Dead Hate the Living!, The (2000)&#39;, &#39;Dead Heat (1988)&#39;, &#39;Dead Like Me: Life After Death (2009)&#39;, &#39;Dead Man (1995)&#39;, &#39;Dead Man Walking (1995)&#39;, &#39;Dead Man on Campus (1998)&#39;, &#34;Dead Man&#39;s Shoes (2004)&#34;, &#39;Dead Meat (2004)&#39;, &#34;Dead Men Don&#39;t Wear Plaid (1982)&#34;, &#39;Dead Poets Society (1989)&#39;, &#39;Dead Pool, The (1988)&#39;, &#39;Dead Presidents (1995)&#39;, &#39;Dead Ringers (1988)&#39;, &#39;Dead Silence (2007)&#39;, &#39;Dead Snow (Død snø) (2009)&#39;, &#39;Dead Snow 2: Red vs. Dead (2014) &#39;, &#39;Dead Zone, The (1983)&#39;, &#39;Dead of Night (1945)&#39;, &#39;Dead or Alive 2: Tôbôsha (2000)&#39;, &#39;Dead or Alive: Final (2002)&#39;, &#39;Dead or Alive: Hanzaisha (1999)&#39;, &#39;DeadHeads (2011)&#39;, &#39;Deadfall (2012)&#39;, &#39;Deadly Friend (1986)&#39;, &#39;Deadly Outlaw: Rekka (a.k.a. Violent Fire) (Jitsuroku Andô Noboru kyôdô-den: Rekka) (2002)&#39;, &#39;Deadpool (2016)&#39;, &#39;Deadpool 2 (2018)&#39;, &#39;Deadtime Stories (1987)&#39;, &#39;Deal, The (2008)&#39;, &#39;Dear Diary (Caro Diario) (1994)&#39;, &#39;Dear Frankie (2004)&#39;, &#39;Dear God (1996)&#39;, &#39;Dear John (2010)&#39;, &#39;Dear Wendy (2005)&#39;, &#39;Dear Zachary: A Letter to a Son About His Father (2008)&#39;, &#39;Death Becomes Her (1992)&#39;, &#39;Death Note (2017)&#39;, &#39;Death Note Rewrite: Genshisuru Kami (2007)&#39;, &#39;Death Note: Desu nôto (2006–2007)&#39;, &#39;Death Proof (2007)&#39;, &#39;Death Race (2008)&#39;, &#39;Death Race 2 (2010)&#39;, &#39;Death Race 2000 (1975)&#39;, &#39;Death Sentence (2007)&#39;, &#39;Death Smiles on a Murderer (1973)&#39;, &#39;Death Wish (1974)&#39;, &#39;Death Wish (2018)&#39;, &#39;Death Wish 2 (1982)&#39;, &#39;Death Wish 3 (1985)&#39;, &#39;Death Wish 4: The Crackdown (1987)&#39;, &#39;Death Wish 5: The Face of Death (1994)&#39;, &#39;Death and the Maiden (1994)&#39;, &#39;Death at a Funeral (2007)&#39;, &#39;Death at a Funeral (2010)&#39;, &#39;Death in Venice (Morte a Venezia) (1971)&#39;, &#39;Death of a Cyclist (Muerte de un ciclista) (1955)&#39;, &#39;Death of a President (2006)&#39;, &#39;Death of a Salesman (1985)&#39;, &#39;Death on the Nile (1978)&#39;, &#39;Death to Smoochy (2002)&#39;, &#39;Deathgasm (2015)&#39;, &#39;Deaths of Ian Stone, The (2007)&#39;, &#39;Deathtrap (1982)&#39;, &#39;Debt, The (2011)&#39;, &#39;Decade Under the Influence, A (2003)&#39;, &#39;Decalogue, The (Dekalog) (1989)&#39;, &#39;Deceiver (1997)&#39;, &#39;December Boys (2007)&#39;, &#39;Decline of Western Civilization Part II: The Metal Years, The (1988)&#39;, &#39;Decline of Western Civilization, The (1981)&#39;, &#34;Decline of the American Empire, The (Déclin de l&#39;empire américain, Le) (1986)&#34;, &#39;Deconstructing Harry (1997)&#39;, &#39;Decoy Bride, The (2011)&#39;, &#39;Dedication (2007)&#39;, &#39;Deep Blue Sea (1999)&#39;, &#39;Deep End of the Ocean, The (1999)&#39;, &#39;Deep End, The (2001)&#39;, &#39;Deep Impact (1998)&#39;, &#39;Deep Red (Profondo rosso) (1975)&#39;, &#39;Deep Rising (1998)&#39;, &#39;Deepwater Horizon (2016)&#39;, &#39;Deer Hunter, The (1978)&#39;, &#39;Defending Your Life (1991)&#39;, &#39;Defiance (2008)&#39;, &#39;Defiant Ones, The (1958)&#39;, &#39;Definitely, Maybe (2008)&#39;, &#39;Delhi Belly (2011)&#39;, &#39;Delicatessen (1991)&#39;, &#39;Delirious (1991)&#39;, &#39;Delirium (2014)&#39;, &#39;Deliver Us from Evil (2006)&#39;, &#39;Deliver Us from Evil (2014)&#39;, &#39;Deliverance (1972)&#39;, &#39;Delivery Man (2013)&#39;, &#39;Delta Force 2 (Delta Force 2: The Colombian Connection) (1990)&#39;, &#39;Delta Force, The (1986)&#39;, &#39;Delta of Venus (1995)&#39;, &#39;Demolition (2016)&#39;, &#39;Demolition Man (1993)&#39;, &#39;Den, The (2013)&#39;, &#39;Denis Leary: No Cure for Cancer (1993)&#39;, &#39;Denise Calls Up (1995)&#39;, &#39;Dennis the Menace (1993)&#39;, &#39;Dennis the Menace Christmas, A (2007)&#39;, &#39;Dentist, The (1996)&#39;, &#39;Departed, The (2006)&#39;, &#39;Departures (Okuribito) (2008)&#39;, &#39;Der Herr Karl (1961)&#39;, &#39;Derailed (2002)&#39;, &#39;Derailed (2005)&#39;, &#39;Dernier Combat, Le (Last Battle, The) (1983)&#39;, &#39;Dersu Uzala (1975)&#39;, &#39;Descendants, The (2011)&#39;, &#39;Descent (2007)&#39;, &#39;Descent, The (2005)&#39;, &#39;Desert Hearts (1985)&#39;, &#39;Desierto (2016)&#39;, &#39;Designing Woman (1957)&#39;, &#39;Desk Set (1957)&#39;, &#39;Desperado (1995)&#39;, &#39;Desperate Living (1977)&#39;, &#39;Desperate Measures (1998)&#39;, &#39;Desperately Seeking Susan (1985)&#39;, &#39;Despicable Me (2010)&#39;, &#39;Despicable Me 2 (2013)&#39;, &#39;Despicable Me 3 (2017)&#39;, &#39;Despite the Falling Snow (2016)&#39;, &#39;Destiny Turns on the Radio (1995)&#39;, &#39;Destry Rides Again (1939)&#39;, &#39;Detachment (2011)&#39;, &#39;Detour (1945)&#39;, &#39;Detroit Rock City (1999)&#39;, &#39;Deuce Bigalow: European Gigolo (2005)&#39;, &#39;Deuce Bigalow: Male Gigolo (1999)&#39;, &#39;Deuces Wild (2002)&#39;, &#39;Devil (2010)&#39;, &#39;Devil Dog: The Hound of Hell (1978)&#39;, &#39;Devil Wears Prada, The (2006)&#39;, &#39;Devil and Daniel Johnston, The (2005)&#39;, &#39;Devil and Max Devlin, The (1981)&#39;, &#39;Devil in a Blue Dress (1995)&#39;, &#34;Devil&#39;s Backbone, The (Espinazo del diablo, El) (2001)&#34;, &#34;Devil&#39;s Own, The (1997)&#34;, &#34;Devil&#39;s Playground (2002)&#34;, &#34;Devil&#39;s Rejects, The (2005)&#34;, &#39;Devils on the Doorstep (Guizi lai le) (2000)&#39;, &#39;DiG! (2004)&#39;, &#39;Diabolique (1996)&#39;, &#39;Diabolique (Les diaboliques) (1955)&#39;, &#39;Dial M for Murder (1954)&#39;, &#39;Diamond Arm, The (Brilliantovaya ruka) (1968)&#39;, &#39;Diamonds Are Forever (1971)&#39;, &#34;Diary of a Chambermaid (Journal d&#39;une femme de chambre, Le) (1964)&#34;, &#34;Diary of a Country Priest (Journal d&#39;un curé de campagne) (1951)&#34;, &#39;Diary of a Wimpy Kid (2010)&#39;, &#39;Diary of a Wimpy Kid: Dog Days (2012)&#39;, &#39;Diary of a Wimpy Kid: Rodrick Rules (2011)&#39;, &#39;Diary of the Dead (2007)&#39;, &#39;Dick (1999)&#39;, &#39;Dick Tracy (1990)&#39;, &#39;Dickie Roberts: Former Child Star (2003)&#39;, &#39;Dictator, The (2012)&#39;, &#39;Did You Hear About the Morgans? (2009)&#39;, &#39;Die Another Day (2002)&#39;, &#39;Die Frauen von Ravensbrück (2005)&#39;, &#39;Die Hard (1988)&#39;, &#39;Die Hard 2 (1990)&#39;, &#39;Die Hard: With a Vengeance (1995)&#39;, &#39;Digging Up the Marrow (2014)&#39;, &#39;Digimon: The Movie (2000)&#39;, &#39;Dil To Pagal Hai (1997)&#39;, &#39;Dilemma, The (2011)&#39;, &#39;Diner (1982)&#39;, &#39;Dinner Game, The (Dîner de cons, Le) (1998)&#39;, &#39;Dinner Rush (2000)&#39;, &#39;Dinner at Eight (1933)&#39;, &#39;Dinner for Schmucks (2010)&#39;, &#39;Dinosaur (2000)&#39;, &#39;Dinotopia (2002)&#39;, &#39;Dirty 30 (2016)&#39;, &#39;Dirty Dancing (1987)&#39;, &#39;Dirty Dancing: Havana Nights (2004)&#39;, &#39;Dirty Dozen, The (1967)&#39;, &#39;Dirty Grandpa (2016)&#39;, &#39;Dirty Harry (1971)&#39;, &#39;Dirty Pretty Things (2002)&#39;, &#39;Dirty Rotten Scoundrels (1988)&#39;, &#39;Dirty Work (1998)&#39;, &#39;Disaster Movie (2008)&#39;, &#39;Disclosure (1994)&#39;, &#39;Disconnect (2012)&#39;, &#39;Discreet Charm of the Bourgeoisie, The (Charme discret de la bourgeoisie, Le) (1972)&#39;, &#39;Disgrace (2008)&#39;, &#39;Dish, The (2001)&#39;, &#39;Disorganized Crime (1989)&#39;, &#39;Distinguished Gentleman, The (1992)&#39;, &#39;District 13 (Banlieue 13) (2004)&#39;, &#39;District 13: Ultimatum (Banlieue 13 - Ultimatum) (2009)&#39;, &#39;District 9 (2009)&#39;, &#39;Disturbia (2007)&#39;, &#39;Disturbing Behavior (1998)&#39;, &#39;Diva (1981)&#39;, &#39;Divergent (2014)&#39;, &#39;Divided We Fall (Musíme si pomáhat) (2000)&#39;, &#39;Divine Secrets of the Ya-Ya Sisterhood (2002)&#39;, &#39;Diving Bell and the Butterfly, The (Scaphandre et le papillon, Le) (2007)&#39;, &#39;Divo, Il (2008)&#39;, &#34;Divorce - Italian Style (Divorzio all&#39;italiana) (1961)&#34;, &#39;Divorce, Le (2003)&#39;, &#39;Divorcee, The (1930)&#39;, &#39;Django Unchained (2012)&#39;, &#39;Do You Remember Dolly Bell? (Sjecas li se, Dolly Bell) (1981)&#39;, &#39;Do the Right Thing (1989)&#39;, &#39;Dobermann (1997)&#39;, &#39;Doc Hollywood (1991)&#39;, &#39;Doctor Dolittle (1967)&#39;, &#39;Doctor Strange (2016)&#39;, &#39;Doctor Who: A Christmas Carol (2010)&#39;, &#39;Doctor Who: Last Christmas (2014)&#39;, &#39;Doctor Who: Planet of the Dead (2009)&#39;, &#39;Doctor Who: The Doctor, the Widow and the Wardrobe (2011)&#39;, &#39;Doctor Who: The Husbands of River Song (2015)&#39;, &#39;Doctor Who: The Next Doctor (2008)&#39;, &#39;Doctor Who: The Runaway Bride (2007)&#39;, &#39;Doctor Who: The Time of the Doctor (2013)&#39;, &#39;Doctor Who: The Waters of Mars (2009)&#39;, &#39;Doctor Who: Voyage Of The Damned (2007)&#39;, &#39;Doctor Zhivago (1965)&#39;, &#39;Doctor, The (1991)&#39;, &#39;Dodgeball: A True Underdog Story (2004)&#39;, &#39;Dog Day Afternoon (1975)&#39;, &#39;Dog Days (Hundstage) (2001)&#39;, &#39;Dog Park (1998)&#39;, &#39;Dog Soldiers (2002)&#39;, &#39;Dogfight (1991)&#39;, &#39;Dogma (1999)&#39;, &#39;Dogman (2018)&#39;, &#39;Dogtown and Z-Boyz (2001)&#39;, &#39;Dogville (2003)&#39;, &#39;Dolce Vita, La (1960)&#39;, &#39;Dolls (1987)&#39;, &#39;Dolls (2002)&#39;, &#39;Dolores Claiborne (1995)&#39;, &#39;Domestic Disturbance (2001)&#39;, &#39;Dominick and Eugene (1988)&#39;, &#39;Dominion: Prequel to the Exorcist (2005)&#39;, &#39;Domino (2005)&#39;, &#39;Don Camillo in Moscow (1965)&#39;, &#39;Don Jon (2013)&#39;, &#39;Don Juan DeMarco (1995)&#39;, &#34;Don&#39;t Be Afraid of the Dark (2010)&#34;, &#34;Don&#39;t Be a Menace to South Central While Drinking Your Juice in the Hood (1996)&#34;, &#34;Don&#39;t Breathe (2016)&#34;, &#34;Don&#39;t Look Now (1973)&#34;, &#34;Don&#39;t Look Now: We&#39;re Being Shot At (La grande vadrouille) (1966)&#34;, &#34;Don&#39;t Move (Non ti muovere) (2004)&#34;, &#34;Don&#39;t Say a Word (2001)&#34;, &#34;Don&#39;t Tell Mom the Babysitter&#39;s Dead (1991)&#34;, &#39;Donnie Brasco (1997)&#39;, &#39;Donnie Darko (2001)&#39;, &#39;Doom (2005)&#39;, &#39;Doom Generation, The (1995)&#39;, &#39;Doomsday (2008)&#39;, &#39;Door in the Floor, The (2004)&#39;, &#39;Doors, The (1991)&#39;, &#39;Dope (2015)&#39;, &#39;Dorian Gray (2009)&#39;, &#39;Double Dragon (1994)&#39;, &#39;Double Happiness (1994)&#39;, &#39;Double Impact (1991)&#39;, &#39;Double Indemnity (1944)&#39;, &#39;Double Jeopardy (1999)&#39;, &#39;Double Life of Veronique, The (Double Vie de Véronique, La) (1991)&#39;, &#39;Double Life, A (1947)&#39;, &#39;Double Take (2001)&#39;, &#39;Double Team (1997)&#39;, &#39;Double Trouble (1992)&#39;, &#39;Double, The (2011)&#39;, &#39;Double, The (2013)&#39;, &#39;Doubt (2008)&#39;, &#34;Doug&#39;s 1st Movie (1999)&#34;, &#39;Down Argentine Way (1940)&#39;, &#39;Down Periscope (1996)&#39;, &#39;Down Terrace (2009)&#39;, &#39;Down and Out in Beverly Hills (1986)&#39;, &#39;Down by Law (1986)&#39;, &#39;Down in the Valley (2005)&#39;, &#39;Down to Earth (2001)&#39;, &#39;Down to You (2000)&#39;, &#39;Down to the Bone (2004)&#39;, &#39;Down with Love (2003)&#39;, &#39;Downfall (Untergang, Der) (2004)&#39;, &#39;Dr. Dolittle (1998)&#39;, &#39;Dr. Dolittle 2 (2001)&#39;, &#39;Dr. Giggles (1992)&#39;, &#39;Dr. Goldfoot and the Bikini Machine (1965)&#39;, &#34;Dr. Horrible&#39;s Sing-Along Blog (2008)&#34;, &#39;Dr. Jekyll and Mr. Hyde (1931)&#39;, &#39;Dr. Jekyll and Mr. Hyde (1941)&#39;, &#39;Dr. No (1962)&#39;, &#39;Dr. Phibes Rises Again (1972)&#39;, &#34;Dr. Seuss&#39; The Lorax (2012)&#34;, &#39;Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb (1964)&#39;, &#39;Dr. T and the Women (2000)&#39;, &#34;Dr. Terror&#39;s House of Horrors (1965)&#34;, &#39;Dracula (1931)&#39;, &#39;Dracula (1979)&#39;, &#34;Dracula (Bram Stoker&#39;s Dracula) (1992)&#34;, &#39;Dracula 2000 (2000)&#39;, &#39;Dracula Untold (2014)&#39;, &#39;Dracula: Dead and Loving It (1995)&#39;, &#39;Drag Me to Hell (2009)&#39;, &#39;Dragnet (1987)&#39;, &#34;Dragon Ball GT: A Hero&#39;s Legacy (Doragon bôru GT: Gokû gaiden! Yûki no akashi wa sû-shin-chû) (1997)&#34;, &#39;Dragon Ball Z Gaiden: The Plot to Destroy the Saiyans (1993)&#39;, &#39;Dragon Ball Z the Movie: The Tree of Might (Doragon bôru Z 3: Chikyû marugoto chô kessen) (1990)&#39;, &#34;Dragon Ball Z the Movie: The World&#39;s Strongest (a.k.a. Dragon Ball Z: The Strongest Guy in The World) (Doragon bôru Z: Kono yo de ichiban tsuyoi yatsu) (1990)&#34;, &#39;Dragon Ball Z: Bardock - The Father of Goku (Doragon bôru Z: Tatta hitori no saishuu kessen - Furiiza ni itonda Z senshi Kakarotto no chichi) (1990)&#39;, &#39;Dragon Ball Z: Battle of Gods (2013)&#39;, &#39;Dragon Ball Z: Bio-Broly (Doragon bôru Z 11: Sûpâ senshi gekiha! Katsu no wa ore da) (1994)&#39;, &#39;Dragon Ball Z: Bojack Unbound (Doragon bôru Z 9: Ginga girigiri!! Butchigiri no sugoi yatsu) (1993)&#39;, &#39;Dragon Ball Z: Broly - The Legendary Super Saiyan (Doragon bôru Z 8: Moetsukiro!! Nessen retsusen-chô gekisen) (1993)&#39;, &#39;Dragon Ball Z: Broly Second Coming (Doragon bôru Z 10: Kiken na futari! Sûpâ senshi wa nemurenai) (1994)&#39;, &#34;Dragon Ball Z: Cooler&#39;s Revenge (Doragon bôru Z 5: Tobikkiri no saikyô tai saikyô) (1991)&#34;, &#39;Dragon Ball Z: Dead Zone (Doragon bôru Z 1: Ora no Gohan wo kaese) (1989)&#39;, &#39;Dragon Ball Z: Resurrection of F (2015)&#39;, &#39;Dragon Ball Z: Super Android 13! (Doragon bôru Z 7: Kyokugen batoru!! San dai sûpâ saiyajin) (1992)&#39;, &#39;Dragon Ball Z: The History of Trunks (Doragon bôru Z: Zetsubô e no hankô!! Nokosareta chô senshi - Gohan to Torankusu) (1993)&#39;, &#39;Dragon Ball Z: The Return of Cooler (Doragon bôru Z 6: Gekitotsu! Hyakuoku pawâ no senshi) (1992)&#39;, &#39;Dragon Ball: Mystical Adventure (Doragon bôru: Makafushigi dai bôken) (1988)&#39;, &#34;Dragon Ball: Sleeping Princess in Devil&#39;s Castle (Doragon bôru: Majinjô no nemuri hime) (1987)&#34;, &#39;Dragon Ball: The Curse Of The Blood Rubies (Doragon bôru: Shenron no densetsu) (1986)&#39;, &#39;Dragon Ball: The Path to Power (Doragon bôru: Saikyô e no michi) (1996)&#39;, &#39;Dragon Blade (2015)&#39;, &#39;Dragon Lord (a.k.a. Dragon Strike) (Long Xiao Ye) (1982)&#39;, &#39;Dragon Seed (1944)&#39;, &#39;Dragon ball Z 04: Lord Slug (1991)&#39;, &#39;Dragon: The Bruce Lee Story (1993)&#39;, &#39;Dragonfly (2002)&#39;, &#39;Dragonheart (1996)&#39;, &#39;Dragonheart 2: A New Beginning (2000)&#39;, &#34;Dragonheart 3: The Sorcerer&#39;s Curse (2015)&#34;, &#39;Dragons: Gift of the Night Fury (2011)&#39;, &#39;Dragonslayer (1981)&#39;, &#39;Drained (O cheiro do Ralo) (2006)&#39;, &#34;Draughtsman&#39;s Contract, The (1982)&#34;, &#39;Dream Team, The (1989)&#39;, &#39;Dream a Little Dream (1989)&#39;, &#39;Dream for an Insomniac (1996)&#39;, &#39;Dream of Light (a.k.a. Quince Tree Sun, The) (Sol del membrillo, El) (1992)&#39;, &#39;Dreamcatcher (2003)&#39;, &#39;Dreamer: Inspired by a True Story (2005)&#39;, &#39;Dreamers, The (2003)&#39;, &#39;Dreamgirls (2006)&#39;, &#39;Dreamlife of Angels, The (Vie rêvée des anges, La) (1998)&#39;, &#39;Dreamscape (1984)&#39;, &#39;Dredd (2012)&#39;, &#39;Dressed to Kill (1980)&#39;, &#39;Dresser, The (1983)&#39;, &#39;Drift (2013)&#39;, &#39;Drillbit Taylor (2008)&#39;, &#39;Drinking Buddies (2013)&#39;, &#39;Drive (2011)&#39;, &#39;Drive Angry (2011)&#39;, &#39;Drive Hard (2014)&#39;, &#39;Drive Me Crazy (1999)&#39;, &#39;Driven (2001)&#39;, &#39;Driving Miss Daisy (1989)&#39;, &#39;Drop Dead Fred (1991)&#39;, &#39;Drop Dead Gorgeous (1999)&#39;, &#39;Drop Zone (1994)&#39;, &#39;Drowning Mona (2000)&#39;, &#39;Drowning by Numbers (1988)&#39;, &#39;Drugstore Cowboy (1989)&#39;, &#39;Drumline (2002)&#39;, &#39;Drunken Master (Jui kuen) (1978)&#39;, &#39;Drunks (1995)&#39;, &#39;Duchess, The (2008)&#39;, &#39;Duck Amuck (1953)&#39;, &#39;Duck Soup (1933)&#39;, &#39;Duck, You Sucker (1971)&#39;, &#34;Dude, Where&#39;s My Car? (2000)&#34;, &#39;Dudley Do-Right (1999)&#39;, &#39;Due Date (2010)&#39;, &#39;Duel (1971)&#39;, &#39;Duel in the Sun (1946)&#39;, &#39;Duellists, The (1977)&#39;, &#39;Duets (2000)&#39;, &#39;Dukes of Hazzard, The (2005)&#39;, &#39;Duma (2005)&#39;, &#39;Dumb &amp; Dumber (Dumb and Dumber) (1994)&#39;, &#39;Dumb and Dumber To (2014)&#39;, &#39;Dumb and Dumberer: When Harry Met Lloyd (2003)&#39;, &#39;Dumbo (1941)&#39;, &#39;Dummy (2002)&#39;, &#39;Dune (1984)&#39;, &#39;Dune (2000)&#39;, &#39;Dungeons &amp; Dragons (2000)&#39;, &#39;Dunkirk (2017)&#39;, &#39;Dunston Checks In (1996)&#39;, &#39;Duplex (2003)&#39;, &#39;Duplicity (2009)&#39;, &#39;Dust (2001)&#39;, &#39;Dutch (1991)&#39;, &#39;Dying Young (1991)&#39;, &#39;Dying of the Light (2014)&#39;, &#39;Dylan Moran: Monster (2004)&#39;, &#39;Déjà Vu (1997)&#39;, &#39;Déjà Vu (Deja Vu) (2006)&#39;, &#39;E.T. the Extra-Terrestrial (1982)&#39;, &#39;EDtv (1999)&#39;, &#39;Eagle Eye (2008)&#39;, &#39;Eagle Has Landed, The (1976)&#39;, &#39;Eagle, The (2011)&#39;, &#39;Ear, The (Ucho) (1970)&#39;, &#39;Earth (2007)&#39;, &#39;Earth Girls Are Easy (1988)&#39;, &#39;Earth vs. the Flying Saucers (1956)&#39;, &#39;Earthlings (2006)&#39;, &#39;Earthquake (1974)&#39;, &#39;Earthsea (Legend of Earthsea) (2004)&#39;, &#39;East is East (1999)&#39;, &#39;East of Eden (1955)&#39;, &#39;East-West (Est-ouest) (1999)&#39;, &#39;Easter Parade (1948)&#39;, &#39;Eastern Promises (2007)&#39;, &#39;Easy A (2010)&#39;, &#39;Easy Money (1983)&#39;, &#39;Easy Rider (1969)&#39;, &#39;Eat Drink Man Woman (Yin shi nan nu) (1994)&#39;, &#39;Eat Pray Love (2010)&#39;, &#39;Eaten Alive (1977)&#39;, &#39;Echelon Conspiracy (2009)&#39;, &#39;Ed (1996)&#39;, &#39;Ed Wood (1994)&#39;, &#39;Eddie (1996)&#39;, &#39;Eddie Izzard: Dress to Kill (1999)&#39;, &#39;Eddie Izzard: Glorious (1997)&#39;, &#39;Eddie Murphy Delirious (1983)&#39;, &#39;Eddie Murphy Raw (1987)&#39;, &#39;Eddie and the Cruisers (1983)&#39;, &#39;Eddie the Eagle (2016)&#39;, &#39;Eden (2014)&#39;, &#39;Eden Lake (2008)&#39;, &#39;Edge of Heaven, The (Auf der anderen Seite) (2007)&#39;, &#39;Edge of Love, The (2008)&#39;, &#39;Edge of Tomorrow (2014)&#39;, &#39;Edge, The (1997)&#39;, &#39;Edmond (2005)&#39;, &#39;Educating Rita (1983)&#39;, &#39;Education, An (2009)&#39;, &#39;Edukators, The (Die Fetten Jahre sind vorbei) (2004)&#39;, &#39;Edward Scissorhands (1990)&#39;, &#39;Eichmann (2007)&#39;, &#39;Eight Below (2006)&#39;, &#34;Eight Crazy Nights (Adam Sandler&#39;s Eight Crazy Nights) (2002)&#34;, &#39;Eight Legged Freaks (2002)&#39;, &#39;Eight Men Out (1988)&#39;, &#39;Eighth Day, The (Huitième jour, Le) (1996)&#39;, &#39;Einstein and Eddington (2008)&#39;, &#39;El Cid (1961)&#39;, &#39;Election (1999)&#39;, &#39;Elections Day (2007)&#39;, &#39;Electra Glide in Blue (1973)&#39;, &#39;Electroma (2006)&#39;, &#39;Elektra (2005)&#39;, &#39;Elektra Luxx (2010)&#39;, &#39;Element of Crime, The (Forbrydelsens Element) (1984)&#39;, &#39;Elephant (2003)&#39;, &#39;Elephant Man, The (1980)&#39;, &#34;Elevator to the Gallows (a.k.a. Frantic) (Ascenseur pour l&#39;échafaud) (1958)&#34;, &#39;Elf (2003)&#39;, &#39;Elite Squad (Tropa de Elite) (2007)&#39;, &#39;Elite Squad: The Enemy Within (Tropa de Elite 2 - O Inimigo Agora É Outro) (2010)&#39;, &#39;Elizabeth (1998)&#39;, &#39;Elizabeth: The Golden Age (2007)&#39;, &#39;Elizabethtown (2005)&#39;, &#39;Ella Enchanted (2004)&#39;, &#39;Elle (2016)&#39;, &#39;Elling (2001)&#39;, &#39;Elmer Gantry (1960)&#39;, &#39;Elsa &amp; Fred (2005)&#39;, &#39;Elsa &amp; Fred (2014)&#39;, &#39;Elysium (2013)&#39;, &#34;Embalmer, The (Imbalsamatore, L&#39;) (2002)&#34;, &#39;Embassy (2013)&#39;, &#39;Embrace of the Serpent (2016)&#39;, &#39;Emerald Forest, The (1985)&#39;, &#39;Emerald Green (2016)&#39;, &#39;Emma (1996)&#39;, &#39;Emma (2009)&#39;, &#39;Emmanuelle (1974)&#39;, &#39;Emperor and the Assassin, The (Jing ke ci qin wang) (1999)&#39;, &#34;Emperor&#39;s New Clothes, The (2001)&#34;, &#34;Emperor&#39;s New Groove 2: Kronk&#39;s New Groove, The (2005)&#34;, &#34;Emperor&#39;s New Groove, The (2000)&#34;, &#39;Empire (2002)&#39;, &#39;Empire Records (1995)&#39;, &#34;Empire of Dreams: The Story of the &#39;Star Wars&#39; Trilogy (2004)&#34;, &#39;Empire of the Sun (1987)&#39;, &#39;Employee of the Month (2004)&#39;, &#39;Employee of the Month (2006)&#39;, &#39;Empties (2007)&#39;, &#39;Enchanted (2007)&#39;, &#39;Enchanted April (1992)&#39;, &#39;Encino Man (1992)&#39;, &#39;Encounters at the End of the World (2008)&#39;, &#39;End of Days (1999)&#39;, &#39;End of Watch (2012)&#39;, &#39;End of the Affair, The (1999)&#39;, &#34;Ender&#39;s Game (2013)&#34;, &#39;Endgame (2009)&#39;, &#39;Endless Poetry (2016)&#39;, &#39;Endless Summer, The (1966)&#39;, &#34;Endurance: Shackleton&#39;s Legendary Antarctic Expedition, The (2000)&#34;, &#39;Enemy (2013)&#39;, &#39;Enemy Mine (1985)&#39;, &#39;Enemy at the Gates (2001)&#39;, &#39;Enemy of the State (1998)&#39;, &#39;Enforcer, The (1976)&#39;, &#39;English Patient, The (1996)&#39;, &#39;English Teacher, The (2013)&#39;, &#39;English Vinglish (2012)&#39;, &#39;Englishman Who Went Up a Hill But Came Down a Mountain, The (1995)&#39;, &#39;Enigma (2001)&#39;, &#39;Enough (2002)&#39;, &#39;Enough Said (2013)&#39;, &#39;Enron: The Smartest Guys in the Room (2005)&#39;, &#39;Enter the Dragon (1973)&#39;, &#39;Enter the Void (2009)&#39;, &#39;Entertaining Angels: The Dorothy Day Story (1996)&#39;, &#39;Entourage (2015)&#39;, &#39;Entrapment (1999)&#39;, &#39;Envy (2004)&#39;, &#39;Epic (2013)&#39;, &#39;Epic Movie (2007)&#39;, &#39;Equalizer, The (2014)&#39;, &#39;Equilibrium (2002)&#39;, &#39;Equus (1977)&#39;, &#39;Er ist wieder da (2015)&#39;, &#39;Eragon (2006)&#39;, &#39;Eraser (1996)&#39;, &#39;Eraserhead (1977)&#39;, &#39;Erik the Viking (1989)&#39;, &#39;Erin Brockovich (2000)&#39;, &#39;Ernest &amp; Célestine (Ernest et Célestine) (2012)&#39;, &#39;Ernest Goes to Camp (1987)&#39;, &#39;Ernest Goes to Jail (1990)&#39;, &#39;Ernest Rides Again (1993)&#39;, &#39;Ernest Saves Christmas (1988)&#39;, &#39;Ernest Scared Stupid (1991)&#39;, &#39;Eros (2004)&#39;, &#39;Escaflowne: The Movie (Escaflowne) (2000)&#39;, &#39;Escape From Tomorrow (2013)&#39;, &#39;Escape Plan (2013)&#39;, &#39;Escape from Alcatraz (1979)&#39;, &#39;Escape from L.A. (1996)&#39;, &#39;Escape from New York (1981)&#39;, &#39;Escape from Planet Earth (2013)&#39;, &#39;Escape from the Planet of the Apes (1971)&#39;, &#39;Escape to Witch Mountain (1975)&#39;, &#39;Escort, The (Scorta, La) (1993)&#39;, &#39;Eternal Sunshine of the Spotless Mind (2004)&#39;, &#39;Ethan Frome (1993)&#39;, &#39;Ethel &amp; Ernest (2016)&#39;, &#39;Eulogy (2004)&#39;, &#39;EuroTrip (2004)&#39;, &#39;Europa (Zentropa) (1991)&#39;, &#39;Europa Europa (Hitlerjunge Salomon) (1990)&#39;, &#34;European Vacation (aka National Lampoon&#39;s European Vacation) (1985)&#34;, &#39;Eva (2011)&#39;, &#39;Evan Almighty (2007)&#39;, &#39;Evangelion: 1.0 You Are (Not) Alone (Evangerion shin gekijôban: Jo) (2007)&#39;, &#39;Evangelion: 2.0 You Can (Not) Advance (Evangerion shin gekijôban: Ha) (2009)&#39;, &#39;Evangelion: 3.0 You Can (Not) Redo (2012)&#39;, &#39;Eve of Destruction (1991)&#39;, &#34;Eve&#39;s Bayou (1997)&#34;, &#39;Evelyn (2002)&#39;, &#39;Even Cowgirls Get the Blues (1993)&#39;, &#39;Even the Rain (También la lluvia) (2010)&#39;, &#39;Evening with Kevin Smith 2: Evening Harder, An (2006)&#39;, &#39;Event Horizon (1997)&#39;, &#39;Ever After: A Cinderella Story (1998)&#39;, &#39;Everest (1998)&#39;, &#39;Everest (2015)&#39;, &#39;Everlasting Piece, An (2000)&#39;, &#39;Every Secret Thing (2014)&#39;, &#39;Every Which Way But Loose (1978)&#39;, &#39;Everybody Wants Some (2016)&#39;, &#34;Everybody&#39;s Famous! (Iedereen beroemd!) (2000)&#34;, &#39;Everyone Says I Love You (1996)&#39;, &#39;Everything Is Illuminated (2005)&#39;, &#39;Everything Must Go (2010)&#39;, &#39;Everything You Always Wanted to Know About Sex * But Were Afraid to Ask (1972)&#39;, &#39;Everything or Nothing: The Untold Story of 007 (2012)&#39;, &#39;Evil Aliens (2005)&#39;, &#39;Evil Dead (2013)&#39;, &#39;Evil Dead II (Dead by Dawn) (1987)&#39;, &#39;Evil Dead, The (1981)&#39;, &#39;Evita (1996)&#39;, &#39;Evolution (2001)&#39;, &#39;Ewok Adventure, The (a.k.a. Caravan of Courage: An Ewok Adventure) (1984)&#39;, &#39;Ewoks: The Battle for Endor (1985)&#39;, &#39;Ex Drummer (2007)&#39;, &#39;Ex Machina (2015)&#39;, &#39;Ex, The (2007)&#39;, &#39;Exam (2009)&#39;, &#39;Excalibur (1981)&#39;, &#39;Excess Baggage (1997)&#39;, &#39;Executive Decision (1996)&#39;, &#39;Executive Suite (1954)&#39;, &#39;Exit Through the Gift Shop (2010)&#39;, &#39;Exit Wounds (2001)&#39;, &#39;Exit to Eden (1994)&#39;, &#39;Exodus (1960)&#39;, &#39;Exodus: Gods and Kings (2014)&#39;, &#39;Exorcism of Emily Rose, The (2005)&#39;, &#39;Exorcist II: The Heretic (1977)&#39;, &#39;Exorcist III, The (1990)&#39;, &#39;Exorcist, The (1973)&#39;, &#39;Exorcist: The Beginning (2004)&#39;, &#39;Exotica (1994)&#39;, &#39;Expelled: No Intelligence Allowed (2008)&#39;, &#39;Expendables 2, The (2012)&#39;, &#39;Expendables, The (2010)&#39;, &#39;Experimenter (2015)&#39;, &#39;Explorers (1985)&#39;, &#39;Exposed (2016)&#39;, &#39;Express, The (2008)&#39;, &#39;Exte: Hair Extensions (2007)&#39;, &#39;Exterminating Angel, The (Ángel exterminador, El) (1962)&#39;, &#39;Extract (2009)&#39;, &#39;Extraordinary Adventures of Adèle Blanc-Sec, The (2010)&#39;, &#39;Extraordinary Tales (2015)&#39;, &#39;Extreme Days (2001)&#39;, &#39;Extreme Measures (1996)&#39;, &#39;Extreme Ops (2002)&#39;, &#39;Extremely Loud and Incredibly Close (2011)&#39;, &#39;Extremities (1986)&#39;, &#39;Eye See You (D-Tox) (2002)&#39;, &#39;Eye for an Eye (1996)&#39;, &#39;Eye for an Eye, An (1981)&#39;, &#39;Eye in the Sky (2016)&#39;, &#39;Eye of the Beholder (1999)&#39;, &#39;Eye, The (Gin gwai) (Jian gui) (2002)&#39;, &#39;Eyes Wide Shut (1999)&#39;, &#39;Eyes Without a Face (Yeux sans visage, Les) (1959)&#39;, &#39;Eyes of Laura Mars (1978)&#39;, &#39;Eyes of Tammy Faye, The (2000)&#39;, &#39;Eyewitness (Janitor, The) (1981)&#39;, &#39;F*ck You, Goethe 2 (2015)&#39;, &#39;F/X (1986)&#39;, &#39;F/X2 (a.k.a. F/X 2 - The Deadly Art of Illusion) (1991)&#39;, &#39;FLCL (2000)&#39;, &#39;Fabulous Baker Boys, The (1989)&#39;, &#39;Face in the Crowd, A (1957)&#39;, &#39;Face/Off (1997)&#39;, &#39;Faces of Death (1978)&#39;, &#39;Faces of Death 3 (1985)&#39;, &#39;Facing Windows (Finestra di fronte, La) (2003)&#39;, &#39;Factory Girl (2006)&#39;, &#39;Faculty, The (1998)&#39;, &#39;Fading Gigolo (2013)&#39;, &#39;Fahrenheit 451 (1966)&#39;, &#39;Fahrenheit 9/11 (2004)&#39;, &#39;Fail-Safe (1964)&#39;, &#39;Failure to Launch (2006)&#39;, &#39;Fair Game (1995)&#39;, &#39;FairyTale: A True Story (1997)&#39;, &#39;Fall (1997)&#39;, &#39;Fall of the House of Usher, The (House of Usher) (1960)&#39;, &#39;Fall, The (2006)&#39;, &#39;Fallen (1998)&#39;, &#39;Fallen Angels (Duo luo tian shi) (1995)&#39;, &#39;Fallen Idol, The (1948)&#39;, &#39;Falling Angels (2003)&#39;, &#39;Falling Down (1993)&#39;, &#39;Fame (1980)&#39;, &#39;Family Business (1989)&#39;, &#39;Family Guy Presents Stewie Griffin: The Untold Story (2005)&#39;, &#39;Family Guy Presents: Blue Harvest (2007)&#39;, &#34;Family Guy Presents: It&#39;s a Trap (2010)&#34;, &#39;Family Guy Presents: Something, Something, Something, Dark Side (2009)&#39;, &#39;Family Man, The (2000)&#39;, &#39;Family Plot (1976)&#39;, &#39;Family Stone, The (2005)&#39;, &#39;Family Thing, A (1996)&#39;, &#39;Family, The (2013)&#39;, &#39;Fan, The (1996)&#39;, &#39;Fanboys (2009)&#39;, &#39;Fandango (1985)&#39;, &#39;Fanny and Alexander (Fanny och Alexander) (1982)&#39;, &#39;Fans (1999)&#39;, &#39;Fantasia (1940)&#39;, &#39;Fantasia 2000 (1999)&#39;, &#39;Fantastic Beasts and Where to Find Them (2016)&#39;, &#39;Fantastic Fear of Everything, A (2012)&#39;, &#39;Fantastic Four (2005)&#39;, &#39;Fantastic Four (2015)&#39;, &#39;Fantastic Four: Rise of the Silver Surfer (2007)&#39;, &#39;Fantastic Mr. Fox (2009)&#39;, &#39;Fantastic Planet, The (Planète sauvage, La) (1973)&#39;, &#39;Fantastic Voyage (1966)&#39;, &#39;Fantasticks, The (1995)&#39;, &#39;Far From Home: The Adventures of Yellow Dog (1995)&#39;, &#39;Far and Away (1992)&#39;, &#39;Far from Heaven (2002)&#39;, &#39;Faraway, So Close (In weiter Ferne, so nah!) (1993)&#39;, &#39;Farewell My Concubine (Ba wang bie ji) (1993)&#39;, &#39;Farewell to Arms, A (1932)&#39;, &#39;Farewell to the King (1989)&#39;, &#39;Fargo (1996)&#39;, &#39;Farinelli: il castrato (1994)&#39;, &#34;Farmer&#39;s Daughter, The (1947)&#34;, &#39;Farscape: The Peacekeeper Wars (2004)&#39;, &#39;Fast &amp; Furious (Fast and the Furious 4, The) (2009)&#39;, &#39;Fast &amp; Furious 6 (Fast and the Furious 6, The) (2013)&#39;, &#39;Fast Five (Fast and the Furious 5, The) (2011)&#39;, &#39;Fast Food Nation (2006)&#39;, &#39;Fast Food, Fast Women (2000)&#39;, &#39;Fast Runner, The (Atanarjuat) (2001)&#39;, &#39;Fast Times at Ridgemont High (1982)&#39;, &#39;Fast and the Furious, The (2001)&#39;, &#39;Fast and the Furious: Tokyo Drift, The (Fast and the Furious 3, The) (2006)&#39;, &#39;Fast, Cheap &amp; Out of Control (1997)&#39;, &#39;Faster (2010)&#39;, &#39;Faster Pussycat! Kill! Kill! (1965)&#39;, &#39;Fat Albert (2004)&#39;, &#39;Fat City (1972)&#39;, &#39;Fat Girl (À ma soeur!) (2001)&#39;, &#39;Fat Man and Little Boy (1989)&#39;, &#39;Fatal Attraction (1987)&#39;, &#39;Fatal Beauty (1987)&#39;, &#39;Fatal Instinct (1993)&#39;, &#39;Father Goose (1964)&#39;, &#39;Father Hood (1993)&#39;, &#39;Father of the Bride (1950)&#39;, &#39;Father of the Bride (1991)&#39;, &#39;Father of the Bride Part II (1995)&#39;, &#34;Fathers&#39; Day (1997)&#34;, &#39;Faust (1926)&#39;, &#39;Fay Grim (2006)&#39;, &#39;Fear (1996)&#39;, &#39;Fear City: A Family-Style Comedy (La cité de la peur) (1994)&#39;, &#39;Fear X (2003)&#39;, &#39;Fear and Loathing in Las Vegas (1998)&#39;, &#39;Fear of a Black Hat (1994)&#39;, &#39;FearDotCom (a.k.a. Fear.com) (a.k.a. Fear Dot Com) (2002)&#39;, &#39;Fearless (1993)&#39;, &#39;Fearless Hyena, The (Xiao quan guai zhao) (1979)&#39;, &#39;Fearless Vampire Killers, The (1967)&#39;, &#39;Feast (2005)&#39;, &#39;Feast (2014)&#39;, &#39;Federal Hill (1994)&#39;, &#39;Feds (1988)&#39;, &#39;Feeling Minnesota (1996)&#39;, &#34;Felicia&#39;s Journey (1999)&#34;, &#39;Fellini Satyricon (1969)&#39;, &#34;Fellini&#39;s Casanova (Il Casanova di Federico Fellini) (1976)&#34;, &#39;Felon (2008)&#39;, &#39;Felony (2013)&#39;, &#39;Female Perversions (1996)&#39;, &#39;Female Trouble (1975)&#39;, &#39;Femme Fatale (2002)&#39;, &#39;Femme Nikita, La (Nikita) (1990)&#39;, &#39;Fences (2016)&#39;, &#39;Ferdinand (2017)&#39;, &#39;Ferngully: The Last Rainforest (1992)&#39;, &#34;Ferris Bueller&#39;s Day Off (1986)&#34;, &#39;Fever Pitch (1997)&#39;, &#39;Fever Pitch (2005)&#39;, &#39;Few Good Men, A (1992)&#39;, &#39;Ffolkes (1979)&#39;, &#39;Fiddler on the Roof (1971)&#39;, &#39;Fido (2006)&#39;, &#39;Field in England, A (2013)&#39;, &#39;Field of Dreams (1989)&#39;, &#39;Fiendish Plot of Dr. Fu Manchu, The (1980)&#39;, &#39;Fierce Creatures (1997)&#39;, &#39;Fifth Element, The (1997)&#39;, &#39;Fifty Shades Darker (2017)&#39;, &#39;Fifty Shades of Grey (2015)&#39;, &#39;Fight Club (1999)&#39;, &#39;Fighter, The (2010)&#39;, &#39;Fighting Seabees, The (1944)&#39;, &#39;Fighting Temptations, The (2003)&#39;, &#39;Films to Keep You Awake: The Christmas Tale (Películas para no dormir: Cuento de navidad) (2005)&#39;, &#39;Filth (2013)&#39;, &#39;Filth and the Fury, The (2000)&#39;, &#39;Final Analysis (1992)&#39;, &#39;Final Conflict, The (a.k.a. Omen III: The Final Conflict) (1981)&#39;, &#39;Final Countdown, The (1980)&#39;, &#39;Final Cut, The (2004)&#39;, &#39;Final Destination (2000)&#39;, &#39;Final Destination 2 (2003)&#39;, &#39;Final Destination 3 (2006)&#39;, &#39;Final Destination 5 (2011)&#39;, &#39;Final Destination, The (Final Destination 4) (Final Destination in 3-D, The) (2009)&#39;, &#39;Final Fantasy VII: Advent Children (2004)&#39;, &#39;Final Fantasy: The Spirits Within (2001)&#39;, &#39;Final Flight of the Osiris (2003)&#39;, &#39;Find Me Guilty (2006)&#39;, &#39;Finding Dory (2016)&#39;, &#39;Finding Forrester (2000)&#39;, &#39;Finding Nemo (2003)&#39;, &#39;Finding Neverland (2004)&#39;, &#39;Fire Down Below (1997)&#39;, &#39;Fire and Ice (1983)&#39;, &#39;Fire and Ice (2008)&#39;, &#39;Fire in the Sky (1993)&#39;, &#39;Fire with Fire (2012)&#39;, &#39;Fired Up (2009)&#39;, &#39;Firefox (1982)&#39;, &#39;Fireproof (2008)&#39;, &#39;Firestarter (1984)&#39;, &#39;Firewalker (1986)&#39;, &#39;Firewall (2006)&#39;, &#39;Fireworks (Hana-bi) (1997)&#39;, &#39;Fireworks, Should We See It from the Side or the Bottom? (2017)&#39;, &#39;Firm, The (1993)&#39;, &#39;Firm, The (2009)&#39;, &#39;First Beautiful Thing, The (La prima cosa bella) (2010)&#39;, &#39;First Blood (Rambo: First Blood) (1982)&#39;, &#39;First Daughter (2004)&#39;, &#39;First Kid (1996)&#39;, &#39;First Knight (1995)&#39;, &#39;First Monday in October (1981)&#39;, &#39;First Position (2011)&#39;, &#39;First Reformed (2017)&#39;, &#39;First Snow (2006)&#39;, &#39;First Strike (Police Story 4: First Strike) (Ging chaat goo si 4: Ji gaan daan yam mo) (1996)&#39;, &#39;First Sunday (2008)&#39;, &#39;First Time, The (2012)&#39;, &#39;First Wives Club, The (1996)&#39;, &#39;Fish Called Wanda, A (1988)&#39;, &#39;Fish Story (Fisshu sutôrî) (2009)&#39;, &#39;Fisher King, The (1991)&#39;, &#39;Fist Fight (2017)&#39;, &#39;Fist of Fury (Chinese Connection, The) (Jing wu men) (1972)&#39;, &#39;Fist of Legend (Jing wu ying xiong) (1994)&#39;, &#39;Fistful of Dollars, A (Per un pugno di dollari) (1964)&#39;, &#39;Fitzcarraldo (1982)&#39;, &#39;Five Deadly Venoms (1978)&#39;, &#39;Five Easy Pieces (1970)&#39;, &#39;Five Element Ninjas (1982)&#39;, &#39;Five Senses, The (1999)&#39;, &#39;Five-Year Engagement, The (2012)&#39;, &#39;Flags of Our Fathers (2006)&#39;, &#39;Flamingo Kid, The (1984)&#39;, &#39;Flash Gordon (1980)&#39;, &#39;Flash Gordon Conquers the Universe (1940)&#39;, &#39;Flashback (1990)&#39;, &#39;Flashdance (1983)&#39;, &#34;Flatfoot on the Nile (Piedone d&#39;Egitto) (1980)&#34;, &#39;Flatliners (1990)&#39;, &#39;Flawless (1999)&#39;, &#39;Fled (1996)&#39;, &#39;Flesh &amp; Blood (1985)&#39;, &#39;Flesh and Bone (1993)&#39;, &#39;Fletch (1985)&#39;, &#39;Fletch Lives (1989)&#39;, &#39;Flickering Lights (Blinkende lygter) (2000)&#39;, &#39;Flight (2012)&#39;, &#39;Flight of the Navigator (1986)&#39;, &#39;Flight of the Phoenix (2004)&#39;, &#39;Flight of the Phoenix, The (1965)&#39;, &#39;Flightplan (2005)&#39;, &#39;Flint (2017)&#39;, &#39;Flintstones in Viva Rock Vegas, The (2000)&#39;, &#39;Flintstones, The (1994)&#39;, &#39;Flipped (2010)&#39;, &#39;Flipper (1996)&#39;, &#39;Flirting (1991)&#39;, &#39;Flirting With Disaster (1996)&#39;, &#39;Florence Foster Jenkins (2016)&#39;, &#39;Flower of My Secret, The (La flor de mi secreto) (1995)&#39;, &#39;Flowers for Algernon (2000)&#39;, &#39;Flowers in the Attic (1987)&#39;, &#39;Flowers of War, The (Jin líng shí san chai) (2011)&#39;, &#39;Flubber (1997)&#39;, &#39;Fluke (1995)&#39;, &#39;Flushed Away (2006)&#39;, &#39;Fly Away Home (1996)&#39;, &#39;Fly II, The (1989)&#39;, &#39;Fly, The (1958)&#39;, &#39;Fly, The (1986)&#39;, &#39;Flyboys (2006)&#39;, &#39;Flying Down to Rio (1933)&#39;, &#39;Flying Tigers (1942)&#39;, &#39;Focus (2001)&#39;, &#39;Focus (2015)&#39;, &#39;Fog of War: Eleven Lessons from the Life of Robert S. McNamara, The (2003)&#39;, &#39;Fog, The (1980)&#39;, &#39;Fog, The (2005)&#39;, &#39;Follow Me, Boys! (1966)&#39;, &#39;Follow the Fleet (1936)&#39;, &#39;Following (1998)&#39;, &#39;Food, Inc. (2008)&#39;, &#34;Fool&#39;s Gold (2008)&#34;, &#39;Fools Rush In (1997)&#39;, &#39;Footloose (1984)&#39;, &#39;Footloose (2011)&#39;, &#39;For Keeps (1988)&#39;, &#39;For Love of the Game (1999)&#39;, &#39;For Love or Money (1993)&#39;, &#39;For Richer or Poorer (1997)&#39;, &#34;For Roseanna (Roseanna&#39;s Grave) (1997)&#34;, &#39;For Whom the Bell Tolls (1943)&#39;, &#39;For Your Consideration (2006)&#39;, &#39;For Your Eyes Only (1981)&#39;, &#39;For a Few Dollars More (Per qualche dollaro in più) (1965)&#39;, &#39;For a Good Time, Call... (2012)&#39;, &#39;For the Bible Tells Me So (2007)&#39;, &#39;For the Birds (2000)&#39;, &#39;For the Boys (1991)&#39;, &#39;For the Love of Benji (1977)&#39;, &#39;Forbidden Games (Jeux interdits) (1952)&#39;, &#39;Forbidden Kingdom, The (2008)&#39;, &#39;Forbidden Planet (1956)&#39;, &#39;Force 10 from Navarone (1978)&#39;, &#39;Forces of Nature (1999)&#39;, &#39;Foreign Correspondent (1940)&#39;, &#39;Forever Young (1992)&#39;, &#39;Forget Paris (1995)&#39;, &#39;Forgetting Sarah Marshall (2008)&#39;, &#39;Forgotten Silver (1996)&#39;, &#39;Forgotten, The (2004)&#39;, &#39;Formula 51 (2001)&#39;, &#39;Formula of Love (1984)&#39;, &#39;Forrest Gump (1994)&#39;, &#39;Fort Tilden (2014)&#39;, &#39;Fortress (1992)&#39;, &#39;Foul Play (1978)&#39;, &#39;Fountain, The (2006)&#39;, &#39;Fountainhead, The (1949)&#39;, &#39;Four Brothers (2005)&#39;, &#39;Four Christmases (2008)&#39;, &#39;Four Days in September (O Que É Isso, Companheiro?) (1997)&#39;, &#39;Four Feathers, The (2002)&#39;, &#39;Four Lions (2010)&#39;, &#39;Four Musketeers, The (1974)&#39;, &#39;Four Rooms (1995)&#39;, &#39;Four Seasons, The (1981)&#39;, &#39;Four Weddings and a Funeral (1994)&#39;, &#39;Fourth Protocol, The (1987)&#39;, &#39;Fox and the Hound, The (1981)&#39;, &#39;Foxfire (1996)&#39;, &#39;Foxy Brown (1974)&#39;, &#39;Fracchia contro Dracula (1985)&#39;, &#39;Fracture (2007)&#39;, &#39;Frailty (2001)&#39;, &#39;Fraktus (2012)&#39;, &#39;Frances (1982)&#39;, &#39;Frances Ha (2012)&#39;, &#39;Frank (2014)&#39;, &#39;Frankenstein (1931)&#39;, &#39;Frankenstein (2015)&#39;, &#39;Frankenstein 90 (1984)&#39;, &#39;Frankenstein Meets the Wolf Man (1943)&#39;, &#39;Frankenstein Must Be Destroyed (1969)&#39;, &#39;Frankenstein Unbound (1990)&#39;, &#39;Frankenweenie (2012)&#39;, &#39;Frankie and Johnny (1966)&#39;, &#39;Frankie and Johnny (1991)&#39;, &#39;Frantic (1988)&#39;, &#39;Fraternity Vacation (1985)&#39;, &#39;Freaked (1993)&#39;, &#39;Freaks (1932)&#39;, &#39;Freaks of Nature (2015)&#39;, &#39;Freaky Friday (1977)&#39;, &#39;Freaky Friday (2003)&#39;, &#39;Fred Armisen: Standup for Drummers (2018)&#39;, &#39;Freddy Got Fingered (2001)&#39;, &#39;Freddy vs. Jason (2003)&#39;, &#34;Freddy&#39;s Dead: The Final Nightmare (Nightmare on Elm Street Part 6: Freddy&#39;s Dead, A) (1991)&#34;, &#39;Free Enterprise (1998)&#39;, &#39;Free Fire (2017)&#39;, &#39;Free Willy (1993)&#39;, &#39;Free Willy 2: The Adventure Home (1995)&#39;, &#39;Free to Play (2014)&#39;, &#39;Freedom Writers (2007)&#39;, &#39;Freedomland (2006)&#39;, &#39;Freejack (1992)&#39;, &#39;Freeway (1996)&#39;, &#39;Freezer (2014)&#39;, &#39;French Connection II (1975)&#39;, &#39;French Connection, The (1971)&#39;, &#39;French Kiss (1995)&#39;, &#34;French Lieutenant&#39;s Woman, The (1981)&#34;, &#39;French Twist (Gazon maudit) (1995)&#39;, &#39;Frenzy (1972)&#39;, &#39;Frequency (2000)&#39;, &#39;Frequently Asked Questions About Time Travel (2009)&#39;, &#39;Fresh (1994)&#39;, &#39;Freshman, The (1925)&#39;, &#39;Freshman, The (1990)&#39;, &#39;Frida (2002)&#39;, &#39;Friday (1995)&#39;, &#39;Friday After Next (2002)&#39;, &#39;Friday Night Lights (2004)&#39;, &#39;Friday the 13th (1980)&#39;, &#39;Friday the 13th (2009)&#39;, &#39;Friday the 13th Part 2 (1981)&#39;, &#39;Friday the 13th Part 3: 3D (1982)&#39;, &#39;Friday the 13th Part IV: The Final Chapter (1984)&#39;, &#39;Friday the 13th Part V: A New Beginning (1985)&#39;, &#39;Friday the 13th Part VI: Jason Lives (1986)&#39;, &#39;Friday the 13th Part VII: The New Blood (1988)&#39;, &#39;Friday the 13th Part VIII: Jason Takes Manhattan (1989)&#39;, &#39;Fried Green Tomatoes (1991)&#39;, &#39;Friend Is a Treasure, A (Chi Trova Un Amico, Trova un Tesoro) (Who Finds a Friend Finds a Treasure) (1981)&#39;, &#39;Friendly Persuasion (1956)&#39;, &#39;Friends &amp; Lovers (1999)&#39;, &#39;Friends with Benefits (2011)&#39;, &#39;Friends with Kids (2011)&#39;, &#39;Friends with Money (2006)&#39;, &#39;Fright Night (1985)&#39;, &#39;Fright Night (2011)&#39;, &#39;Fright Night Part II (1988)&#39;, &#39;Frighteners, The (1996)&#39;, &#39;Frisco Kid, The (1979)&#39;, &#39;Frisk (1995)&#39;, &#39;From Beyond (1986)&#39;, &#39;From Dusk Till Dawn (1996)&#39;, &#39;From Dusk Till Dawn 2: Texas Blood Money (1999) &#39;, &#39;From Hell (2001)&#39;, &#39;From Here to Eternity (1953)&#39;, &#39;From Justin to Kelly (2003)&#39;, &#39;From Paris with Love (2010)&#39;, &#39;From Russia with Love (1963)&#39;, &#39;From Up on Poppy Hill (Kokuriko-zaka kara) (2011)&#39;, &#39;From the Earth to the Moon (1998)&#39;, &#39;From the Hip (1987)&#39;, &#39;From the Terrace (1960)&#39;, &#39;Front Cover (2016)&#39;, &#39;Front Page, The (1931)&#39;, &#39;Front Page, The (1974)&#39;, &#39;Front of the Class (2008)&#39;, &#39;Frontière(s) (2007)&#39;, &#39;Frost/Nixon (2008)&#39;, &#39;Frosty the Snowman (1969)&#39;, &#39;Frozen (2010)&#39;, &#39;Frozen (2013)&#39;, &#39;Frozen Planet (2011)&#39;, &#39;Frozen River (2008)&#39;, &#39;Fruitvale Station (2013)&#39;, &#39;Fubar (2002)&#39;, &#39;Fuck (2005)&#39;, &#39;Fuck You, Goethe (Fack Ju Göhte) (2013)&#39;, &#39;Fugitive, The (1947)&#39;, &#39;Fugitive, The (1993)&#39;, &#39;Fugitives (1986)&#39;, &#39;Full Metal Jacket (1987)&#39;, &#39;Full Monty, The (1997)&#39;, &#39;Full Moon in Blue Water (1988)&#39;, &#39;Fullmetal Alchemist 2018 (2017)&#39;, &#39;Fullmetal Alchemist the Movie: Conqueror of Shamballa (Gekijô-ban hagane no renkinjutsushi: Shanbara wo yuku mono) (2005)&#39;, &#39;Fullmetal Alchemist: The Sacred Star of Milos (2011)&#39;, &#39;Fulltime Killer (Chuen jik sat sau) (2001)&#39;, &#39;Fun (1994)&#39;, &#39;Fun with Dick and Jane (2005)&#39;, &#39;Funeral, The (1996)&#39;, &#39;Funhouse, The (1981)&#39;, &#39;Funny Bones (1995)&#39;, &#39;Funny Face (1957)&#39;, &#39;Funny Farm (1988)&#39;, &#39;Funny Games (1997)&#39;, &#39;Funny Games U.S. (2007)&#39;, &#39;Funny Girl (1968)&#39;, &#39;Funny People (2009)&#39;, &#39;Funny Thing Happened on the Way to the Forum, A (1966)&#39;, &#39;Fur: An Imaginary Portrait of Diane Arbus (2006)&#39;, &#39;Furious 7 (2015)&#39;, &#39;Fury (1936)&#39;, &#39;Fury (2014)&#39;, &#39;Fury, The (1978)&#39;, &#34;Futurama: Bender&#39;s Big Score (2007)&#34;, &#34;Futurama: Bender&#39;s Game (2008)&#34;, &#39;Futurama: Into the Wild Green Yonder (2009)&#39;, &#39;Futurama: The Beast with a Billion Backs (2008)&#39;, &#39;Futureworld (1976)&#39;, &#39;Fuzz (1972)&#39;, &#39;G-Force (2009)&#39;, &#39;G.B.F. (2013)&#39;, &#39;G.I. Jane (1997)&#39;, &#39;G.I. Joe: Retaliation (2013)&#39;, &#39;G.I. Joe: The Movie (1987)&#39;, &#39;G.I. Joe: The Rise of Cobra (2009)&#39;, &#39;GLOW: The Story of the Gorgeous Ladies of Wrestling (2012)&#39;, &#39;Gabriel Iglesias: Hot and Fluffy (2007)&#39;, &#39;Gaga: Five Foot Two (2017)&#39;, &#39;Galaxy Quest (1999)&#39;, &#39;Galaxy of Terror (Quest) (1981)&#39;, &#39;Gallipoli (1981)&#39;, &#39;Game 6 (2005)&#39;, &#39;Game Night (2018)&#39;, &#39;Game Over, Man! (2018)&#39;, &#39;Game Plan, The (2007)&#39;, &#39;Game of Death (1978)&#39;, &#39;Game, The (1997)&#39;, &#39;Gamer (2009)&#39;, &#39;Gamers, The: Dorkness Rising (2008)&#39;, &#39;Gandhi (1982)&#39;, &#39;Gang Related (1997)&#39;, &#39;Gangs of New York (2002)&#39;, &#39;Gangster No. 1 (2000)&#39;, &#39;Gangster Squad (2013)&#39;, &#39;Garage (2007)&#39;, &#39;Garage Days (2002)&#39;, &#39;Garam Masala (2005)&#39;, &#39;Garden State (2004)&#39;, &#39;Garden of Words, The (Koto no ha no niwa) (2013)&#39;, &#39;Garden of the Finzi-Continis, The (Giardino dei Finzi-Contini, Il) (1970)&#39;, &#39;Gardens of Stone (1987)&#39;, &#34;Garfield&#39;s Pet Force (2009)&#34;, &#39;Garfield: A Tail of Two Kitties (2006)&#39;, &#39;Garfield: The Movie (2004)&#39;, &#39;Garm Wars: The Last Druid (2014)&#39;, &#39;Gas, Food, Lodging (1992)&#39;, &#39;Gaslight (1944)&#39;, &#39;Gate, The (1987)&#39;, &#39;Gattaca (1997)&#39;, &#39;Gauntlet, The (1977)&#39;, &#39;Gay Divorcee, The (1934)&#39;, &#39;Gen-X Cops (1999)&#39;, &#39;Gena the Crocodile (1969)&#39;, &#39;General Died at Dawn, The (1936)&#39;, &#34;General&#39;s Daughter, The (1999)&#34;, &#39;General, The (1926)&#39;, &#39;General, The (1998)&#39;, &#39;Generation Iron 2&#39;, &#39;Generation P (2011)&#39;, &#39;Generation War (2013)&#39;, &#39;Generation X (1996)&#39;, &#39;Genghis Blues (1999)&#39;, &#39;Genius (2016)&#39;, &#39;Genius Party (2007)&#39;, &#34;Gentleman&#39;s Agreement (1947)&#34;, &#39;Gentlemen Broncos (2009)&#39;, &#39;Gentlemen Prefer Blondes (1953)&#39;, &#39;Gentlemen of Fortune (Dzhentlmeny udachi) (1972)&#39;, &#39;George Carlin: Back in Town (1996)&#39;, &#34;George Carlin: It&#39;s Bad for Ya! (2008)&#34;, &#34;George Carlin: Jammin&#39; in New York (1992)&#34;, &#39;George Carlin: Life Is Worth Losing (2005)&#39;, &#39;George Carlin: You Are All Diseased (1999)&#39;, &#39;George Harrison: Living in the Material World (2011)&#39;, &#39;George Washington (2000)&#39;, &#39;George of the Jungle (1997)&#39;, &#39;Georgia (1995)&#39;, &#39;Georgy Girl (1966)&#39;, &#39;Geostorm (2017)&#39;, &#34;Geri&#39;s Game (1997)&#34;, &#39;Germany Year Zero (Germania anno zero) (Deutschland im Jahre Null) (1948)&#39;, &#39;Germinal (1993)&#39;, &#39;Geronimo: An American Legend (1993)&#39;, &#39;Gerry (2002)&#39;, &#39;Get Carter (1971)&#39;, &#39;Get Carter (2000)&#39;, &#39;Get Hard (2015)&#39;, &#39;Get Him to the Greek (2010)&#39;, &#39;Get Low (2009)&#39;, &#39;Get Me Roger Stone (2017)&#39;, &#39;Get Out (2017)&#39;, &#39;Get Over It (2001)&#39;, &#39;Get Real (1998)&#39;, &#39;Get Shorty (1995)&#39;, &#39;Get Smart (2008)&#39;, &#39;Get a Job (2016)&#39;, &#39;Get on Up (2014)&#39;, &#39;Get on the Bus (1996)&#39;, &#39;Get the Gringo (2012)&#39;, &#39;Getaway (2013)&#39;, &#39;Getaway, The (1972)&#39;, &#39;Getaway, The (1994)&#39;, &#39;Getting Even with Dad (1994)&#39;, &#39;Gettysburg (1993)&#39;, &#39;Ghost (1990)&#39;, &#39;Ghost Dad (1990)&#39;, &#39;Ghost Dog: The Way of the Samurai (1999)&#39;, &#39;Ghost Graduation (2012)&#39;, &#39;Ghost Rider (2007)&#39;, &#39;Ghost Rider: Spirit of Vengeance (2012)&#39;, &#39;Ghost Ship (2002)&#39;, &#39;Ghost Story (1981)&#39;, &#39;Ghost Town (2008)&#39;, &#39;Ghost World (2001)&#39;, &#39;Ghost Writer, The (2010)&#39;, &#39;Ghost and Mrs. Muir, The (1947)&#39;, &#39;Ghost and the Darkness, The (1996)&#39;, &#39;Ghost in the Shell (2017)&#39;, &#39;Ghost in the Shell (Kôkaku kidôtai) (1995)&#39;, &#39;Ghost in the Shell 2.0 (2008)&#39;, &#39;Ghost in the Shell 2: Innocence (a.k.a. Innocence) (Inosensu) (2004)&#39;, &#39;Ghost in the Shell Arise - Border 1: Ghost Pain (2013)&#39;, &#39;Ghost in the Shell Arise - Border 2: Ghost Whispers (2013)&#39;, &#39;Ghost in the Shell: Solid State Society (2006)&#39;, &#39;Ghost in the Shell: Stand Alone Complex - The Laughing Man (2005)&#39;, &#39;Ghostbusters (2016)&#39;, &#39;Ghostbusters (a.k.a. Ghost Busters) (1984)&#39;, &#39;Ghostbusters II (1989)&#39;, &#39;Ghosts of Girlfriends Past (2009)&#39;, &#39;Ghosts of Mars (2001)&#39;, &#39;Ghosts of Mississippi (1996)&#39;, &#39;Ghosts of the Abyss (2003)&#39;, &#39;Ghoulies II (1987)&#39;, &#39;Gia (1998)&#39;, &#39;Giant (1956)&#39;, &#39;Giant Spider Invasion, The (1975)&#39;, &#39;Gidget (1959)&#39;, &#39;Gift, The (2000)&#39;, &#39;Gifted (2017)&#39;, &#39;Gigantic (A Tale of Two Johns) (2002)&#39;, &#39;Gigi (1949)&#39;, &#39;Gigi (1958)&#39;, &#39;Gigli (2003)&#39;, &#39;Gilda (1946)&#39;, &#39;Gimme Danger (2016)&#39;, &#39;Ginger Snaps (2000)&#39;, &#39;Ginger Snaps Back: The Beginning (2004)&#39;, &#39;Ginger Snaps: Unleashed (2004)&#39;, &#39;Gingerbread Man, The (1998)&#39;, &#39;Gintama (2017)&#39;, &#39;Gintama: The Final Chapter - Be Forever Yorozuya (2013)&#39;, &#39;Gintama: The Movie (2010)&#39;, &#39;Girl 6 (1996)&#39;, &#39;Girl Next Door, The (2004)&#39;, &#39;Girl Next Door, The (2007)&#39;, &#39;Girl Walks Home Alone at Night, A (2014)&#39;, &#39;Girl Walks Into a Bar (2011)&#39;, &#34;Girl Who Kicked the Hornet&#39;s Nest, The (Luftslottet som sprängdes) (2009)&#34;, &#39;Girl Who Leapt Through Time, The (Toki o kakeru shôjo) (2006)&#39;, &#39;Girl Who Played with Fire, The (Flickan som lekte med elden) (2009)&#39;, &#39;Girl on the Bridge, The (Fille sur le pont, La) (1999)&#39;, &#39;Girl with a Pearl Earring (2003)&#39;, &#39;Girl with the Dragon Tattoo, The (2011)&#39;, &#39;Girl with the Dragon Tattoo, The (Män som hatar kvinnor) (2009)&#39;, &#39;Girl, Interrupted (1999)&#39;, &#39;Girlfight (2000)&#39;, &#39;Girls About Town (1931)&#39;, &#39;Girls Just Want to Have Fun (1985)&#39;, &#39;Girls! Girls! Girls! (1962)&#39;, &#39;Girltrash: All Night Long (2014)&#39;, &#39;Giver, The (2014)&#39;, &#39;Gladiator (1992)&#39;, &#39;Gladiator (2000)&#39;, &#39;Glass House, The (2001)&#39;, &#39;Glass Menagerie, The (1987)&#39;, &#39;Gleaming the Cube (1989)&#39;, &#39;Gleaners &amp; I, The (Les glaneurs et la glaneuse) (2000)&#39;, &#39;Glen or Glenda (1953)&#39;, &#39;Glengarry Glen Ross (1992)&#39;, &#39;Glenn Miller Story, The (1953)&#39;, &#39;Glimmer Man, The (1996)&#39;, &#39;Glitter (2001)&#39;, &#39;Gloomy Sunday (Ein Lied von Liebe und Tod) (1999)&#39;, &#39;Glory (1989)&#39;, &#39;Glory Daze (1995)&#39;, &#39;Glory Road (2006)&#39;, &#39;Gnomeo &amp; Juliet (2011)&#39;, &#39;Go (1999)&#39;, &#39;Go Figure (2005)&#39;, &#39;Go Fish (1994)&#39;, &#39;Go West (1940)&#39;, &#39;Go for Zucker! (Alles auf Zucker!) (2004)&#39;, &#39;Goal! The Dream Begins (Goal!) (2005)&#39;, &#39;Goat (2016)&#39;, &#39;God Bless America (2011)&#39;, &#39;God Loves Caviar (2012)&#39;, &#34;God&#39;s Not Dead (2014)&#34;, &#39;Godfather, The (1972)&#39;, &#39;Godfather: Part II, The (1974)&#39;, &#39;Godfather: Part III, The (1990)&#39;, &#39;Gods Must Be Crazy II, The (1989)&#39;, &#39;Gods Must Be Crazy, The (1980)&#39;, &#39;Gods and Generals (2003)&#39;, &#39;Gods and Monsters (1998)&#39;, &#39;Gods of Egypt (2016)&#39;, &#39;Godsend (2004)&#39;, &#39;Godzilla (1998)&#39;, &#39;Godzilla (2014)&#39;, &#39;Godzilla (Gojira) (1954)&#39;, &#39;Godzilla 1985: The Legend Is Reborn (Gojira) (Godzilla) (Return of Godzilla, The) (1984)&#39;, &#39;Godzilla 2000 (Gojira ni-sen mireniamu) (1999)&#39;, &#39;Godzilla vs. Mechagodzilla (Gojira tai Mekagojira) (1974)&#39;, &#39;Godzilla vs. Mothra (Mosura tai Gojira) (1964)&#39;, &#39;Godzilla, King of the Monsters! (Kaijû-ô Gojira) (1956)&#39;, &#39;Godzilla: Final Wars (Gojira: Fainaru uôzu) (2004)&#39;, &#39;Going Clear: Scientology and the Prison of Belief (2015)&#39;, &#39;Going My Way (1944)&#39;, &#39;Going Places (Valseuses, Les) (1974)&#39;, &#39;Going in Style (1979)&#39;, &#39;Going the Distance (2010)&#39;, &#39;Gold Diggers of 1933 (1933)&#39;, &#39;Gold Diggers of 1935 (1935)&#39;, &#39;Gold Rush, The (1925)&#39;, &#39;Golden Bowl, The (2000)&#39;, &#39;Golden Child, The (1986)&#39;, &#39;Golden Compass, The (2007)&#39;, &#39;Golden Door (Nuovomondo) (2006)&#39;, &#39;GoldenEye (1995)&#39;, &#39;Goldfinger (1964)&#39;, &#39;Golmaal (2006)&#39;, &#39;Gomorrah (Gomorra) (2008)&#39;, &#39;Gone (2012)&#39;, &#39;Gone Baby Gone (2007)&#39;, &#34;Gone Fishin&#39; (1997)&#34;, &#39;Gone Girl (2014)&#39;, &#39;Gone in 60 Seconds (1974)&#39;, &#39;Gone in 60 Seconds (2000)&#39;, &#39;Gone with the Wind (1939)&#39;, &#39;Gonzo: The Life and Work of Dr. Hunter S. Thompson (2008)&#39;, &#39;Good Burger (1997)&#39;, &#39;Good Copy Bad Copy (2007)&#39;, &#39;Good Day to Die Hard, A (2013)&#39;, &#39;Good Earth, The (1937)&#39;, &#39;Good German, The (2006)&#39;, &#39;Good Girl, The (2002)&#39;, &#39;Good Luck Chuck (2007)&#39;, &#39;Good Morning, Vietnam (1987)&#39;, &#39;Good Mother, The (1988)&#39;, &#39;Good Night, and Good Luck. (2005)&#39;, &#39;Good Shepherd, The (2006)&#39;, &#39;Good Son, The (1993)&#39;, &#39;Good Thief, The (2002)&#39;, &#39;Good Time (2017)&#39;, &#39;Good Will Hunting (1997)&#39;, &#39;Good Year, A (2006)&#39;, &#39;Good bye, Lenin! (2003)&#39;, &#39;Good, the Bad and the Ugly, The (Buono, il brutto, il cattivo, Il) (1966)&#39;, &#39;Good, the Bad, the Weird, The (Joheunnom nabbeunnom isanghannom) (2008)&#39;, &#39;Goodbye Charlie (1964)&#39;, &#39;Goodbye Girl, The (1977)&#39;, &#39;Goodbye Lover (1999)&#39;, &#39;Goodbye, Mr. Chips (1939)&#39;, &#39;Goodfellas (1990)&#39;, &#39;Goodnight Mommy (Ich seh ich seh) (2014)&#39;, &#39;Goods: Live Hard, Sell Hard, The (2009)&#39;, &#39;Goofy Movie, A (1995)&#39;, &#39;Goon (2011)&#39;, &#39;Goon: Last of the Enforcers (2017)&#39;, &#39;Goonies, The (1985)&#39;, &#39;Goosebumps (2015)&#39;, &#39;Gordy (1995)&#39;, &#39;Gorgeous (Boh lee chun) (1999)&#39;, &#39;Gorillas in the Mist (1988)&#39;, &#39;Gorky Park (1983)&#39;, &#39;Gosford Park (2001)&#39;, &#39;Gospel According to St. Matthew, The (Vangelo secondo Matteo, Il) (1964)&#39;, &#39;Gossip (2000)&#39;, &#39;Gotcha! (1985)&#39;, &#39;Gothic (1986)&#39;, &#39;Gothika (2003)&#39;, &#39;Gotti (1996)&#39;, &#39;Gozu (Gokudô kyôfu dai-gekijô: Gozu) (2003)&#39;, &#39;Grabbers (2012)&#39;, &#39;Grace of My Heart (1996)&#39;, &#39;Graduate, The (1967)&#39;, &#39;Gran Torino (2008)&#39;, &#39;Grand Budapest Hotel, The (2014)&#39;, &#39;Grand Canyon (1991)&#39;, &#39;Grand Day Out with Wallace and Gromit, A (1989)&#39;, &#39;Grand Hotel (1932)&#39;, &#39;Grand Illusion (La grande illusion) (1937)&#39;, &#39;Grand Theft Parsons (2003)&#39;, &#34;Grandma&#39;s Boy (2006)&#34;, &#39;Grandmaster, The (Yi dai zong shi) (2013)&#39;, &#39;Grapes of Wrath, The (1940)&#39;, &#39;Grass (1999)&#39;, &#39;Grass Is Greener, The (1960)&#39;, &#39;Grave Encounters (2011)&#39;, &#39;Grave of the Fireflies (Hotaru no haka) (1988)&#39;, &#39;Gravity (2013)&#39;, &#34;Gray&#39;s Anatomy (1996)&#34;, &#39;Grease (1978)&#39;, &#39;Grease 2 (1982)&#39;, &#39;Grease Live (2016)&#39;, &#39;Great Balls of Fire! (1989)&#39;, &#39;Great Beauty, The (Grande Bellezza, La) (2013)&#39;, &#39;Great Buck Howard, The (2008)&#39;, &#39;Great Day in Harlem, A (1994)&#39;, &#39;Great Dictator, The (1940)&#39;, &#39;Great Escape, The (1963)&#39;, &#39;Great Expectations (1946)&#39;, &#39;Great Expectations (1998)&#39;, &#39;Great Gatsby, The (1974)&#39;, &#39;Great Gatsby, The (2013)&#39;, &#39;Great Mouse Detective, The (1986)&#39;, &#39;Great Muppet Caper, The (1981)&#39;, &#39;Great Outdoors, The (1988)&#39;, &#39;Great Race, The (1965)&#39;, &#39;Great Santini, The (1979)&#39;, &#39;Great Silence, The (Grande silenzio, Il) (1969)&#39;, &#39;Great White Hype, The (1996)&#39;, &#39;Great Yokai War, The (Yôkai daisensô) (2005)&#39;, &#39;Great Ziegfeld, The (1936)&#39;, &#39;Greatest Game Ever Played, The (2005)&#39;, &#39;Greatest Story Ever Told, The (1965)&#39;, &#39;Greed (1924)&#39;, &#39;Greedy (1994)&#39;, &#39;Green Butchers, The (Grønne slagtere, De) (2003)&#39;, &#39;Green Card (1990)&#39;, &#39;Green Hornet, The (2011)&#39;, &#39;Green Lantern (2011)&#39;, &#39;Green Lantern: First Flight (2009)&#39;, &#39;Green Mile, The (1999)&#39;, &#39;Green Ray, The (Rayon vert, Le) (1986)&#39;, &#39;Green Room (2015)&#39;, &#39;Green Street Hooligans (a.k.a. Hooligans) (2005)&#39;, &#39;Green Zone (2010)&#39;, &#39;Greenberg (2010)&#39;, &#39;Greenfingers (2000)&#39;, &#34;Gregory&#39;s Girl (1981)&#34;, &#39;Gremlins (1984)&#39;, &#39;Gremlins 2: The New Batch (1990)&#39;, &#39;Grey Gardens (1975)&#39;, &#39;Grey Zone, The (2001)&#39;, &#39;Grey, The (2012)&#39;, &#39;Gridiron Gang (2006)&#39;, &#34;Gridlock&#39;d (1997)&#34;, &#39;Grifters, The (1990)&#39;, &#39;Grind (2003)&#39;, &#39;Grindhouse (2007)&#39;, &#39;Grizzly Man (2005)&#39;, &#39;Groove (2000)&#39;, &#39;Gross Anatomy (a.k.a. A Cut Above) (1989)&#39;, &#39;Grosse Pointe Blank (1997)&#39;, &#39;Groundhog Day (1993)&#39;, &#39;Grown Ups (2010)&#39;, &#39;Grown Ups 2 (2013)&#39;, &#39;Grudge Match (2013)&#39;, &#39;Grudge, The (2004)&#39;, &#39;Grumpier Old Men (1995)&#39;, &#39;Grumpy Old Men (1993)&#39;, &#39;Guard, The (2011)&#39;, &#39;Guardian, The (1990)&#39;, &#39;Guardian, The (2006)&#39;, &#39;Guardians (2016)&#39;, &#39;Guardians of the Galaxy (2014)&#39;, &#39;Guardians of the Galaxy 2 (2017)&#39;, &#39;Guarding Tess (1994)&#39;, &#39;Guerrilla: The Taking of Patty Hearst (2004)&#39;, &#39;Guess Who (2005)&#39;, &#34;Guess Who&#39;s Coming to Dinner (1967)&#34;, &#39;Guest from the Future (Gostya iz buduschego) (1985)&#39;, &#39;Guest, The (2014)&#39;, &#39;Guilt Trip, The (2012)&#39;, &#39;Guilty of Romance (Koi no tsumi) (2011) &#39;, &#39;Guinevere (1999)&#39;, &#34;Gulliver&#39;s Travels (1939)&#34;, &#34;Gulliver&#39;s Travels (1996)&#34;, &#34;Gulliver&#39;s Travels (2010)&#34;, &#39;Gummo (1997)&#39;, &#39;Gun Shy (2000)&#39;, &#39;Gung Ho (1986)&#39;, &#39;Gunga Din (1939)&#39;, &#39;Gunman, The (2015)&#39;, &#39;Gunner Palace (2004)&#39;, &#39;Guns of Navarone, The (1961)&#39;, &#39;Guru, The (2002)&#39;, &#39;Guy Thing, A (2003)&#39;, &#39;Guy X (2005)&#39;, &#39;Guys and Dolls (1955)&#39;, &#39;Guyver: Dark Hero (1994)&#39;, &#39;Gypsy (1962)&#39;, &#39;Güeros (2014)&#39;, &#34;Hachiko: A Dog&#39;s Story (a.k.a. Hachi: A Dog&#39;s Tale) (2009)&#34;, &#39;Hackers (1995)&#39;, &#39;Hacksaw Ridge (2016)&#39;, &#39;Haiku Tunnel (2001)&#39;, &#39;Hail, Caesar! (2016)&#39;, &#39;Hair (1979)&#39;, &#34;Hairdresser&#39;s Husband, The (Le mari de la coiffeuse) (1990)&#34;, &#39;Hairspray (1988)&#39;, &#39;Hairspray (2007)&#39;, &#39;Half Baked (1998)&#39;, &#39;Half Nelson (2006)&#39;, &#39;Half a Loaf of Kung Fu (Dian zhi gong fu gan chian chan) (1980)&#39;, &#39;Hall Pass (2011)&#39;, &#39;Halloween (1978)&#39;, &#39;Halloween (2007)&#39;, &#39;Halloween 4: The Return of Michael Myers (1988)&#39;, &#39;Halloween 5: The Revenge of Michael Myers (1989)&#39;, &#39;Halloween H20: 20 Years Later (Halloween 7: The Revenge of Laurie Strode) (1998)&#39;, &#39;Halloween II (1981)&#39;, &#39;Halloween II (2009)&#39;, &#39;Halloween III: Season of the Witch (1982)&#39;, &#39;Halloween: Resurrection (Halloween 8) (2002)&#39;, &#39;Halloween: The Curse of Michael Myers (Halloween 6: The Curse of Michael Myers) (1995)&#39;, &#39;Halloweentown (1998)&#39;, &#39;Halloweentown High (2004)&#39;, &#39;Hamburger Hill (1987)&#39;, &#39;Hamlet (1948)&#39;, &#39;Hamlet (1964)&#39;, &#39;Hamlet (1990)&#39;, &#39;Hamlet (1996)&#39;, &#39;Hamlet (2000)&#39;, &#39;Hamlet 2 (2008)&#39;, &#39;Hancock (2008)&#39;, &#39;Hand That Rocks the Cradle, The (1992)&#39;, &#34;Handmaid&#39;s Tale, The (1990)&#34;, &#39;Hands Off the Loot (Touchez pas au grisbi) (1954)&#39;, &#39;Hands Over the City (Le mani sulla città) (1963)&#39;, &#39;Hands on a Hard Body (1996)&#39;, &#34;Hang &#39;Em High (1968)&#34;, &#39;Hangar 18 (1980)&#39;, &#39;Hanging Up (2000)&#39;, &#39;Hangover Part II, The (2011)&#39;, &#39;Hangover Part III, The (2013)&#39;, &#39;Hangover, The (2009)&#39;, &#39;Hanna (2011)&#39;, &#39;Hannah Montana: The Movie (2009)&#39;, &#39;Hannah and Her Sisters (1986)&#39;, &#39;Hannibal (2001)&#39;, &#39;Hannibal Rising (2007)&#39;, &#39;Hansel &amp; Gretel: Witch Hunters (2013)&#39;, &#39;Happening, The (2008)&#39;, &#34;Happenstance (Battement d&#39;ailes du papillon, Le) (2001)&#34;, &#39;Happiness (1998)&#39;, &#39;Happiness of the Katakuris, The (Katakuri-ke no kôfuku) (2001)&#39;, &#39;Happy Accidents (2000)&#39;, &#39;Happy Birthday to Me (1981)&#39;, &#39;Happy Endings (2005)&#39;, &#39;Happy Feet (2006)&#39;, &#39;Happy Feet Two (2011)&#39;, &#39;Happy Gilmore (1996)&#39;, &#39;Happy Go Lovely (1951)&#39;, &#39;Happy People: A Year in the Taiga (2010)&#39;, &#39;Happy Together (a.k.a. Buenos Aires Affair) (Chun gwong cha sit) (1997)&#39;, &#39;Happy, Texas (1999)&#39;, &#39;Happy-Go-Lucky (2008)&#39;, &#39;Harakiri (Seppuku) (1962)&#39;, &#39;Hard Candy (2005)&#39;, &#39;Hard Core Logo (1996)&#39;, &#34;Hard Day&#39;s Night, A (1964)&#34;, &#39;Hard Promises (1991)&#39;, &#39;Hard Rain (1998)&#39;, &#39;Hard Target (1993)&#39;, &#39;Hard Ticket to Hawaii (1987)&#39;, &#39;Hard Way, The (1991)&#39;, &#39;Hard-Boiled (Lat sau san taam) (1992)&#39;, &#39;Hardball (2001)&#39;, &#39;Hardcore Henry (2015)&#39;, &#39;Harder They Come, The (1973)&#39;, &#39;Harder They Fall, The (1956)&#39;, &#39;Hardware (1990)&#39;, &#39;Hare-um Scare-um (1939)&#39;, &#39;Harlan County U.S.A. (1976)&#39;, &#39;Harlem Nights (1989)&#39;, &#39;Harley Davidson and the Marlboro Man (1991)&#39;, &#39;Harmonists, The (1997)&#39;, &#39;Harold &amp; Kumar Escape from Guantanamo Bay (2008)&#39;, &#39;Harold and Kumar Go to White Castle (2004)&#39;, &#39;Harold and Maude (1971)&#39;, &#39;Harriet the Spy (1996)&#39;, &#39;Harrison Bergeron (1995)&#39;, &#34;Harrison&#39;s Flowers (2000)&#34;, &#39;Harry Brown (2009)&#39;, &#39;Harry Potter and the Chamber of Secrets (2002)&#39;, &#39;Harry Potter and the Deathly Hallows: Part 1 (2010)&#39;, &#39;Harry Potter and the Deathly Hallows: Part 2 (2011)&#39;, &#39;Harry Potter and the Goblet of Fire (2005)&#39;, &#39;Harry Potter and the Half-Blood Prince (2009)&#39;, &#39;Harry Potter and the Order of the Phoenix (2007)&#39;, &#39;Harry Potter and the Prisoner of Azkaban (2004)&#39;, &#34;Harry Potter and the Sorcerer&#39;s Stone (a.k.a. Harry Potter and the Philosopher&#39;s Stone) (2001)&#34;, &#39;Harry and the Hendersons (1987)&#39;, &#39;Harsh Times (2006)&#39;, &#34;Hart&#39;s War (2002)&#34;, &#39;Harvard Man (2001)&#39;, &#39;Harvey (1950)&#39;, &#39;Harvey Girls, The (1946)&#39;, &#39;Hatari! (1962)&#39;, &#39;Hatchet (2006)&#39;, &#39;Hatchet II (2010)&#39;, &#39;Hatchet III (2013)&#39;, &#39;Hate (Haine, La) (1995)&#39;, &#39;Haunted Honeymoon (1986)&#39;, &#39;Haunted House 2, A (2014)&#39;, &#39;Haunted Mansion, The (2003)&#39;, &#39;Haunted World of Edward D. Wood Jr., The (1996)&#39;, &#39;Haunted World of El Superbeasto, The (2009)&#39;, &#39;Haunter (2013)&#39;, &#39;Haunting in Connecticut, The (2009)&#39;, &#39;Haunting, The (1963)&#39;, &#39;Haunting, The (1999)&#39;, &#39;Havoc (2005)&#39;, &#39;Hawks and Sparrows (Uccellacci e Uccellini) (1966)&#39;, &#39;Haywire (2011)&#39;, &#39;Hazard (2005)&#39;, &#39;He Got Game (1998)&#39;, &#39;He Loves Me... He Loves Me Not (À la folie... pas du tout) (2002)&#39;, &#39;He Never Died (2015)&#39;, &#39;He Said, She Said (1991)&#39;, &#34;He&#39;s Just Not That Into You (2009)&#34;, &#39;Head Above Water (1996)&#39;, &#39;Head On (1998)&#39;, &#39;Head Over Heels (2001)&#39;, &#39;Head of State (2003)&#39;, &#39;Headhunters (Hodejegerne) (2011)&#39;, &#39;Headshot (2011)&#39;, &#39;Hear My Song (1991)&#39;, &#39;Heart Condition (1990)&#39;, &#39;Heart and Souls (1993)&#39;, &#39;Heart in Winter, A (Un coeur en hiver) (1992)&#39;, &#39;Heart of a Dog (Sobachye serdtse) (1988)&#39;, &#39;Heartbeats (Les amours imaginaires) (2010)&#39;, &#39;Heartbreak Kid, The (2007)&#39;, &#39;Heartbreak Ridge (1986)&#39;, &#34;Heartbreaker (L&#39;Arnacoeur) (2010)&#34;, &#39;Heartbreakers (2001)&#39;, &#39;Heartburn (1986)&#39;, &#39;Heartless (2009)&#39;, &#39;Hearts and Minds (1996)&#39;, &#39;Hearts in Atlantis (2001)&#39;, &#39;Hearts of Darkness: A Filmmakers Apocalypse (1991)&#39;, &#39;Heat (1995)&#39;, &#39;Heat, The (2013)&#39;, &#39;Heathers (1989)&#39;, &#39;Heaven (2002)&#39;, &#39;Heaven Can Wait (1978)&#39;, &#39;Heaven and Earth (Ten to Chi to) (1990)&#39;, &#34;Heaven&#39;s Prisoners (1996)&#34;, &#39;Heavenly Creatures (1994)&#39;, &#39;Heavy (1995)&#39;, &#39;Heavy Metal (1981)&#39;, &#39;Heavy Metal 2000 (2000)&#39;, &#39;Heavyweights (Heavy Weights) (1995)&#39;, &#39;Hector and the Search for Happiness (2014)&#39;, &#39;Hedgehog in the Fog (1975)&#39;, &#39;Hedwig and the Angry Inch (2000)&#39;, &#39;Heidi (1937)&#39;, &#39;Heidi Fleiss: Hollywood Madam (1995)&#39;, &#39;Heima (2007)&#39;, &#39;Heiress, The (1949)&#39;, &#39;Heist (2001)&#39;, &#39;Helen of Troy (2003)&#39;, &#39;Hell Comes to Frogtown (1988)&#39;, &#39;Hell Night (1981)&#39;, &#39;Hell Ride (2008)&#39;, &#39;Hell in the Pacific (1968)&#39;, &#39;Hell or High Water (2016)&#39;, &#39;Hellbenders (2012)&#39;, &#39;Hellbound: Hellraiser II (1988)&#39;, &#39;Hellboy (2004)&#39;, &#39;Hellboy II: The Golden Army (2008)&#39;, &#39;Hellevator (2004)&#39;, &#39;Hello Again (1987)&#39;, &#39;Hello Ladies: The Movie (2014)&#39;, &#39;Hello, Dolly! (1969)&#39;, &#39;Hellraiser (1987)&#39;, &#39;Hellraiser III: Hell on Earth (1992)&#39;, &#39;Hellraiser: Bloodline (1996)&#39;, &#39;Hellsinki (Rööperi) (2009)&#39;, &#39;Help! (1965)&#39;, &#39;Help, The (2011)&#39;, &#39;Helter Skelter (2004)&#39;, &#39;Helvetica (2007)&#39;, &#39;Henry &amp; June (1990)&#39;, &#39;Henry Fool (1997)&#39;, &#39;Henry Poole is Here (2008)&#39;, &#39;Henry V (1989)&#39;, &#34;Henry&#39;s Crime (2010)&#34;, &#39;Henry: Portrait of a Serial Killer (1986)&#39;, &#39;Her (2013)&#39;, &#39;Her Alibi (1989)&#39;, &#39;Herbie Goes Bananas (1980)&#39;, &#39;Herbie Goes to Monte Carlo (1977)&#39;, &#39;Herbie Rides Again (1974)&#39;, &#39;Herbie: Fully Loaded (2005)&#39;, &#39;Hercules (1997)&#39;, &#39;Hercules (2014)&#39;, &#39;Here Comes Mr. Jordan (1941)&#39;, &#39;Here Comes the Boom (2012)&#39;, &#39;Here on Earth (2000)&#39;, &#39;Hereafter (2010)&#39;, &#39;Hero (1992)&#39;, &#39;Hero (Ying xiong) (2002)&#39;, &#34;Herod&#39;s Law (Ley de Herodes, La) (2000)&#34;, &#39;Hesher (2010)&#39;, &#39;Hey Arnold! The Movie (2002)&#39;, &#39;Hidalgo (2004)&#39;, &#39;Hidden (a.k.a. Cache) (Caché) (2005)&#39;, &#39;Hidden Figures (2016)&#39;, &#39;Hidden Fortress, The (Kakushi-toride no san-akunin) (1958)&#39;, &#39;Hidden, The (1987)&#39;, &#39;Hide and Seek (2005)&#39;, &#39;Hideaway (1995)&#39;, &#39;Hideous Kinky (1998)&#39;, &#39;Hiding Out (1987)&#39;, &#39;High Anxiety (1977)&#39;, &#39;High Art (1998)&#39;, &#39;High Crimes (2002)&#39;, &#39;High Fidelity (2000)&#39;, &#39;High Heels (Tacones lejanos) (1991)&#39;, &#39;High Heels and Low Lifes (2001)&#39;, &#39;High Noon (1952)&#39;, &#39;High Plains Drifter (1973)&#39;, &#39;High Rise (2015)&#39;, &#39;High School (2010)&#39;, &#39;High School High (1996)&#39;, &#39;High School Musical (2006)&#39;, &#39;High School Musical 2 (2007)&#39;, &#39;High Sierra (1941)&#39;, &#39;High Society (1956)&#39;, &#39;High Spirits (1988)&#39;, &#39;High Tension (Haute tension) (Switchblade Romance) (2003)&#39;, &#39;High and Low (Tengoku to jigoku) (1963)&#39;, &#39;Higher Learning (1995)&#39;, &#39;Highlander (1986)&#39;, &#39;Highlander II: The Quickening (1991)&#39;, &#39;Highlander III: The Sorcerer (a.k.a. Highlander: The Final Dimension) (1994)&#39;, &#39;Highlander: Endgame (Highlander IV) (2000)&#39;, &#39;Highlander: The Search for Vengeance (2007)&#39;, &#39;Highway 61 (1991)&#39;, &#39;Hilary and Jackie (1998)&#39;, &#39;Hills Have Eyes II, The (2007)&#39;, &#39;Hills Have Eyes, The (1977)&#39;, &#39;Hills Have Eyes, The (2006)&#39;, &#34;Himalaya (Himalaya - l&#39;enfance d&#39;un chef) (1999)&#34;, &#39;Himizu (2011)&#39;, &#39;Hip Hop Witch, Da (2000)&#39;, &#39;Hipsters (Stilyagi) (2008)&#39;, &#39;Hiroshima Mon Amour (1959)&#39;, &#39;His Girl Friday (1940)&#39;, &#39;His Secret Life (a.k.a. Ignorant Fairies, The) (Fate ignoranti, Le) (2001)&#39;, &#39;History Boys, The (2006)&#39;, &#39;History of Future Folk, The (2012)&#39;, &#39;History of Violence, A (2005)&#39;, &#39;History of the World: Part I (1981)&#39;, &#39;Hit by Lightning (2014)&#39;, &#39;Hit the Bank (Vabank) (1981)&#39;, &#39;Hitch (2005)&#39;, &#39;Hitch Hikers Guide to the Galaxy, The (1981)&#39;, &#39;Hitchcock (2012)&#39;, &#39;Hitchcock/Truffaut (2015)&#39;, &#39;Hitcher, The (1986)&#39;, &#39;Hitcher, The (2007)&#39;, &#34;Hitchhiker&#39;s Guide to the Galaxy, The (2005)&#34;, &#39;Hitman (2007)&#39;, &#39;Hitman: Agent 47 (2015)&#39;, &#39;Hoax, The (2007)&#39;, &#39;Hobbit: An Unexpected Journey, The (2012)&#39;, &#39;Hobbit: The Desolation of Smaug, The (2013)&#39;, &#39;Hobo with a Shotgun (2011)&#39;, &#39;Hocus Pocus (1993)&#39;, &#39;Hoffa (1992)&#39;, &#34;Hogfather (Terry Pratchett&#39;s Hogfather) (2006)&#34;, &#39;Holes (2003)&#39;, &#39;Holiday (1938)&#39;, &#39;Holiday (Jour de fête) (1949)&#39;, &#39;Holiday Inn (1942)&#39;, &#39;Holiday, The (2006)&#39;, &#39;Hollow Man (2000)&#39;, &#39;Hollywood Chainsaw Hookers (1988)&#39;, &#39;Hollywood Ending (2002)&#39;, &#39;Hollywood Homicide (2003)&#39;, &#39;Hollywood Knights, The (1980)&#39;, &#39;Hollywood Shuffle (1987)&#39;, &#39;Hollywoodland (2006)&#39;, &#39;Holy Man (1998)&#39;, &#39;Holy Motors (2012)&#39;, &#39;Holy Mountain, The (Montaña sagrada, La) (1973)&#39;, &#39;Holy Smoke (1999)&#39;, &#39;Hombre (1967)&#39;, &#39;Home (2009)&#39;, &#39;Home (2015)&#39;, &#39;Home Alone (1990)&#39;, &#39;Home Alone 2: Lost in New York (1992)&#39;, &#39;Home Alone 3 (1997)&#39;, &#39;Home Fries (1998)&#39;, &#39;Home for the Holidays (1995)&#39;, &#39;Homefront (2013)&#39;, &#39;Homegrown (1998)&#39;, &#39;Homeward Bound II: Lost in San Francisco (1996)&#39;, &#39;Homeward Bound: The Incredible Journey (1993)&#39;, &#39;Hommage à Zgougou (et salut à Sabine Mamou) (2002)&#39;, &#39;Honest Liar, An (2014)&#39;, &#39;Honey (2003)&#39;, &#39;Honey (Miele) (2013)&#39;, &#39;Honey, I Blew Up the Kid (1992)&#39;, &#39;Honey, I Shrunk the Kids (1989)&#39;, &#39;Honey, We Shrunk Ourselves (1997)&#39;, &#39;Honeymoon (2014)&#39;, &#39;Honeymoon in Vegas (1992)&#39;, &#39;Hood of Horror (2006)&#39;, &#39;Hoodlum (1997)&#39;, &#39;Hoodwinked! (2005)&#39;, &#39;Hook (1991)&#39;, &#39;Hoop Dreams (1994)&#39;, &#39;Hoosiers (a.k.a. Best Shot) (1986)&#39;, &#39;Hop (2011)&#39;, &#39;Hope Floats (1998)&#39;, &#39;Hope Springs (2003)&#39;, &#39;Hope Springs (2012)&#39;, &#39;Hope and Glory (1987)&#39;, &#39;Hopscotch (1980)&#39;, &#39;Horde, The (La Horde) (2009)&#39;, &#39;Horns (2014)&#39;, &#39;Horrible Bosses (2011)&#39;, &#39;Horrible Bosses 2 (2014)&#39;, &#39;Horror of Dracula (Dracula) (1958)&#39;, &#39;Horrors of Spider Island (Ein Toter Hing im Netz) (1960)&#39;, &#39;Horse Feathers (1932)&#39;, &#39;Horse Soldiers, The (1959)&#39;, &#39;Horse Whisperer, The (1998)&#39;, &#39;Horseman on the Roof, The (Hussard sur le toit, Le) (1995)&#39;, &#39;Horton Hears a Who! (2008)&#39;, &#39;Host, The (2013)&#39;, &#39;Host, The (Gwoemul) (2006)&#39;, &#39;Hostage (2005)&#39;, &#39;Hostel (2005)&#39;, &#39;Hostel: Part II (2007)&#39;, &#39;Hot Chick, The (2002)&#39;, &#39;Hot Dog... The Movie (1984)&#39;, &#39;Hot Fuzz (2007)&#39;, &#39;Hot Girls Wanted (2015)&#39;, &#39;Hot Lead and Cold Feet (1978)&#39;, &#39;Hot Pursuit (2015)&#39;, &#39;Hot Rod (2007)&#39;, &#39;Hot Shots! (1991)&#39;, &#39;Hot Shots! Part Deux (1993)&#39;, &#39;Hot Spot, The (1990)&#39;, &#39;Hot Tub Time Machine (2010)&#39;, &#39;Hot Tub Time Machine 2 (2015)&#39;, &#34;Hotel Chevalier (Part 1 of &#39;The Darjeeling Limited&#39;) (2007)&#34;, &#39;Hotel Rwanda (2004)&#39;, &#39;Hotel Transylvania (2012)&#39;, &#39;Hotel Transylvania 2 (2015)&#39;, &#39;Houdini (2014)&#39;, &#39;Hour of the Wolf (Vargtimmen) (1968)&#39;, &#39;Hours, The (2002)&#39;, &#39;House (1986)&#39;, &#39;House Arrest (1996)&#39;, &#39;House Bunny, The (2008)&#39;, &#39;House II: The Second Story (1987)&#39;, &#39;House Party (1990)&#39;, &#39;House Party 2 (1991)&#39;, &#39;House Party 3 (1994)&#39;, &#39;House at the End of the Street (2012)&#39;, &#39;House of 1000 Corpses (2003)&#39;, &#39;House of Cards (1993)&#39;, &#39;House of Flying Daggers (Shi mian mai fu) (2004)&#39;, &#39;House of Games (1987)&#39;, &#39;House of Mirth, The (2000)&#39;, &#39;House of Sand and Fog (2003)&#39;, &#39;House of Wax (1953)&#39;, &#39;House of Wax (2005)&#39;, &#39;House of Yes, The (1997)&#39;, &#39;House of the Dead, The (2003)&#39;, &#39;House of the Devil, The (2009)&#39;, &#39;House of the Spirits, The (1993)&#39;, &#39;House on Haunted Hill (1999)&#39;, &#39;Houseboat (1958)&#39;, &#39;Housebound (2014)&#39;, &#39;Houseguest (1994)&#39;, &#39;Housesitter (1992)&#39;, &#39;How Do You Know (2010)&#39;, &#39;How High (2001)&#39;, &#39;How Stella Got Her Groove Back (1998)&#39;, &#39;How To Change The World (2015)&#39;, &#39;How the Grinch Stole Christmas (a.k.a. The Grinch) (2000)&#39;, &#39;How the Grinch Stole Christmas! (1966)&#39;, &#39;How to Be Single (2016)&#39;, &#39;How to Deal (2003)&#39;, &#39;How to Get Ahead in Advertising (1989)&#39;, &#34;How to Kill Your Neighbor&#39;s Dog (2000)&#34;, &#39;How to Lose Friends &amp; Alienate People (2008)&#39;, &#39;How to Lose a Guy in 10 Days (2003)&#39;, &#39;How to Make Love Like an Englishman (2014)&#39;, &#39;How to Make Love to a Woman (2010)&#39;, &#39;How to Make an American Quilt (1995)&#39;, &#39;How to Marry a Millionaire (1953)&#39;, &#39;How to Steal a Million (1966)&#39;, &#39;How to Succeed in Business Without Really Trying (1967)&#39;, &#39;How to Train Your Dragon (2010)&#39;, &#39;How to Train Your Dragon 2 (2014)&#39;, &#39;Howard the Duck (1986)&#39;, &#39;Howards End (1992)&#39;, &#39;Howl (2010)&#39;, &#34;Howl&#39;s Moving Castle (Hauru no ugoku shiro) (2004)&#34;, &#39;Howling II: Your Sister Is a Werewolf (1985)&#39;, &#39;Howling, The (1980)&#39;, &#39;Hud (1963)&#39;, &#39;Hudson Hawk (1991)&#39;, &#39;Hudsucker Proxy, The (1994)&#39;, &#39;Hugo (2011)&#39;, &#39;Hulk (2003)&#39;, &#39;Hulk Vs. (2009)&#39;, &#39;Human (2015)&#39;, &#39;Human Centipede, The (First Sequence) (2009)&#39;, &#39;Human Condition I, The (Ningen no joken I) (1959)&#39;, &#39;Human Condition II, The (Ningen no joken II) (1959)&#39;, &#39;Human Condition III, The (Ningen no joken III) (1961)&#39;, &#39;Human Nature (2001)&#39;, &#39;Human Planet (2011)&#39;, &#39;Human Stain, The (2003)&#39;, &#39;Human Traffic (1999)&#39;, &#39;Humanoids from the Deep (1980)&#39;, &#39;Humpday (2009)&#39;, &#39;Hunchback of Notre Dame, The (1923)&#39;, &#39;Hunchback of Notre Dame, The (1939)&#39;, &#39;Hunchback of Notre Dame, The (1996)&#39;, &#39;Hunger (2008)&#39;, &#39;Hunt For Gollum, The (2009)&#39;, &#39;Hunt for Red October, The (1990)&#39;, &#39;Hunt for the Wilderpeople (2016)&#39;, &#39;Hunt, The (Jagten) (2012)&#39;, &#39;Hunted, The (1995)&#39;, &#39;Hunted, The (2003)&#39;, &#39;Hunting Elephants (2013)&#39;, &#39;Hunting Party, The (2007)&#39;, &#39;Hunting of the President, The (2004)&#39;, &#39;Hurlyburly (1998)&#39;, &#39;Hurricane Streets (1997)&#39;, &#39;Hurricane, The (1999)&#39;, &#39;Hurt Locker, The (2008)&#39;, &#39;Husbands and Wives (1992)&#39;, &#39;Hush (1998)&#39;, &#39;Hush (2016)&#39;, &#39;Hush... Hush, Sweet Charlotte (1964)&#39;, &#39;Hustle &amp; Flow (2005)&#39;, &#39;Hustler White (1996)&#39;, &#39;Hustler, The (1961)&#39;, &#39;Hyde Park on Hudson (2012)&#39;, &#39;Hyena Road&#39;, &#39;Hype! (1996)&#39;, &#39;HyperNormalisation (2016)&#39;, &#39;Hysteria (2011)&#39;, &#39;I Am David (2003)&#39;, &#39;I Am Legend (2007)&#39;, &#39;I Am Not Your Negro (2017)&#39;, &#39;I Am Number Four (2011)&#39;, &#39;I Am Sam (2001)&#39;, &#39;I Am Trying to Break Your Heart (2002)&#39;, &#39;I Am Wrath (2016)&#39;, &#39;I Am a Fugitive from a Chain Gang (1932)&#39;, &#39;I Am a Sex Addict (2005)&#39;, &#39;I Bought a Vampire Motorcycle (1990)&#39;, &#34;I Can&#39;t Think Straight (2007)&#34;, &#39;I Capture the Castle (2003)&#39;, &#39;I Confess (1953)&#39;, &#39;I Do: How to Get Married and Stay Single (Prête-moi ta main) (2006)&#39;, &#34;I Don&#39;t Know How She Does It (2011)&#34;, &#39;I Heart Huckabees (2004)&#39;, &#39;I Kill Giants (2018)&#39;, &#34;I Killed My Mother (J&#39;ai tué ma mère) (2009)&#34;, &#39;I Know What You Did Last Summer (1997)&#39;, &#39;I Know Who Killed Me (2007)&#39;, &#39;I Like It Like That (1994)&#39;, &#39;I Love Trouble (1994)&#39;, &#39;I Love You Again (1940)&#39;, &#39;I Love You Phillip Morris (2009)&#39;, &#39;I Love You to Death (1990)&#39;, &#39;I Love You, Beth Cooper (2009)&#39;, &#39;I Love You, I Love You Not (1996)&#39;, &#39;I Love You, Man (2009)&#39;, &#39;I Never Promised You a Rose Garden (1977)&#39;, &#39;I Now Pronounce You Chuck and Larry (2007)&#39;, &#39;I Origins (2014)&#39;, &#39;I Remember Mama (1948)&#39;, &#39;I Saw What You Did (1965)&#39;, &#39;I Saw the Devil (Akmareul boatda) (2010)&#39;, &#39;I Sell the Dead (2008)&#39;, &#39;I Served the King of England (Obsluhoval jsem anglického krále) (2006)&#39;, &#39;I Shot Andy Warhol (1996)&#39;, &#39;I Shot Jesse James (1949)&#39;, &#39;I Spit on Your Grave (2010)&#39;, &#39;I Spit on Your Grave (Day of the Woman) (1978)&#39;, &#39;I Spy (2002)&#39;, &#39;I Stand Alone (Seul contre tous) (1998)&#39;, &#39;I Still Know What You Did Last Summer (1998)&#39;, &#39;I Think I Love My Wife (2007)&#39;, &#39;I Walked with a Zombie (1943)&#39;, &#39;I Want to Live! (1958)&#39;, &#39;I Was a Male War Bride (1949)&#39;, &#39;I Went Down (1997)&#39;, &#34;I&#39;ll Be Home For Christmas (1998)&#34;, &#34;I&#39;ll Do Anything (1994)&#34;, &#34;I&#39;ll Follow You Down (2013)&#34;, &#34;I&#39;m Gonna Git You Sucka (1988)&#34;, &#34;I&#39;m Here (2010)&#34;, &#34;I&#39;m Not Scared (Io non ho paura) (2003)&#34;, &#34;I&#39;m Not There (2007)&#34;, &#34;I&#39;m Starting From Three (Ricomincio da Tre) (1981)&#34;, &#34;I&#39;m Still Here (2010)&#34;, &#34;I&#39;m a Cyborg, But That&#39;s OK (Saibogujiman kwenchana) (2006)&#34;, &#34;I&#39;m the One That I Want (2000)&#34;, &#39;I, Frankenstein (2014)&#39;, &#39;I, Robot (2004)&#39;, &#39;I, Tonya (2017)&#39;, &#39;I, the Jury (1982)&#39;, &#39;I.O.U.S.A. (a.k.a. IOUSA) (2008)&#39;, &#39;I.Q. (1994)&#39;, &#39;Icarus (2017)&#39;, &#39;Ice Age (2002)&#39;, &#39;Ice Age 2: The Meltdown (2006)&#39;, &#39;Ice Age 4: Continental Drift (2012)&#39;, &#39;Ice Age: A Mammoth Christmas (2011)&#39;, &#39;Ice Age: Collision Course (2016)&#39;, &#39;Ice Age: Dawn of the Dinosaurs (2009)&#39;, &#39;Ice Age: The Great Egg-Scapade (2016)&#39;, &#39;Ice Castles (1978)&#39;, &#39;Ice Cream Man (1995)&#39;, &#39;Ice Guardians (2016)&#39;, &#39;Ice Harvest, The (2005)&#39;, &#39;Ice Princess (2005)&#39;, &#39;Ice Storm, The (1997)&#39;, &#39;Iceman, The (2012)&#39;, &#39;Ichi the Killer (Koroshiya 1) (2001)&#39;, &#39;Icicle Thief, The (Ladri di saponette) (1989)&#39;, &#39;Idaho Transfer (1973)&#39;, &#39;Ideal Husband, An (1999)&#39;, &#39;Identity (2003)&#39;, &#39;Identity Thief (2013)&#39;, &#39;Ides of March, The (2011)&#39;, &#39;Idiocracy (2006)&#39;, &#39;Idiots and Angels (2008)&#39;, &#39;Idiots, The (Idioterne) (1998)&#39;, &#39;Idle Hands (1999)&#39;, &#39;Idlewild (2006)&#39;, &#39;If I Stay (2014)&#39;, &#39;If I Were a Rich Man (2002)&#39;, &#39;If Looks Could Kill (1991)&#39;, &#39;If Lucy Fell (1996)&#39;, &#39;If These Walls Could Talk (1996)&#39;, &#39;If These Walls Could Talk 2 (2000)&#39;, &#39;Igby Goes Down (2002)&#39;, &#39;Igor (2008)&#39;, &#39;Ikiru (1952)&#39;, &#39;Iliza Shlesinger: Freezing Hot (2015)&#39;, &#39;Illusionist, The (2006)&#39;, &#34;Illusionist, The (L&#39;illusionniste) (2010)&#34;, &#39;Ilsa, She Wolf of the SS (1974)&#39;, &#39;Imaginarium of Doctor Parnassus, The (2009)&#39;, &#39;Imaginary Heroes (2004)&#39;, &#39;Imagine Me &amp; You (2005)&#39;, &#39;Imagine That (2009)&#39;, &#39;Imitation of Life (1959)&#39;, &#39;Immature, The (Immaturi) (2011)&#39;, &#39;Immigrant, The (1917)&#39;, &#39;Immortal Beloved (1994)&#39;, &#39;Immortals (2011)&#39;, &#39;Imperium (2016)&#39;, &#39;Importance of Being Earnest, The (2002)&#39;, &#39;Impossible, The (Imposible, Lo) (2012)&#39;, &#39;Imposter, The (2012)&#39;, &#39;Impostor (2002)&#39;, &#39;Impostors, The (1998)&#39;, &#39;Impromptu (1991)&#39;, &#39;In &amp; Out (1997)&#39;, &#39;In America (2002)&#39;, &#39;In Bruges (2008)&#39;, &#39;In China They Eat Dogs (I Kina spiser de hunde) (1999)&#39;, &#39;In Cold Blood (1967)&#39;, &#39;In Crowd, The (2000)&#39;, &#39;In Dreams (1999)&#39;, &#39;In Good Company (2004)&#39;, &#39;In Hell (2003)&#39;, &#39;In Her Shoes (2005)&#39;, &#39;In July (Im Juli) (2000)&#39;, &#39;In Like Flint (1967)&#39;, &#39;In Love and War (1996)&#39;, &#34;In My Father&#39;s Den (2004)&#34;, &#39;In Search of the Castaways (1962)&#39;, &#39;In This World (2002)&#39;, &#39;In Time (2011)&#39;, &#39;In Too Deep (1999)&#39;, &#39;In a Better World (Hævnen) (2010)&#39;, &#39;In a Lonely Place (1950)&#39;, &#39;In a World... (2013)&#39;, &#39;In the Army Now (1994)&#39;, &#39;In the Bedroom (2001)&#39;, &#39;In the Bleak Midwinter (1995)&#39;, &#39;In the Company of Men (1997)&#39;, &#39;In the Cut (2003)&#39;, &#39;In the Electric Mist (2009)&#39;, &#39;In the Heart of the Sea (2015)&#39;, &#39;In the Heat of the Night (1967)&#39;, &#39;In the Land of Women (2007)&#39;, &#39;In the Line of Fire (1993)&#39;, &#39;In the Loop (2009)&#39;, &#39;In the Mood For Love (Fa yeung nin wa) (2000)&#39;, &#39;In the Mouth of Madness (1995)&#39;, &#39;In the Name of the Father (1993)&#39;, &#39;In the Name of the King III (2014)&#39;, &#39;In the Name of the King: A Dungeon Siege Tale (2008)&#39;, &#39;In the Realm of the Senses (Ai no corrida) (1976)&#39;, &#39;In the Valley of Elah (2007)&#39;, &#39;In the blue sea, in the white foam. (1984)&#39;, &#39;In-Laws, The (2003)&#39;, &#39;Inbetweeners 2, The (2014)&#39;, &#39;Inbetweeners Movie, The (2011)&#39;, &#39;Incendies (2010)&#39;, &#39;Inception (2010)&#39;, &#39;Incident at Loch Ness (2004)&#39;, &#39;Incognito (1997)&#39;, &#39;Inconvenient Truth, An (2006)&#39;, &#39;Incredible Burt Wonderstone, The (2013)&#39;, &#39;Incredible Hulk, The (2008)&#39;, &#39;Incredible Journey, The (1963)&#39;, &#39;Incredible Mr. Limpet, The (1964)&#39;, &#39;Incredible Shrinking Man, The (1957)&#39;, &#39;Incredible Shrinking Woman, The (1981)&#39;, &#39;Incredibles 2 (2018)&#39;, &#39;Incredibles, The (2004)&#39;, &#39;Incredibly True Adventure of Two Girls in Love, The (1995)&#39;, &#39;Indecent Proposal (1993)&#39;, &#39;Independence Day (a.k.a. ID4) (1996)&#39;, &#39;Independence Day: Resurgence (2016)&#39;, &#39;Indestructible Man (1956)&#39;, &#39;Indian Summer (1993)&#39;, &#39;Indian Summer (a.k.a. Alive &amp; Kicking) (1996)&#39;, &#39;Indian in the Cupboard, The (1995)&#39;, &#39;Indiana Jones and the Kingdom of the Crystal Skull (2008)&#39;, &#39;Indiana Jones and the Last Crusade (1989)&#39;, &#39;Indiana Jones and the Temple of Doom (1984)&#39;, &#39;Indie Game: The Movie (2012)&#39;, &#39;Indignation (2016)&#39;, &#39;Indiscreet (1958)&#39;, &#39;Indochine (1992)&#39;, &#39;Inescapable (2012)&#39;, &#39;Infamous (2006)&#39;, &#39;Infernal Affairs (Mou gaan dou) (2002)&#39;, &#39;Infernal Affairs 2 (Mou gaan dou II) (2003)&#39;, &#39;Inferno (1980)&#39;, &#39;Inferno (2016)&#39;, &#39;Infini (2015)&#39;, &#39;Infinity (1996)&#39;, &#39;Informant!, The (2009)&#39;, &#39;Inglorious Bastards (Quel maledetto treno blindato) (1978)&#39;, &#39;Inglourious Basterds (2009)&#39;, &#39;Inhale (2010)&#39;, &#39;Inherent Vice (2014)&#39;, &#39;Inherit the Wind (1960)&#39;, &#39;Inhuman Resources (Redd Inc.) (2012)&#39;, &#39;Ink (2009)&#39;, &#39;Inkheart (2008)&#39;, &#39;Inkwell, The (1994)&#39;, &#39;Inland Empire (2006)&#39;, &#39;Innerspace (1987)&#39;, &#39;Innkeepers, The (2011)&#39;, &#39;Innocent Man, An (1989)&#39;, &#34;Inside (À l&#39;intérieur) (2007)&#34;, &#39;Inside Job (2010)&#39;, &#39;Inside Llewyn Davis (2013)&#39;, &#39;Inside Man (2006)&#39;, &#39;Inside Out (2015)&#39;, &#39;Insider, The (1999)&#39;, &#39;Insidious (2010)&#39;, &#39;Insidious: Chapter 2 (2013)&#39;, &#39;Insidious: Chapter 3 (2015)&#39;, &#39;Insidious: The Last Key (2018)&#39;, &#39;Insomnia (1997)&#39;, &#39;Insomnia (2002)&#39;, &#39;Inspector Gadget (1999)&#39;, &#39;Inspector General, The (1949)&#39;, &#39;Instinct (1999)&#39;, &#39;Insurgent (2015)&#39;, &#39;Intact (Intacto) (2001)&#39;, &#39;Interiors (1978)&#39;, &#39;Intermission (2003)&#39;, &#39;International, The (2009)&#39;, &#34;Internet&#39;s Own Boy: The Story of Aaron Swartz, The (2014)&#34;, &#39;Internship, The (2013)&#39;, &#39;Interpreter, The (2005)&#39;, &#39;Interstate 60 (2002)&#39;, &#39;Interstellar (2014)&#39;, &#39;Interview (2007)&#39;, &#39;Interview with the Vampire: The Vampire Chronicles (1994)&#39;, &#39;Intervista (1987)&#39;, &#39;Intimate Strangers (Confidences trop intimes) (2004)&#39;, &#39;Into Eternity (2010)&#39;, &#39;Into the Abyss (2011)&#39;, &#39;Into the Arms of Strangers: Stories of the Kindertransport (2000)&#39;, &#39;Into the Blue (2005)&#39;, &#39;Into the Forest (2015)&#39;, &#34;Into the Forest of Fireflies&#39; Light (2011)&#34;, &#39;Into the Grizzly Maze (2015)&#39;, &#39;Into the Wild (2007)&#39;, &#39;Into the Woods (1991)&#39;, &#39;Into the Woods (2014)&#39;, &#39;Intolerable Cruelty (2003)&#39;, &#34;Intolerance: Love&#39;s Struggle Throughout the Ages (1916)&#34;, &#39;Intouchables (2011)&#39;, &#39;Invasion of the Body Snatchers (1956)&#39;, &#39;Invasion of the Body Snatchers (1978)&#39;, &#39;Invasion, The (2007)&#39;, &#39;Inventing the Abbotts (1997)&#39;, &#39;Invention of Lying, The (2009)&#39;, &#39;Investigation Held by Kolobki (1986)&#39;, &#39;Investigation of a Citizen Above Suspicion (Indagine su un cittadino al di sopra di ogni sospetto) (1970)&#39;, &#39;Invictus (2009)&#39;, &#39;Invincible (2001)&#39;, &#39;Invincible (2006)&#39;, &#39;Invincible Iron Man, The (2007)&#39;, &#39;Invincible Shaolin (1978)&#39;, &#39;Invisible Man Returns, The (1940)&#39;, &#39;Invisible Man, The (1933)&#39;, &#39;Invisible, The (2007)&#39;, &#39;Ip Man (2008)&#39;, &#39;Ip Man 2 (2010)&#39;, &#39;Ip Man 3 (2015)&#39;, &#39;Ipcress File, The (1965)&#39;, &#39;Iris (2001)&#39;, &#39;Irma la Douce (1963)&#39;, &#39;Iron Eagle (1986)&#39;, &#39;Iron Eagle II (1988)&#39;, &#39;Iron Eagle IV (1995)&#39;, &#39;Iron Giant, The (1999)&#39;, &#39;Iron Lady, The (2011)&#39;, &#39;Iron Man &amp; Hulk: Heroes United (2013)&#39;, &#39;Iron Man (1931)&#39;, &#39;Iron Man (2008)&#39;, &#39;Iron Man 2 (2010)&#39;, &#39;Iron Man 3 (2013)&#39;, &#39;Iron Monkey (Siu nin Wong Fei-hung ji: Tit Ma Lau) (1993)&#39;, &#39;Iron Sky (2012)&#39;, &#39;Iron Soldier (2010)&#39;, &#39;Iron Will (1994)&#39;, &#39;Irony of Fate, or Enjoy Your Bath! (Ironiya sudby, ili S legkim parom!) (1975)&#39;, &#39;Irrational Man (2015)&#39;, &#39;Irreversible (Irréversible) (2002)&#39;, &#39;Ishtar (1987)&#39;, &#39;Island of Dr. Moreau, The (1996)&#39;, &#39;Island, The (2005)&#39;, &#39;Isle of Dogs (2018)&#39;, &#39;It (1990)&#39;, &#39;It (2017)&#39;, &#39;It Came from Hollywood (1982)&#39;, &#39;It Came from Outer Space (1953)&#39;, &#34;It Can&#39;t Be! (1975)&#34;, &#39;It Comes at Night (2017)&#39;, &#39;It Could Happen to You (1994)&#39;, &#39;It Follows (2014)&#39;, &#39;It Happened One Night (1934)&#39;, &#39;It Happened on Fifth Avenue (1947)&#39;, &#39;It Might Get Loud (2008)&#39;, &#39;It Runs in the Family (2003)&#39;, &#39;It Takes Two (1995)&#39;, &#34;It&#39;s All Gone Pete Tong (2004)&#34;, &#34;It&#39;s Complicated (2009)&#34;, &#34;It&#39;s Kind of a Funny Story (2010)&#34;, &#34;It&#39;s My Party (1996)&#34;, &#34;It&#39;s Pat (1994)&#34;, &#34;It&#39;s Such a Beautiful Day (2012)&#34;, &#34;It&#39;s a Boy Girl Thing (2006)&#34;, &#34;It&#39;s a Mad, Mad, Mad, Mad World (1963)&#34;, &#34;It&#39;s a Very Merry Muppet Christmas Movie (2002)&#34;, &#34;It&#39;s a Wonderful Life (1946)&#34;, &#34;It&#39;s the Great Pumpkin, Charlie Brown (1966)&#34;, &#39;Italian Job, The (1969)&#39;, &#39;Italian Job, The (2003)&#39;, &#39;Italian for Beginners (Italiensk for begyndere) (2000)&#39;, &#39;Itty Bitty Titty Committee (2007)&#39;, &#39;Ivan Vasilievich: Back to the Future (Ivan Vasilievich menyaet professiyu) (1973)&#39;, &#34;Ivan&#39;s Childhood (a.k.a. My Name is Ivan) (Ivanovo detstvo) (1962)&#34;, &#39;J. Edgar (2011)&#39;, &#39;JCVD (2008)&#39;, &#39;JFK (1991)&#39;, &#39;Jabberwocky (1977)&#39;, &#39;Jack (1996)&#39;, &#39;Jack Frost (1998)&#39;, &#39;Jack Reacher (2012)&#39;, &#39;Jack Reacher: Never Go Back (2016)&#39;, &#39;Jack Ryan: Shadow Recruit (2014)&#39;, &#39;Jack Whitehall: At Large (2017)&#39;, &#39;Jack and Jill (2011)&#39;, &#39;Jack and Sarah (1995)&#39;, &#39;Jack the Bear (1993)&#39;, &#39;Jack the Giant Slayer (2013)&#39;, &#39;Jack-Jack Attack (2005)&#39;, &#39;Jackal, The (1997)&#39;, &#39;Jackass 2.5 (2007)&#39;, &#39;Jackass 3.5 (2011)&#39;, &#39;Jackass 3D (2010)&#39;, &#39;Jackass Number Two (2006)&#39;, &#39;Jackass Presents: Bad Grandpa (2013)&#39;, &#39;Jackass: The Movie (2002)&#39;, &#39;Jacket, The (2005)&#39;, &#39;Jackie Brown (1997)&#39;, &#34;Jacob&#39;s Ladder (1990)&#34;, &#39;Jade (1995)&#39;, &#39;Jagged Edge (1985)&#39;, &#39;Jakob the Liar (1999)&#39;, &#39;Jalla! Jalla! (2000)&#39;, &#39;Jamaica Inn (1939)&#39;, &#39;James and the Giant Peach (1996)&#39;, &#34;Jane Austen&#39;s Mafia! (1998)&#34;, &#39;Jane Eyre (1944)&#39;, &#39;Jane Eyre (1970)&#39;, &#39;Jane Eyre (1996)&#39;, &#39;Jane Eyre (2011)&#39;, &#39;Janie Jones (2010)&#39;, &#39;January Man, The (1989)&#39;, &#39;Japanese Story (2003)&#39;, &#39;Jarhead (2005)&#39;, &#39;Jason Bourne (2016)&#39;, &#39;Jason X (2002)&#39;, &#39;Jason and the Argonauts (1963)&#39;, &#34;Jason&#39;s Lyric (1994)&#34;, &#39;Jawbreaker (1999)&#39;, &#39;Jaws (1975)&#39;, &#39;Jaws 2 (1978)&#39;, &#39;Jaws 3-D (1983)&#39;, &#39;Jaws: The Revenge (1987)&#39;, &#39;Jay and Silent Bob Strike Back (2001)&#39;, &#39;Jazz Singer, The (1927)&#39;, &#39;Jean de Florette (1986)&#39;, &#39;Jeepers Creepers (2001)&#39;, &#39;Jeepers Creepers 2 (2003)&#39;, &#39;Jeff Dunham: All Over the Map (2014)&#39;, &#39;Jeff Ross Roasts Criminals: Live at Brazos County Jail (2015)&#39;, &#39;Jeff Ross Roasts the Border (2017)&#39;, &#39;Jeff, Who Lives at Home (2012)&#39;, &#39;Jefferson in Paris (1995)&#39;, &#39;Jeffrey (1995)&#39;, &#39;Jennifer 8 (1992)&#39;, &#34;Jennifer&#39;s Body (2009)&#34;, &#39;Jeremiah Johnson (1972)&#39;, &#39;Jerk, The (1979)&#39;, &#39;Jerky Boys, The (1995)&#39;, &#39;Jerry Maguire (1996)&#39;, &#39;Jersey Boys (2014)&#39;, &#39;Jersey Girl (2004)&#39;, &#39;Jesus Camp (2006)&#39;, &#39;Jesus Christ Superstar (1973)&#39;, &#39;Jesus Christ Vampire Hunter (2001)&#39;, &#39;Jesus of Montreal (Jésus de Montréal) (1989)&#39;, &#34;Jesus&#39; Son (1999)&#34;, &#34;Jet Li&#39;s Fearless (Huo Yuan Jia) (2006)&#34;, &#39;Jetsons: The Movie (1990)&#39;, &#39;Jetée, La (1962)&#39;, &#39;Jewel of the Nile, The (1985)&#39;, &#39;Jezebel (1938)&#39;, &#39;Jim &amp; Andy: The Great Beyond (2017)&#39;, &#39;Jim Gaffigan: Cinco (2017)&#39;, &#39;Jim Jefferies: BARE (2014)&#39;, &#39;Jim Jefferies: Freedumb (2016)&#39;, &#39;Jim Jefferies: Fully Functional (EPIX) (2012)&#39;, &#39;Jim Jefferies: I Swear to God (2009)&#39;, &#39;Jim Norton: American Degenerate (2013)&#39;, &#39;Jimi: All Is by My Side (2013)&#39;, &#39;Jimmy Carr: Making People Laugh (2010)&#39;, &#39;Jimmy Carr: Telling Jokes (2009)&#39;, &#39;Jimmy Hollywood (1994)&#39;, &#39;Jimmy Neutron: Boy Genius (2001)&#39;, &#39;Jin Roh: The Wolf Brigade (Jin-Rô) (1998)&#39;, &#39;Jingle All the Way (1996)&#39;, &#39;Jiro Dreams of Sushi (2011)&#39;, &#39;Jobs (2013)&#39;, &#39;Joe Dirt (2001)&#39;, &#39;Joe Dirt 2: Beautiful Loser (2015)&#39;, &#34;Joe Gould&#39;s Secret (2000)&#34;, &#39;Joe Rogan: Live (2006)&#39;, &#39;Joe Rogan: Triggered (2016)&#39;, &#39;Joe Somebody (2001)&#39;, &#39;Joe Versus the Volcano (1990)&#39;, &#34;Joe&#39;s Apartment (1996)&#34;, &#39;John Adams (2008)&#39;, &#39;John Carter (2012)&#39;, &#39;John Dies at the End (2012)&#39;, &#39;John From (2015)&#39;, &#39;John Mulaney: New In Town (2012)&#39;, &#39;John Mulaney: The Comeback Kid (2015)&#39;, &#39;John Q (2002)&#39;, &#39;John Tucker Must Die (2006)&#39;, &#39;John Wick (2014)&#39;, &#39;John Wick: Chapter Two (2017)&#39;, &#39;Johnny Be Good (1988)&#39;, &#39;Johnny Belinda (1948)&#39;, &#39;Johnny Dangerously (1984)&#39;, &#39;Johnny Eager (1942)&#39;, &#39;Johnny English (2003)&#39;, &#39;Johnny English Reborn (2011)&#39;, &#39;Johnny Express (2014)&#39;, &#39;Johnny Handsome (1989)&#39;, &#39;Johnny Mnemonic (1995)&#39;, &#39;Johnny Stecchino (1991)&#39;, &#39;Joint Security Area (Gongdong gyeongbi guyeok JSA) (2000)&#39;, &#39;Jolson Story, The (1946)&#39;, &#39;Jon Stewart Has Left the Building (2015)&#39;, &#39;Jonah Hex (2010)&#39;, &#34;Jonah Who Will Be 25 in the Year 2000 (Jonas qui aura 25 ans en l&#39;an 2000) (1976)&#34;, &#39;Jonah: A VeggieTales Movie (2002)&#39;, &#39;Joneses, The (2009)&#39;, &#39;Jonestown: The Life and Death of Peoples Temple (2006)&#39;, &#39;Josie and the Pussycats (2001)&#39;, &#39;Journey 2: The Mysterious Island (2012)&#39;, &#39;Journey of Natty Gann, The (1985)&#39;, &#39;Journey to the Center of the Earth (1959)&#39;, &#39;Journey to the Center of the Earth (2008)&#39;, &#39;Journey to the West: Conquering the Demons (Daai wa sai you chi Chui mo chun kei) (2013)&#39;, &#39;Journeys with George (2002)&#39;, &#39;Joy (2015)&#39;, &#39;Joy Luck Club, The (1993)&#39;, &#39;Joy Ride (2001)&#39;, &#39;Joyeux Noël (Merry Christmas) (2005)&#39;, &#39;Joyful Noise (2012)&#39;, &#39;Ju Dou (1990)&#39;, &#39;Ju-on: The Curse (2000)&#39;, &#39;Ju-on: The Grudge (2002)&#39;, &#39;Jubilee (1977)&#39;, &#39;Judd Apatow: The Return (2017)&#39;, &#39;Jude (1996)&#39;, &#39;Judge Dredd (1995)&#39;, &#39;Judge, The (2014)&#39;, &#39;Judgment Night (1993)&#39;, &#39;Judgment at Nuremberg (1961)&#39;, &#39;Juice (1992)&#39;, &#39;Jules and Jim (Jules et Jim) (1961)&#39;, &#39;Julia (1977)&#39;, &#39;Julia (2014)&#39;, &#39;Julie &amp; Julia (2009)&#39;, &#39;Julien Donkey-Boy (1999)&#39;, &#39;Juliet of the Spirits (Giulietta degli spiriti) (1965)&#39;, &#39;Jumanji (1995)&#39;, &#39;Jumanji: Welcome to the Jungle (2017)&#39;, &#39;Jump In! (2007)&#39;, &#39;Jump Tomorrow (2001)&#39;, &#39;Jumper (2008)&#39;, &#34;Jumpin&#39; Jack Flash (1986)&#34;, &#39;Junebug (2005)&#39;, &#39;Jungle Book 2, The (2003)&#39;, &#39;Jungle Book, The (1967)&#39;, &#39;Jungle Book, The (1994)&#39;, &#39;Jungle Fever (1991)&#39;, &#39;Jungle2Jungle (a.k.a. Jungle 2 Jungle) (1997)&#39;, &#39;Junior (1994)&#39;, &#39;Junior and Karlson (1968)&#39;, &#39;Juno (2007)&#39;, &#39;Jupiter Ascending (2015)&#39;, &#34;Jupiter&#39;s Wife (1994)&#34;, &#39;Jurassic Park (1993)&#39;, &#39;Jurassic Park III (2001)&#39;, &#39;Jurassic World (2015)&#39;, &#39;Jurassic World: Fallen Kingdom (2018)&#39;, &#39;Juror, The (1996)&#39;, &#39;Jury Duty (1995)&#39;, &#39;Just Before I Go (2014)&#39;, &#39;Just Cause (1995)&#39;, &#39;Just Eat It: A Food Waste Story (2014)&#39;, &#39;Just Friends (2005)&#39;, &#39;Just Go with It (2011)&#39;, &#39;Just Jim (2015)&#39;, &#39;Just Like Heaven (2005)&#39;, &#39;Just Married (2003)&#39;, &#39;Just My Luck (2006)&#39;, &#39;Just One of the Guys (1985)&#39;, &#39;Just Visiting (2001)&#39;, &#39;Justice League (2017)&#39;, &#39;Justice League: Crisis on Two Earths (2010)&#39;, &#39;Justice League: Doom (2012) &#39;, &#39;Justice League: The New Frontier (2008) &#39;, &#39;Justin and the Knights of Valour (2013)&#39;, &#39;Juwanna Mann (2002)&#39;, &#39;K-19: The Widowmaker (2002)&#39;, &#39;K-9 (1989)&#39;, &#39;K-PAX (2001)&#39;, &#39;Kagemusha (1980)&#39;, &#39;Kalifornia (1993)&#39;, &#39;Kama Sutra: A Tale of Love (1996)&#39;, &#39;Kandahar (Safar e Ghandehar) (2001)&#39;, &#39;Kangaroo Jack (2003)&#39;, &#39;Kansas City (1996)&#39;, &#39;Karate Bullfighter (1975)&#39;, &#39;Karate Kid, Part II, The (1986)&#39;, &#39;Karate Kid, Part III, The (1989)&#39;, &#39;Karate Kid, The (1984)&#39;, &#39;Karate Kid, The (2010)&#39;, &#39;Karlson Returns (1970)&#39;, &#39;Kaspar Hauser (1993)&#39;, &#39;Kate &amp; Leopold (2001)&#39;, &#39;Kazaam (1996)&#39;, &#39;Keanu (2016)&#39;, &#39;Keep the River on Your Right: A Modern Cannibal Tale (2000)&#39;, &#39;Keeping Up with the Joneses (2016)&#39;, &#39;Keeping the Faith (2000)&#39;, &#34;Kelly&#39;s Heroes (1970)&#34;, &#39;Ken Park (2002)&#39;, &#39;Kenny &amp; Company (1976)&#39;, &#39;Kentucky Fried Movie, The (1977)&#39;, &#34;Kevin Hart: I&#39;m a Grown Little Man (2009)&#34;, &#39;Kevin Hart: Laugh at My Pain (2011)&#39;, &#39;Kevin Smith: Too Fat For 40 (2010)&#39;, &#39;Key Largo (1948)&#39;, &#39;Keys to the House, The (Chiavi di casa, Le) (2004)&#39;, &#39;Kick-Ass (2010)&#39;, &#39;Kick-Ass 2 (2013)&#39;, &#39;Kickboxer (1989)&#39;, &#39;Kickboxer 2: The Road Back (1991)&#39;, &#39;Kickin It Old Skool (2007)&#39;, &#39;Kicking &amp; Screaming (2005)&#39;, &#39;Kicking Off (2016)&#39;, &#39;Kicking and Screaming (1995)&#39;, &#39;Kid Stays in the Picture, The (2002)&#39;, &#34;Kid in King Arthur&#39;s Court, A (1995)&#34;, &#34;Kid&#39;s Story (2003)&#34;, &#39;Kid, The (1921)&#39;, &#39;Kid, The (2000)&#39;, &#39;Kidnapping Mr. Heineken (2015)&#39;, &#39;Kidnapping, Caucasian Style (Kavkazskaya plennitsa) (1967)&#39;, &#39;Kids (1995)&#39;, &#39;Kids Are All Right, The (2010)&#39;, &#39;Kids in the Hall: Brain Candy (1996)&#39;, &#39;Kika (1993)&#39;, &#34;Kiki&#39;s Delivery Service (Majo no takkyûbin) (1989)&#34;, &#39;Kikujiro (Kikujirô no natsu) (1999)&#39;, &#39;Kill Bill: Vol. 1 (2003)&#39;, &#39;Kill Bill: Vol. 2 (2004)&#39;, &#39;Kill Command (2016)&#39;, &#39;Kill List (2011)&#39;, &#39;Kill Me Three Times (2014)&#39;, &#39;Kill the Irishman (2011)&#39;, &#39;Kill the Messenger (2014)&#39;, &#39;Kill! (Kiru) (1968)&#39;, &#39;Killer Elite (2011)&#39;, &#39;Killer Joe (2011)&#39;, &#39;Killer Klowns from Outer Space (1988)&#39;, &#39;Killer Movie (2008)&#39;, &#39;Killer Shrews, The (1959)&#39;, &#34;Killer&#39;s Kiss (1955)&#34;, &#39;Killer, The (Die xue shuang xiong) (1989)&#39;, &#39;Killers (2010)&#39;, &#39;Killers, The (1946)&#39;, &#39;Killing Fields, The (1984)&#39;, &#39;Killing Me Softly (2002)&#39;, &#39;Killing Them Softly (2012)&#39;, &#39;Killing Zoe (1994)&#39;, &#39;Killing, The (1956)&#39;, &#39;Killshot (2008)&#39;, &#39;Kin-Dza-Dza! (1986)&#39;, &#39;Kind Hearts and Coronets (1949)&#39;, &#39;Kindergarten Cop (1990)&#39;, &#39;Kindergarten Cop 2 (2016)&#39;, &#39;Kindred, The (1986)&#39;, &#39;King Arthur (2004)&#39;, &#39;King Kong (1933)&#39;, &#39;King Kong (1976)&#39;, &#39;King Kong (2005)&#39;, &#39;King Kong Lives (1986)&#39;, &#39;King Kong vs. Godzilla (Kingukongu tai Gojira) (1962)&#39;, &#39;King Ralph (1991)&#39;, &#34;King Solomon&#39;s Mines (1937)&#34;, &#34;King Solomon&#39;s Mines (1950)&#34;, &#34;King Solomon&#39;s Mines (1985)&#34;, &#39;King and I, The (1956)&#39;, &#39;King and I, The (1999)&#39;, &#39;King in New York, A (1957)&#39;, &#39;King of California (2007)&#39;, &#39;King of Comedy (Hei kek ji wong) (1999)&#39;, &#39;King of Comedy, The (1983)&#39;, &#39;King of Hearts (1966)&#39;, &#39;King of Kings (1961)&#39;, &#39;King of Kong, The (2007)&#39;, &#39;King of Masks, The (Bian Lian) (1996)&#39;, &#39;King of New York (1990)&#39;, &#34;King&#39;s Ransom (2005)&#34;, &#34;King&#39;s Speech, The (2010)&#34;, &#39;Kingdom of Heaven (2005)&#39;, &#39;Kingdom, The (2007)&#39;, &#39;Kingpin (1996)&#39;, &#39;Kings of Summer, The (2013)&#39;, &#39;Kingsglaive: Final Fantasy XV (2016)&#39;, &#39;Kingsman: The Golden Circle (2017)&#39;, &#39;Kingsman: The Secret Service (2015)&#39;, &#39;Kinky Boots (2005)&#39;, &#39;Kinsey (2004)&#39;, &#39;Kirikou and the Sorceress (Kirikou et la sorcière) (1998)&#39;, &#39;Kiss Kiss Bang Bang (2005)&#39;, &#39;Kiss Me Deadly (1955)&#39;, &#39;Kiss Me Goodbye (1982)&#39;, &#39;Kiss Me Kate (1953)&#39;, &#39;Kiss Me, Guido (1997)&#39;, &#39;Kiss Me, Stupid (1964)&#39;, &#39;Kiss me Kismet (2006)&#39;, &#39;Kiss of Death (1995)&#39;, &#39;Kiss of the Dragon (2001)&#39;, &#39;Kiss of the Spider Woman (1985)&#39;, &#39;Kiss the Girls (1997)&#39;, &#39;Kissed (1996)&#39;, &#39;Kissing Jessica Stein (2001)&#39;, &#39;Kit Kittredge: An American Girl (2008)&#39;, &#39;Kitchen Stories (Salmer fra kjøkkenet) (2003)&#39;, &#39;Kite (2014)&#39;, &#39;Kite Runner, The (2007)&#39;, &#39;Kizumonogatari II: Passionate Blood (2016)&#39;, &#39;Kizumonogatari III: Cold Blood (2017)&#39;, &#39;Kizumonogatari Part 1: Tekketsu (2016)&#39;, &#39;Klute (1971)&#39;, &#39;Knife in the Water (Nóz w wodzie) (1962)&#39;, &#39;Knight and Day (2010)&#39;, &#34;Knight&#39;s Tale, A (2001)&#34;, &#39;Knights of Badassdom (2013)&#39;, &#39;Knock Knock (2015)&#39;, &#39;Knock Off (1998)&#39;, &#39;Knockaround Guys (2002)&#39;, &#39;Knocked Up (2007)&#39;, &#34;Knockin&#39; on Heaven&#39;s Door (1997)&#34;, &#39;Knot, The (2012)&#39;, &#39;Knowing (2009)&#39;, &#39;Kolya (Kolja) (1996)&#39;, &#39;Kong: Skull Island (2017)&#39;, &#39;Koyaanisqatsi (a.k.a. Koyaanisqatsi: Life Out of Balance) (1983)&#39;, &#39;Krabat (2008)&#39;, &#39;Kramer vs. Kramer (1979)&#39;, &#39;Krampus (2015)&#39;, &#39;Krays, The (1990)&#39;, &#34;Krippendorf&#39;s Tribe (1998)&#34;, &#39;Krull (1983)&#39;, &#39;Kubo and the Two Strings (2016)&#39;, &#39;Kuffs (1992)&#39;, &#39;Kull the Conqueror (1997)&#39;, &#39;Kundun (1997)&#39;, &#39;Kung Fu Hustle (Gong fu) (2004)&#39;, &#39;Kung Fu Panda (2008)&#39;, &#39;Kung Fu Panda 2 (2011)&#39;, &#39;Kung Fu Panda 3 (2016)&#39;, &#39;Kung Fu Panda: Secrets of the Furious Five (2008)&#39;, &#39;Kung Fu Panda: Secrets of the Masters (2011)&#39;, &#39;Kung Fury (2015)&#39;, &#39;Kung Pow: Enter the Fist (2002)&#39;, &#39;Kurt &amp; Courtney (1998)&#39;, &#39;Kurt Cobain: Montage of Heck (2015)&#39;, &#39;Kwaidan (Kaidan) (1964)&#39;, &#39;L.A. Confidential (1997)&#39;, &#39;L.A. Slasher (2015)&#39;, &#39;L.A. Story (1991)&#39;, &#39;L.I.E. (2001)&#39;, &#39;LBJ (2017)&#39;, &#39;LEGO Batman: The Movie - DC Heroes Unite (2013)&#39;, &#39;LEGO DC Super Hero Girls: Brain Drain (2017)&#39;, &#39;LOL (2012)&#39;, &#39;La Belle Verte (1996)&#39;, &#39;La Cérémonie (1995)&#39;, &#39;La La Land (2016)&#39;, &#39;La cravate (1957)&#39;, &#39;La vérité si je mens ! (1997)&#39;, &#39;Labyrinth (1986)&#39;, &#39;Ladder 49 (2004)&#39;, &#39;Ladies Man, The (2000)&#39;, &#39;Lady Bird (2017)&#39;, &#39;Lady Eve, The (1941)&#39;, &#39;Lady Jane (1986)&#39;, &#39;Lady Vanishes, The (1938)&#39;, &#39;Lady Vengeance (Sympathy for Lady Vengeance) (Chinjeolhan geumjassi) (2005)&#39;, &#34;Lady and the Duke, The (Anglaise et le duc, L&#39;) (2001)&#34;, &#39;Lady and the Tramp (1955)&#39;, &#39;Lady from Shanghai, The (1947)&#39;, &#39;Lady in White (a.k.a. The Mystery of the Lady in White) (1988)&#39;, &#39;Lady in the Water (2006)&#39;, &#39;Ladybird Ladybird (1994)&#39;, &#39;Ladybugs (1992)&#39;, &#39;Ladyhawke (1985)&#39;, &#39;Ladykillers, The (1955)&#39;, &#39;Ladykillers, The (2004)&#39;, &#39;Lagaan: Once Upon a Time in India (2001)&#39;, &#39;Laggies (2014)&#39;, &#39;Lake House, The (2006)&#39;, &#39;Lake Placid (1999)&#39;, &#39;Lakeview Terrace (2008)&#39;, &#39;Lamerica (1994)&#39;, &#39;Lammbock (2001)&#39;, &#39;Land Before Time III: The Time of the Great Giving (1995)&#39;, &#39;Land Before Time, The (1988)&#39;, &#39;Land That Time Forgot, The (1975)&#39;, &#39;Land and Freedom (Tierra y libertad) (1995)&#39;, &#39;Land of Plenty (Angst and Alienation in America) (2004)&#39;, &#39;Land of the Dead (2005)&#39;, &#39;Land of the Lost (2009)&#39;, &#39;Langoliers, The (1995)&#39;, &#39;Lantana (2001)&#39;, &#39;Laputa: Castle in the Sky (Tenkû no shiro Rapyuta) (1986)&#39;, &#39;Lara Croft Tomb Raider: The Cradle of Life (2003)&#39;, &#39;Lara Croft: Tomb Raider (2001)&#39;, &#39;Larger Than Life (1996)&#39;, &#39;Larry Crowne (2011)&#39;, &#39;Larry David: Curb Your Enthusiasm (1999)&#39;, &#39;Lars and the Real Girl (2007)&#39;, &#39;Lassie (1994)&#39;, &#39;Last Action Hero (1993)&#39;, &#39;Last Airbender, The (2010)&#39;, &#39;Last Boy Scout, The (1991)&#39;, &#39;Last Castle, The (2001)&#39;, &#39;Last Dance (1996)&#39;, &#39;Last Days (2005)&#39;, &#39;Last Days of Disco, The (1998)&#39;, &#39;Last Days, The (1998)&#39;, &#39;Last Detail, The (1973)&#39;, &#39;Last Dragon, The (1985)&#39;, &#39;Last Emperor, The (1987)&#39;, &#39;Last Exit to Brooklyn (1989)&#39;, &#39;Last Exorcism, The (2010)&#39;, &#39;Last Holiday (1950)&#39;, &#39;Last Holiday (2006)&#39;, &#39;Last House on the Left, The (1972)&#39;, &#39;Last Hurrah for Chivalry (Hao xia) (1979)&#39;, &#39;Last King of Scotland, The (2006)&#39;, &#39;Last Kiss, The (2006)&#39;, &#34;Last Kiss, The (Ultimo bacio, L&#39;) (2001)&#34;, &#39;Last Klezmer: Leopold Kozlowski, His Life and Music, The (1994)&#39;, &#39;Last Knights (2015)&#39;, &#39;Last Legion, The (2007)&#39;, &#39;Last Life in the Universe (Ruang rak noi nid mahasan) (2003)&#39;, &#39;Last Man Standing (1996)&#39;, &#34;Last Man on Earth, The (Ultimo uomo della Terra, L&#39;) (1964)&#34;, &#39;Last Metro, The (Dernier métro, Le) (1980)&#39;, &#39;Last Mimzy, The (2007)&#39;, &#39;Last Night (1998)&#39;, &#39;Last Orders (2001)&#39;, &#39;Last Picture Show, The (1971)&#39;, &#39;Last Samurai, The (2003)&#39;, &#39;Last Seduction, The (1994)&#39;, &#39;Last Shift (2014)&#39;, &#39;Last Song, The (2010)&#39;, &#39;Last Stand, The (2013)&#39;, &#39;Last Starfighter, The (1984)&#39;, &#39;Last Supper, The (1995)&#39;, &#39;Last Tango in Paris (Ultimo tango a Parigi) (1972)&#39;, &#39;Last Temptation of Christ, The (1988)&#39;, &#39;Last Train Home (2009)&#39;, &#39;Last Unicorn, The (1982)&#39;, &#39;Last Vegas (2013)&#39;, &#39;Last Waltz, The (1978)&#39;, &#39;Last Wave, The (1977)&#39;, &#39;Last Wedding, The (Kivenpyörittäjän kylä) (1995)&#39;, &#39;Last Winter, The (2006)&#39;, &#34;Last Year&#39;s Snow Was Falling (1983)&#34;, &#39;Last of the Dogmen (1995)&#39;, &#39;Last of the Mohicans, The (1992)&#39;, &#39;Late Marriage (Hatuna Meuheret) (2001)&#39;, &#39;Late Night Shopping (2001)&#39;, &#34;Late Night with Conan O&#39;Brien: The Best of Triumph the Insult Comic Dog (2004)&#34;, &#39;Late Shift, The (1996)&#39;, &#39;Latter Days (2003)&#39;, &#39;Laura (1944)&#39;, &#39;Laurel Canyon (2002)&#39;, &#39;Lavender Hill Mob, The (1951)&#39;, &#39;Law Abiding Citizen (2009)&#39;, &#39;Law of Desire (Ley del deseo, La) (1987)&#39;, &#39;Lawless (2012)&#39;, &#39;Lawnmower Man 2: Beyond Cyberspace (1996)&#39;, &#39;Lawnmower Man, The (1992)&#39;, &#39;Lawrence of Arabia (1962)&#39;, &#39;Laws of Attraction (2004)&#39;, &#39;Layer Cake (2004)&#39;, &#34;Le Maître d&#39;école (1981)&#34;, &#39;League of Extraordinary Gentlemen, The (a.k.a. LXG) (2003)&#39;, &#39;League of Ordinary Gentlemen, A (2004)&#39;, &#39;League of Their Own, A (1992)&#39;, &#39;Lean on Me (1989)&#39;, &#39;Leap Year (2010)&#39;, &#39;Leap of Faith (1992)&#39;, &#39;Leatherheads (2008)&#39;, &#39;Leave It to Beaver (1997)&#39;, &#39;Leaves of Grass (2009)&#39;, &#39;Leaving Las Vegas (1995)&#39;, &#39;Ledge, The (2011)&#39;, &#34;Lee Daniels&#39; The Butler (2013)&#34;, &#39;Left Behind: The Movie (2000)&#39;, &#39;Legal Eagles (1986)&#39;, &#39;Legally Blonde (2001)&#39;, &#39;Legally Blonde 2: Red, White &amp; Blonde (2003)&#39;, &#39;Legend (1985)&#39;, &#39;Legend (2015)&#39;, &#39;Legend No. 17 (2013)&#39;, &#34;Legend of 1900, The (a.k.a. The Legend of the Pianist on the Ocean) (Leggenda del pianista sull&#39;oceano) (1998)&#34;, &#39;Legend of Bagger Vance, The (2000)&#39;, &#39;Legend of Drunken Master, The (Jui kuen II) (1994)&#39;, &#39;Legend of Hell House, The (1973)&#39;, &#39;Legend of Rita, The (Stille nach dem Schuß, Die) (1999)&#39;, &#39;Legend of Sleepy Hollow, The (1949)&#39;, &#39;Legend of Sleepy Hollow, The (1980)&#39;, &#39;Legend of Zorro, The (2005)&#39;, &#34;Legend of the Guardians: The Owls of Ga&#39;Hoole (2010)&#34;, &#39;Legend, The (Legend of Fong Sai-Yuk, The) (Fong Sai Yuk) (1993)&#39;, &#39;Legends of the Fall (1994)&#39;, &#39;Legion (2010)&#39;, &#39;Legionnaire (1998)&#39;, &#39;Lemonade (2016)&#39;, &#34;Lemony Snicket&#39;s A Series of Unfortunate Events (2004)&#34;, &#39;Leningrad Cowboys Go America (1989)&#39;, &#39;Lenny (1974)&#39;, &#39;Leonard Part 6 (1987)&#39;, &#39;Leopard, The (Gattopardo, Il) (1963)&#39;, &#39;Leprechaun (1993)&#39;, &#39;Leprechaun 2 (1994)&#39;, &#39;Leprechaun 3 (1995)&#39;, &#39;Leprechaun 4: In Space (1997)&#39;, &#39;Less Than Zero (1987)&#39;, &#39;Lesson Faust (1994)&#39;, &#39;Let It Be Me (1995)&#39;, &#39;Let It Ride (1989)&#39;, &#39;Let It Snow (1999)&#39;, &#39;Let Me In (2010)&#39;, &#39;Let the Bullets Fly (2010)&#39;, &#39;Let the Right One In (Låt den rätte komma in) (2008)&#39;, &#34;Let&#39;s Be Cops (2014)&#34;, &#34;Let&#39;s Get Harry (1986)&#34;, &#34;Let&#39;s Go to Prison (2006)&#34;, &#39;Lethal Weapon (1987)&#39;, &#39;Lethal Weapon 2 (1989)&#39;, &#39;Lethal Weapon 3 (1992)&#39;, &#39;Lethal Weapon 4 (1998)&#39;, &#39;Letter to Three Wives, A (1949)&#39;, &#39;Letter, The (1940)&#39;, &#39;Letters from Iwo Jima (2006)&#39;, &#39;Letters to Juliet (2010)&#39;, &#39;Leviathan (2014)&#39;, &#39;Levity (2003)&#39;, &#39;Liability, The (2012)&#39;, &#39;Liam (2000)&#39;, &#39;Liar Liar (1997)&#39;, &#34;Liar&#39;s Autobiography: The Untrue Story of Monty Python&#39;s Graham Chapman, A (2012)&#34;, &#39;Libeled Lady (1936)&#39;, &#39;Liberal Arts (2012)&#39;, &#39;Libertine, The (2004)&#39;, &#39;Liberty Heights (1999)&#39;, &#39;Librarian, The: The Curse of the Judas Chalice (2008)&#39;, &#39;Librarian: Quest for the Spear, The (2004)&#39;, &#34;Librarian: Return to King Solomon&#39;s Mines, The (2006)&#34;, &#39;Libre et assoupi (2014)&#39;, &#39;Licence to Kill (1989)&#39;, &#39;License to Drive (1988)&#39;, &#39;License to Wed (2007)&#39;, &#39;Life (1999)&#39;, &#39;Life After Beth (2014)&#39;, &#39;Life Aquatic with Steve Zissou, The (2004)&#39;, &#39;Life Eternal (2015)&#39;, &#39;Life Is Beautiful (La Vita è bella) (1997)&#39;, &#39;Life Is a Long Quiet River (La vie est un long fleuve tranquille) (1988)&#39;, &#39;Life Less Ordinary, A (1997)&#39;, &#39;Life Partners (2014)&#39;, &#39;Life Stinks (1991)&#39;, &#39;Life and Death of Peter Sellers, The (2004)&#39;, &#39;Life and Debt (2001)&#39;, &#39;Life as We Know It (2010)&#39;, &#39;Life as a House (2001)&#39;, &#39;Life of David Gale, The (2003)&#39;, &#39;Life of Emile Zola, The (1937)&#39;, &#39;Life of Pi (2012)&#39;, &#39;Life or Something Like It (2002)&#39;, &#39;Life with Father (1947)&#39;, &#39;Life with Mikey (1993)&#39;, &#39;Life-Size (2000)&#39;, &#39;Lifeboat (1944)&#39;, &#39;Lifeforce (1985)&#39;, &#39;Lifeguard, The (2013)&#39;, &#39;Lifted (2006)&#39;, &#39;Light Years (Gandahar) (1988)&#39;, &#39;Lightning Jack (1994)&#39;, &#39;Lightning in a Bottle (2004)&#39;, &#39;Lights Out (2016)&#39;, &#39;Lights in the Dusk (Laitakaupungin valot) (2006)&#39;, &#39;Like Crazy (2011)&#39;, &#39;Like Father, Like Son (1987)&#39;, &#39;Like Mike (2002)&#39;, &#39;Like Stars on Earth (Taare Zameen Par) (2007)&#39;, &#39;Like Water for Chocolate (Como agua para chocolate) (1992)&#39;, &#39;Lilies of the Field (1963)&#39;, &#39;Lilo &amp; Stitch (2002)&#39;, &#39;Lilting (2014)&#39;, &#39;Lilya 4-Ever (Lilja 4-ever) (2002)&#39;, &#39;Limbo (1999)&#39;, &#39;Limelight (1952)&#39;, &#39;Limey, The (1999)&#39;, &#39;Limitless (2011)&#39;, &#39;Limits of Control, The (2009)&#39;, &#39;Lincoln (2012)&#39;, &#39;Lincoln Lawyer, The (2011)&#39;, &#39;Line King: The Al Hirschfeld Story, The (1996)&#39;, &#39;Lion (2016)&#39;, &#39;Lion King 1½, The (2004)&#39;, &#34;Lion King II: Simba&#39;s Pride, The (1998)&#34;, &#39;Lion King, The (1994)&#39;, &#39;Lion in Winter, The (1968)&#39;, &#39;Lionheart (1990)&#39;, &#39;Lions For Lambs (2007)&#39;, &#39;Liquid Truth (2017)&#39;, &#39;Little Ashes (2008)&#39;, &#39;Little Big League (1994)&#39;, &#39;Little Big Man (1970)&#39;, &#39;Little Big Soldier (Da bing xiao jiang) (2010)&#39;, &#39;Little Black Book (2004)&#39;, &#39;Little Boxes (2017)&#39;, &#39;Little Buddha (1993)&#39;, &#39;Little Caesar (1931)&#39;, &#39;Little Children (2006)&#39;, &#39;Little Darlings (1980)&#39;, &#39;Little Dieter Needs to Fly (1997)&#39;, &#39;Little Drummer Boy, The (1968)&#39;, &#39;Little Fockers (2010)&#39;, &#39;Little Foxes, The (1941)&#39;, &#39;Little Giants (1994)&#39;, &#39;Little Girl Who Lives Down the Lane, The (1976)&#39;, &#39;Little Lord Fauntleroy (1936)&#39;, &#39;Little Man (2006)&#39;, &#39;Little Man Tate (1991)&#39;, &#39;Little Mermaid, The (1989)&#39;, &#39;Little Miss Marker (1980)&#39;, &#39;Little Miss Sunshine (2006)&#39;, &#39;Little Monsters (1989)&#39;, &#39;Little Murders (1971)&#39;, &#39;Little Nemo: Adventures in Slumberland (1992)&#39;, &#39;Little Nicky (2000)&#39;, &#39;Little Nikita (1988)&#39;, &#39;Little Princess, A (1995)&#39;, &#39;Little Princess, The (1939)&#39;, &#39;Little Rascals, The (1994)&#39;, &#39;Little Shop of Horrors (1986)&#39;, &#39;Little Shop of Horrors, The (1960)&#39;, &#39;Little Vampire, The (2000)&#39;, &#39;Little Voice (1998)&#39;, &#39;Little Women (1933)&#39;, &#39;Little Women (1949)&#39;, &#39;Little Women (1994)&#39;, &#39;Live Flesh (Carne trémula) (1997)&#39;, &#39;Live Free or Die Hard (2007)&#39;, &#39;Live Nude Girls (1995)&#39;, &#39;Live Wire (1992)&#39;, &#39;Live and Let Die (1973)&#39;, &#39;Lives of Others, The (Das leben der Anderen) (2006)&#39;, &#39;Living Daylights, The (1987)&#39;, &#39;Living Out Loud (1998)&#39;, &#39;Living in Oblivion (1995)&#39;, &#39;Lizzie McGuire Movie, The (2003)&#39;, &#34;Loaded Weapon 1 (National Lampoon&#39;s Loaded Weapon 1) (1993)&#34;, &#39;Local Hero (1983)&#39;, &#39;Lock, Stock &amp; Two Smoking Barrels (1998)&#39;, &#39;Locke (2013)&#39;, &#39;Lockout (2012)&#39;, &#39;Lodger: A Story of the London Fog, The (1927)&#39;, &#39;Logan (2017)&#39;, &#39;Logan Lucky (2017)&#39;, &#34;Logan&#39;s Run (1976)&#34;, &#39;Lola Montès (1955)&#39;, &#39;Lola Versus (2012)&#39;, &#39;Lolita (1962)&#39;, &#39;Lolita (1997)&#39;, &#39;London (2005)&#39;, &#39;London Boulevard (2010)&#39;, &#39;London Has Fallen (2016)&#39;, &#39;London Town (2016)&#39;, &#39;Lone Ranger, The (2013)&#39;, &#39;Lone Star (1996)&#39;, &#39;Lone Survivor (2013)&#39;, &#39;Lonely Are the Brave (1962)&#39;, &#39;Lonely Guy, The (1984)&#39;, &#39;Lonesome Dove (1989)&#39;, &#34;Long Day&#39;s Journey Into Night (1962)&#34;, &#39;Long Good Friday, The (1980)&#39;, &#39;Long Goodbye, The (1973)&#39;, &#39;Long Kiss Goodnight, The (1996)&#39;, &#39;Long Live Ghosts! (1977)&#39;, &#34;Long Night&#39;s Journey Into Day (2000)&#34;, &#39;Long Walk Home, The (1990)&#39;, &#39;Long, Hot Summer, The (1958)&#39;, &#39;Longest Day, The (1962)&#39;, &#39;Longest Yard, The (1974)&#39;, &#39;Longest Yard, The (2005)&#39;, &#34;Look Who&#39;s Talking (1989)&#34;, &#34;Look Who&#39;s Talking Now (1993)&#34;, &#34;Look Who&#39;s Talking Too (1990)&#34;, &#39;Looker (1981)&#39;, &#39;Looking for Comedy in the Muslim World (2005)&#39;, &#39;Looking for Richard (1996)&#39;, &#39;Lookout, The (2007)&#39;, &#39;Looney Tunes: Back in Action (2003)&#39;, &#39;Looper (2012)&#39;, &#39;Loose Cannons (1990)&#39;, &#39;Lord of Illusions (1995)&#39;, &#39;Lord of War (2005)&#39;, &#39;Lord of the Flies (1963)&#39;, &#39;Lord of the Flies (1990)&#39;, &#39;Lord of the Rings, The (1978)&#39;, &#39;Lord of the Rings: The Fellowship of the Ring, The (2001)&#39;, &#39;Lord of the Rings: The Return of the King, The (2003)&#39;, &#39;Lord of the Rings: The Two Towers, The (2002)&#39;, &#39;Lords of Dogtown (2005)&#39;, &#39;Lords of Flatbush, The (1974)&#39;, &#39;Lords of Salem, The (2012)&#39;, &#34;Lorenzo&#39;s Oil (1992)&#34;, &#39;Los Angeles Plays Itself (2003)&#39;, &#39;Loser (1991)&#39;, &#39;Loser (2000)&#39;, &#39;Losers, The (2010)&#39;, &#34;Losin&#39; It (1983)&#34;, &#39;Losing Isaiah (1995)&#39;, &#39;Loss of Sexual Innocence, The (1999)&#39;, &#39;Lost &amp; Found (1999)&#39;, &#39;Lost Boys, The (1987)&#39;, &#39;Lost Highway (1997)&#39;, &#39;Lost Horizon (1937)&#39;, &#39;Lost Skeleton of Cadavra, The (2002)&#39;, &#39;Lost Weekend, The (1945)&#39;, &#39;Lost World: Jurassic Park, The (1997)&#39;, &#39;Lost and Delirious (2001)&#39;, &#39;Lost in America (1985)&#39;, &#39;Lost in Austen (2008)&#39;, &#39;Lost in La Mancha (2002)&#39;, &#39;Lost in Space (1998)&#39;, &#39;Lost in Translation (2003)&#39;, &#39;Lost in the Sun (2015)&#39;, &#39;Lot Like Love, A (2005)&#39;, &#39;Louis C.K.: Chewed Up (2008)&#39;, &#39;Louis C.K.: Hilarious (2010)&#39;, &#39;Louis C.K.: Live at The Comedy Store (2015)&#39;, &#39;Louis C.K.: Live at the Beacon Theater (2011)&#39;, &#39;Louis C.K.: Oh My God (2013)&#39;, &#39;Louis C.K.: Shameless (2007)&#39;, &#39;Louis Theroux: Law &amp; Disorder (2008)&#39;, &#39;Love &amp; Human Remains (1993)&#39;, &#39;Love &amp; Mercy (2014)&#39;, &#39;Love (2015)&#39;, &#39;Love Actually (2003)&#39;, &#39;Love Affair (1939)&#39;, &#39;Love Affair (1994)&#39;, &#39;Love Bug, The (1969)&#39;, &#39;Love Crazy (1941)&#39;, &#39;Love Exposure (Ai No Mukidashi) (2008)&#39;, &#39;Love Guru, The (2008)&#39;, &#39;Love Is a Many-Splendored Thing (1955)&#39;, &#39;Love Is the Devil (1998)&#39;, &#39;Love Jones (1997)&#39;, &#34;Love Lasts Three Years (L&#39;amour dure trois ans) (2011)&#34;, &#39;Love Letter, The (1999)&#39;, &#39;Love Live! The School Idol Movie (2015)&#39;, &#39;Love Liza (2002)&#39;, &#34;Love Me If You Dare (Jeux d&#39;enfants) (2003)&#34;, &#39;Love Me Tender (1956)&#39;, &#39;Love Potion #9 (1992)&#39;, &#39;Love Serenade (1996)&#39;, &#39;Love Song for Bobby Long, A (2004)&#39;, &#39;Love Story (1970)&#39;, &#39;Love and Basketball (2000)&#39;, &#39;Love and Death (1975)&#39;, &#39;Love and Death on Long Island (1997)&#39;, &#39;Love and Other Catastrophes (1996)&#39;, &#39;Love and Other Disasters (2006)&#39;, &#39;Love and Other Drugs (2010)&#39;, &#39;Love and Pigeons (1985)&#39;, &#39;Love and a .45 (1994)&#39;, &#39;Love at First Bite (1979)&#39;, &#39;Love in the Afternoon (1957)&#39;, &#34;Love&#39;s Labour&#39;s Lost (2000)&#34;, &#39;Love, Rosie (2014)&#39;, &#39;Love, Simon (2018)&#39;, &#39;Loved Ones, The (2009)&#39;, &#39;Lovely &amp; Amazing (2001)&#39;, &#39;Lovely Bones, The (2009)&#39;, &#39;Lover Come Back (1961)&#39;, &#34;Lover, The (Amant, L&#39;) (1992)&#34;, &#39;Loverboy (1989)&#39;, &#39;Lovers &amp; Leavers (Kuutamolla) (2002)&#39;, &#39;Lovers of the Arctic Circle, The (Los Amantes del Círculo Polar) (1998)&#39;, &#39;Lovesick (2014)&#39;, &#39;Loving Vincent (2017)&#39;, &#39;Low Down Dirty Shame, A (1994)&#39;, &#39;Lucas (1986)&#39;, &#39;Luck by Chance (2009)&#39;, &#39;Lucky Break (2001)&#39;, &#39;Lucky Number Slevin (2006)&#39;, &#39;Lucky One, The (2012)&#39;, &#39;Lucky You (2007)&#39;, &#39;Lucy (2014)&#39;, &#39;Lumberjack Man (2015)&#39;, &#39;Lumumba (2000)&#39;, &#39;Luna Papa (1999)&#39;, &#39;Lupin III: The Castle Of Cagliostro (Rupan sansei: Kariosutoro no shiro) (1979)&#39;, &#39;Lust for Life (1956)&#39;, &#39;Lust, Caution (Se, jie) (2007)&#39;, &#39;Luther (2003)&#39;, &#39;Luxo Jr. (1986)&#39;, &#39;Luzhin Defence, The (2000)&#39;, &#39;Lynne Koplitz: Hormonal Beast (2017)&#39;, &#39;Léon: The Professional (a.k.a. The Professional) (Léon) (1994)&#39;, &#39;M (1931)&#39;, &#39;M*A*S*H (a.k.a. MASH) (1970)&#39;, &#39;M. Butterfly (1993)&#39;, &#34;M. Hulot’s Holiday (Mr. Hulot&#39;s Holiday) (Vacances de Monsieur Hulot, Les) (1953)&#34;, &#39;MacArthur (1977)&#39;, &#39;MacGruber (2010)&#39;, &#39;MacGyver: Lost Treasure of Atlantis (1994)&#39;, &#39;MacGyver: Trail to Doomsday (1994)&#39;, &#39;Macbeth (2015)&#39;, &#39;Macbeth (a.k.a. Tragedy of Macbeth, The) (1971)&#39;, &#39;Machete (2010)&#39;, &#39;Machete Kills (Machete 2) (2013)&#39;, &#39;Machine Girl, The (Kataude mashin gâru) (2008)&#39;, &#39;Mack, The (1973)&#39;, &#34;Mackenna&#39;s Gold (1969)&#34;, &#39;Mad City (1997)&#39;, &#39;Mad Dog and Glory (1993)&#39;, &#39;Mad Hot Ballroom (2005)&#39;, &#39;Mad Love (1995)&#39;, &#39;Mad Max (1979)&#39;, &#39;Mad Max Beyond Thunderdome (1985)&#39;, &#39;Mad Max: Fury Road (2015)&#39;, &#39;Madagascar (2005)&#39;, &#34;Madagascar 3: Europe&#39;s Most Wanted (2012)&#34;, &#39;Madagascar: Escape 2 Africa (2008)&#39;, &#39;Madame Bovary (1991)&#39;, &#39;Madame Sousatzka (1988)&#39;, &#39;Made (2001)&#39;, &#39;Made in America (1993)&#39;, &#39;Made in Dagenham (2010)&#39;, &#39;Made in Heaven (1987)&#39;, &#39;Made of Honor (2008)&#39;, &#39;Madeline (1998)&#39;, &#39;Madhouse (1990)&#39;, &#39;Madly in Love (1981)&#39;, &#39;Madness of King George, The (1994)&#39;, &#39;Madonna: Truth or Dare (1991)&#39;, &#39;Maelström (2000)&#39;, &#39;Magdalene Sisters, The (2002)&#39;, &#39;Maggie (2015)&#39;, &#34;Maggie&#39;s Plan (2015)&#34;, &#39;Magic Mike (2012)&#39;, &#39;Magic Mike XXL (2015)&#39;, &#39;Magic in the Moonlight (2014)&#39;, &#39;Magnificent Ambersons, The (1942)&#39;, &#39;Magnificent Seven, The (1960)&#39;, &#39;Magnolia (1999)&#39;, &#39;Magnum Force (1973)&#39;, &#39;Maid in Manhattan (2002)&#39;, &#39;Maid to Order (1987)&#39;, &#39;Maiden Heist, The (2009)&#39;, &#39;Maidens in Uniform (Mädchen in Uniform) (1931)&#39;, &#39;Majestic, The (2001)&#39;, &#39;Major Dundee (1965)&#39;, &#39;Major League (1989)&#39;, &#39;Major League II (1994)&#39;, &#39;Major League: Back to the Minors (1998)&#39;, &#39;Major Payne (1995)&#39;, &#39;Major and the Minor, The (1942)&#39;, &#39;Make Way for Tomorrow (1937)&#39;, &#39;Making Mr. Right (1987)&#39;, &#39;Making a Murderer (2015)&#39;, &#39;Making the Grade (1984)&#39;, &#39;Malcolm X (1992)&#39;, &#39;Male Hunt (1964)&#39;, &#39;Maleficent (2014)&#39;, &#34;Malibu&#39;s Most Wanted (2003)&#34;, &#39;Malice (1993)&#39;, &#39;Mallrats (1995)&#39;, &#39;Maltese Falcon, The (1941)&#39;, &#39;Maltese Falcon, The (a.k.a. Dangerous Female) (1931)&#39;, &#39;Malèna (2000)&#39;, &#39;Mambo Italiano (2003)&#39;, &#39;Mambo Kings, The (1992)&#39;, &#39;Mamma Mia! (2008)&#39;, &#39;Mamma Mia: Here We Go Again! (2018)&#39;, &#39;Man Apart, A (2003)&#39;, &#34;Man Bites Dog (C&#39;est arrivé près de chez vous) (1992)&#34;, &#34;Man Escaped, A (Un condamné à mort s&#39;est échappé ou Le vent souffle où il veut) (1956)&#34;, &#39;Man Trouble (1992)&#39;, &#39;Man Up (2015)&#39;, &#39;Man Vanishes, A (Ningen Johatsu) (1967)&#39;, &#39;Man Who Came to Dinner, The (1942)&#39;, &#39;Man Who Cried, The (2000)&#39;, &#39;Man Who Fell to Earth, The (1976)&#39;, &#39;Man Who Knew Too Little, The (1997)&#39;, &#39;Man Who Knew Too Much, The (1934)&#39;, &#39;Man Who Knew Too Much, The (1956)&#39;, &#34;Man Who Planted Trees, The (Homme qui plantait des arbres, L&#39;) (1987)&#34;, &#39;Man Who Shot Liberty Valance, The (1962)&#39;, &#34;Man Who Wasn&#39;t There, The (2001)&#34;, &#39;Man Who Would Be King, The (1975)&#39;, &#39;Man Without a Face, The (1993)&#39;, &#39;Man Without a Past, The (Mies vailla menneisyyttä) (2002)&#39;, &#39;Man and a Woman, A (Un homme et une femme) (1966)&#39;, &#39;Man for All Seasons, A (1966)&#39;, &#39;Man from Earth, The (2007)&#39;, &#39;Man from Elysian Fields, The (2001)&#39;, &#39;Man from Snowy River, The (1982)&#39;, &#39;Man in the Iron Mask, The (1998)&#39;, &#39;Man in the White Suit, The (1951)&#39;, &#39;Man of Aran (1934)&#39;, &#39;Man of No Importance, A (1994)&#39;, &#39;Man of Steel (2013)&#39;, &#39;Man of Tai Chi (2013)&#39;, &#39;Man of the House (1995)&#39;, &#39;Man of the House (2005)&#39;, &#39;Man of the Year (1995)&#39;, &#39;Man of the Year (2006)&#39;, &#39;Man on Fire (2004)&#39;, &#39;Man on High Heels (2014)&#39;, &#39;Man on Wire (2008)&#39;, &#39;Man on a Ledge (2012)&#39;, &#39;Man on the Flying Trapeze (1935)&#39;, &#39;Man on the Moon (1999)&#39;, &#34;Man on the Train (Homme du train, L&#39;) (2002)&#34;, &#39;Man with Two Brains, The (1983)&#39;, &#39;Man with the Golden Arm, The (1955)&#39;, &#39;Man with the Golden Gun, The (1974)&#39;, &#39;Man with the Iron Fists, The (2012)&#39;, &#39;Man with the Movie Camera, The (Chelovek s kino-apparatom) (1929)&#39;, &#34;Man&#39;s Best Friend (1993)&#34;, &#39;Man, The (2005)&#39;, &#39;Manchester by the Sea (2016)&#39;, &#39;Manchurian Candidate, The (1962)&#39;, &#39;Manchurian Candidate, The (2004)&#39;, &#39;Mandela: Long Walk to Freedom (2013)&#39;, &#39;Manderlay (2005)&#39;, &#39;Manhattan (1979)&#39;, &#39;Manhattan Murder Mystery (1993)&#39;, &#39;Manhattan Project, The (1986)&#39;, &#39;Manhunter (1986)&#39;, &#39;Maniac (2012)&#39;, &#39;Maniac Cop (1988)&#39;, &#39;Maniac Cop 2 (1990)&#39;, &#39;Manic (2001)&#39;, &#39;Mannequin (1987)&#39;, &#39;Mannequin 2: On the Move (1991)&#39;, &#39;Manon of the Spring (Manon des sources) (1986)&#39;, &#39;Mansfield Park (1999)&#39;, &#39;Manufactured Landscapes (2006)&#39;, &#39;Manufacturing Consent: Noam Chomsky and the Media (1992)&#39;, &#39;Many Adventures of Winnie the Pooh, The (1977)&#39;, &#39;Maps to the Stars (2014)&#39;, &#39;Marat/Sade (1966)&#39;, &#39;Marathon Man (1976)&#39;, &#39;Marauders (2016)&#39;, &#34;March of the Penguins (Marche de l&#39;empereur, La) (2005)&#34;, &#39;Margaret (2011)&#39;, &#39;Margin Call (2011)&#39;, &#39;Margot at the Wedding (2007)&#39;, &#39;Maria Bamford: Old Baby&#39;, &#39;Maria Bamford: The Special Special Special! (2012)&#39;, &#39;Maria Full of Grace (Maria, Llena eres de gracia) (2004)&#39;, &#39;Mariachi, El (1992)&#39;, &#39;Marie Antoinette (2006)&#39;, &#39;Marine, The (2006)&#39;, &#39;Marius and Jeanette (Marius et Jeannette) (1997)&#39;, &#39;Mark of Zorro, The (1940)&#39;, &#39;Marked for Death (1990)&#39;, &#39;Marley &amp; Me (2008)&#39;, &#39;Marley (2012)&#39;, &#39;Marnie (1964)&#39;, &#39;Marooned in Iraq (Gomgashtei dar Aragh) (2002)&#39;, &#39;Marriage of Maria Braun, The (Ehe der Maria Braun, Die) (1979)&#39;, &#39;Married to the Mob (1988)&#39;, &#39;Mars Attacks! (1996)&#39;, &#39;Mars Needs Moms (2011)&#39;, &#39;Martha Marcy May Marlene (2011)&#39;, &#39;Martin (1977)&#39;, &#39;Martin Lawrence Live: Runteldat (2002)&#39;, &#39;Marty (1955)&#39;, &#39;Marvel One-Shot: Agent Carter (2013)&#39;, &#39;Marvel One-Shot: Item 47 (2012)&#39;, &#34;Marvin&#39;s Room (1996)&#34;, &#39;Marwencol (2010)&#39;, &#39;Mary Poppins (1964)&#39;, &#39;Mary Reilly (1996)&#39;, &#34;Mary Shelley&#39;s Frankenstein (Frankenstein) (1994)&#34;, &#39;Mary and Max (2009)&#39;, &#39;Mary of Scotland (1936)&#39;, &#39;Mask (1985)&#39;, &#39;Mask of Zorro, The (1998)&#39;, &#39;Mask, The (1994)&#39;, &#39;Masked &amp; Anonymous (2003)&#39;, &#39;Masked Avengers (1981)&#39;, &#39;Masque of the Red Death, The (1964)&#39;, &#39;Masquerade (1988)&#39;, &#39;Massu Engira Maasilamani (2015)&#39;, &#39;Master and Commander: The Far Side of the World (2003)&#39;, &#39;Master of Disguise, The (2002)&#39;, &#39;Master of the Flying Guillotine (Du bi quan wang da po xue di zi) (1975)&#39;, &#39;Master, The (2012)&#39;, &#39;Masterminds (1997)&#39;, &#39;Masterminds (2016)&#39;, &#39;Masters of the Universe (1987)&#39;, &#39;Matador, The (2005)&#39;, &#39;Match Factory Girl, The (Tulitikkutehtaan tyttö) (1990)&#39;, &#39;Match Point (2005)&#39;, &#39;MatchMaker, The (1997)&#39;, &#39;Matchstick Men (2003)&#39;, &#39;Material Girls (2006)&#39;, &#39;Matewan (1987)&#39;, &#39;Matilda (1996)&#39;, &#39;Matinee (1993)&#39;, &#39;Matrix Reloaded, The (2003)&#39;, &#39;Matrix Revolutions, The (2003)&#39;, &#39;Matrix, The (1999)&#39;, &#39;Maurice (1987)&#39;, &#39;Maverick (1994)&#39;, &#39;Max (2002)&#39;, &#39;Max Dugan Returns (1983)&#39;, &#34;Max Keeble&#39;s Big Move (2001)&#34;, &#39;Max Manus (2008)&#39;, &#39;Max Payne (2008)&#39;, &#39;Maxed Out: Hard Times, Easy Credit and the Era of Predatory Lenders (2006)&#39;, &#39;Maximum Overdrive (1986)&#39;, &#39;Maximum Ride (2016)&#39;, &#39;Maximum Risk (1996)&#39;, &#39;May (2002)&#39;, &#39;Maya Lin: A Strong Clear Vision (1994)&#39;, &#39;Maybe Baby (2000)&#39;, &#39;Mayhem (2017)&#39;, &#39;Mayor of the Sunset Strip (2003)&#39;, &#39;Maz Jobrani: Immigrant (2017)&#39;, &#39;Maze Runner, The (2014)&#39;, &#39;Maze Runner: Scorch Trials (2015)&#39;, &#39;Maze Runner: The Death Cure (2018)&#39;, &#39;McCabe &amp; Mrs. Miller (1971)&#39;, &#39;McFarland, USA (2015)&#39;, &#34;McHale&#39;s Navy (1997)&#34;, &#39;Me Him Her (2015)&#39;, &#39;Me Myself I (2000)&#39;, &#39;Me Without You (2001)&#39;, &#39;Me and Earl and the Dying Girl (2015)&#39;, &#39;Me and You and Everyone We Know (2005)&#39;, &#39;Me and you (io e te) (2012)&#39;, &#39;Me, Myself &amp; Irene (2000)&#39;, &#39;Mean Creek (2004)&#39;, &#39;Mean Girls (2004)&#39;, &#39;Mean Machine (2001)&#39;, &#39;Mean Streets (1973)&#39;, &#39;Meantime (1984)&#39;, &#39;Meatballs (1979)&#39;, &#39;Meatballs 4 (1992)&#39;, &#39;Meatballs III (1987)&#39;, &#39;Meatballs Part II (1984)&#39;, &#39;Mechanic, The (2011)&#39;, &#39;Medallion, The (2003)&#39;, &#39;Medicine Man (1992)&#39;, &#39;Mediterraneo (1991)&#39;, &#39;Meet Dave (2008)&#39;, &#39;Meet Joe Black (1998)&#39;, &#39;Meet John Doe (1941)&#39;, &#39;Meet Me in St. Louis (1944)&#39;, &#39;Meet Wally Sparks (1997)&#39;, &#39;Meet the Applegates (1991)&#39;, &#39;Meet the Feebles (1989)&#39;, &#39;Meet the Fockers (2004)&#39;, &#39;Meet the Parents (2000)&#39;, &#39;Meet the Robinsons (2007)&#39;, &#39;Meet the Spartans (2008)&#39;, &#39;Mega Shark vs. Crocosaurus (2010)&#39;, &#39;Megamind (2010)&#39;, &#39;Melancholia (2011)&#39;, &#39;Melinda and Melinda (2004)&#39;, &#39;Melvin and Howard (1980)&#39;, &#39;Memento (2000)&#39;, &#39;Memoirs of a Geisha (2005)&#39;, &#39;Memoirs of an Invisible Man (1992)&#39;, &#39;Memories (Memorîzu) (1995)&#39;, &#39;Memories of Me (1988)&#39;, &#39;Memories of Murder (Salinui chueok) (2003)&#39;, &#39;Memphis Belle (1990)&#39;, &#39;Men &amp; Chicken (2015)&#39;, &#39;Men Who Stare at Goats, The (2009)&#39;, &#39;Men at Work (1990)&#39;, &#39;Men in Black (a.k.a. MIB) (1997)&#39;, &#39;Men in Black II (a.k.a. MIIB) (a.k.a. MIB 2) (2002)&#39;, &#39;Men in Black III (M.III.B.) (M.I.B.³) (2012)&#39;, &#39;Men of Honor (2000)&#39;, &#39;Men with Brooms (2002)&#39;, &#39;Men, Women &amp; Children (2014)&#39;, &#39;Menace II Society (1993)&#39;, &#39;Mental (2012)&#39;, &#39;Mephisto (1981)&#39;, &#39;Merantau (2009)&#39;, &#39;Merchant of Venice, The (2004)&#39;, &#39;Merci Patron ! (2016)&#39;, &#39;Mercury Plains (2016)&#39;, &#39;Mercury Rising (1998)&#39;, &#39;Merlin (1998)&#39;, &#39;Mermaids (1990)&#39;, &#39;Merry Madagascar (2009)&#39;, &#39;Meshes of the Afternoon (1943)&#39;, &#34;Mesrine: Killer Instinct (L&#39;instinct de mort) (2008)&#34;, &#34;Mesrine: Public Enemy #1 (L&#39;ennemi public n°1) (2008)&#34;, &#39;Message in a Bottle (1999)&#39;, &#39;Messenger, The (2009)&#39;, &#39;Messenger: The Story of Joan of Arc, The (1999)&#39;, &#39;Messengers, The (2007)&#39;, &#34;Metal: A Headbanger&#39;s Journey (2005)&#34;, &#39;Metallica: Some Kind of Monster (2004)&#39;, &#39;Meteor (1979)&#39;, &#39;Meteor Man, The (1993)&#39;, &#39;Metro (1997)&#39;, &#39;Metroland (1997)&#39;, &#39;Metropia (2009)&#39;, &#39;Metropolis (1927)&#39;, &#39;Metropolis (2001)&#39;, &#39;Metropolitan (1990)&#39;, &#39;Mexican, The (2001)&#39;, &#39;Mezzo Forte (1998)&#39;, &#39;Miami Blues (1990)&#39;, &#39;Miami Rhapsody (1995)&#39;, &#39;Miami Vice (2006)&#39;, &#39;Michael (1996)&#39;, &#39;Michael Clayton (2007)&#39;, &#39;Michael Collins (1996)&#39;, &#34;Michael Jackson&#39;s Thriller (1983)&#34;, &#39;Michael Jordan to the Max (2000)&#39;, &#39;Mickey Blue Eyes (1999)&#39;, &#34;Mickey&#39;s Once Upon a Christmas (1999)&#34;, &#34;Mickey&#39;s The Prince and the Pauper (1990)&#34;, &#39;Micmacs (Micmacs à tire-larigot) (2009)&#39;, &#34;Microcosmos (Microcosmos: Le peuple de l&#39;herbe) (1996)&#34;, &#39;Microwave Massacre (1983)&#39;, &#39;Middle Men (2009)&#39;, &#39;Midnight Chronicles (2009)&#39;, &#39;Midnight Clear, A (1992)&#39;, &#39;Midnight Cowboy (1969)&#39;, &#39;Midnight Express (1978)&#39;, &#39;Midnight Meat Train, The (2008)&#39;, &#39;Midnight Run (1988)&#39;, &#39;Midnight Special (2015)&#39;, &#39;Midnight in Paris (2011)&#39;, &#39;Midnight in the Garden of Good and Evil (1997)&#39;, &#34;Midsummer Night&#39;s Dream, A (1935)&#34;, &#34;Midsummer Night&#39;s Sex Comedy, A (1982)&#34;, &#39;Midway (1976)&#39;, &#39;Mighty Aphrodite (1995)&#39;, &#39;Mighty Ducks, The (1992)&#39;, &#39;Mighty Heart, A (2007)&#39;, &#39;Mighty Joe Young (1949)&#39;, &#39;Mighty Joe Young (1998)&#39;, &#39;Mighty Morphin Power Rangers: The Movie (1995)&#39;, &#39;Mighty Wind, A (2003)&#39;, &#39;Mighty, The (1998)&#39;, &#39;Mike &amp; Dave Need Wedding Dates (2016)&#39;, &#39;Mike Bassett: England Manager (2001)&#39;, &#34;Mike&#39;s New Car (2002)&#34;, &#39;Milagro Beanfield War (1988)&#39;, &#39;Mildred Pierce (1945)&#39;, &#39;Mildred Pierce (2011)&#39;, &#39;Milk (2008)&#39;, &#39;Milk Money (1994)&#39;, &#39;Milk and Honey (2003)&#39;, &#39;Millennium (1989)&#39;, &#39;Millennium Actress (Sennen joyû) (2001)&#39;, &#34;Miller&#39;s Crossing (1990)&#34;, &#39;Million Dollar Arm (2014)&#39;, &#39;Million Dollar Baby (2004)&#39;, &#39;Million Dollar Hotel, The (2001)&#39;, &#39;Millions (2004)&#39;, &#39;Mimic (1997)&#39;, &#39;Mimino (1977)&#39;, &#39;Mina Tannenbaum (1994)&#39;, &#39;Mind Game (2004)&#39;, &#39;Mindhunters (2004)&#39;, &#34;Mini&#39;s First Time (2006)&#34;, &#39;Minions (2015)&#39;, &#39;Minnie and Moskowitz (1971)&#39;, &#39;Minority Report (2002)&#39;, &#39;Minus Man, The (1999)&#39;, &#39;Miracle (2004)&#39;, &#39;Miracle Mile (1989)&#39;, &#39;Miracle Worker, The (1962)&#39;, &#39;Miracle of Marcelino, The (Marcelino pan y vino) (1955)&#39;, &#34;Miracle of Morgan&#39;s Creek, The (1944)&#34;, &#39;Miracle on 34th Street (1947)&#39;, &#39;Miracle on 34th Street (1994)&#39;, &#39;Miracles - Mr. Canton and Lady Rose (1989)&#39;, &#39;Mirror Has Two Faces, The (1996)&#39;, &#39;Mirror Mirror (2012)&#39;, &#39;Mirror, The (Zerkalo) (1975)&#39;, &#39;MirrorMask (2005)&#39;, &#39;Mirrors (2008)&#39;, &#39;Mischief (1985)&#39;, &#39;Misery (1990)&#39;, &#39;Misfits, The (1961)&#39;, &#39;Misfortunates, The (De helaasheid der dingen) (2009)&#39;, &#39;Miss Congeniality (2000)&#39;, &#39;Miss Congeniality 2: Armed and Fabulous (2005)&#39;, &#39;Miss March (2009)&#39;, &#39;Miss Meadows (2014)&#39;, &#39;Miss Nobody (2010)&#39;, &#34;Miss Peregrine&#39;s Home for Peculiar Children (2016)&#34;, &#39;Miss Potter (2006)&#39;, &#39;Miss Representation (2011)&#39;, &#39;Miss Sloane (2016)&#39;, &#39;Missing (1982)&#39;, &#39;Missing in Action (1984)&#39;, &#39;Missing in Action 2: The Beginning (1985)&#39;, &#39;Missing, The (2003)&#39;, &#39;Mission to Mars (2000)&#39;, &#39;Mission, The (1986)&#39;, &#39;Mission: Impossible (1996)&#39;, &#39;Mission: Impossible - Fallout (2018)&#39;, &#39;Mission: Impossible - Ghost Protocol (2011)&#39;, &#39;Mission: Impossible - Rogue Nation (2015)&#39;, &#39;Mission: Impossible II (2000)&#39;, &#39;Mission: Impossible III (2006)&#39;, &#39;Mississippi Burning (1988)&#39;, &#39;Mississippi Masala (1991)&#39;, &#39;Mist, The (2007)&#39;, &#39;Mister Roberts (1955)&#39;, &#39;Mistress America (2015)&#39;, &#39;Misérables, Les (1995)&#39;, &#39;Misérables, Les (1998)&#39;, &#39;Misérables, Les (2000)&#39;, &#39;Misérables, Les (2012)&#39;, &#39;Mitchell (1975)&#39;, &#39;Mixed Nuts (1994)&#39;, &#34;Mo&#39; Better Blues (1990)&#34;, &#34;Mo&#39; Money (1992)&#34;, &#39;Moana (2016)&#39;, &#39;Mobsters (1991)&#39;, &#39;Moby Dick (1956)&#39;, &#39;Mod Squad, The (1999)&#39;, &#39;Modern Problems (1981)&#39;, &#39;Modern Times (1936)&#39;, &#39;Mogambo (1953)&#39;, &#39;Mojave (2015)&#39;, &#39;Moll Flanders (1996)&#39;, &#34;Molly&#39;s Game (2017)&#34;, &#39;Mom and Dad Save the World (1992)&#39;, &#34;Mom&#39;s Night Out (2014)&#34;, &#39;Mommie Dearest (1981)&#39;, &#39;Mommy (2014)&#39;, &#39;Mon Oncle (My Uncle) (1958)&#39;, &#34;Mon oncle d&#39;Amérique (1980)&#34;, &#39;Mona Lisa (1986)&#39;, &#39;Mona Lisa Smile (2003)&#39;, &#39;Monday (2000)&#39;, &#39;Mondays in the Sun (Lunes al sol, Los) (2002)&#39;, &#39;Mondo Cane (1962)&#39;, &#34;Money Money Money (L&#39;aventure, c&#39;est l&#39;aventure) (1972)&#34;, &#39;Money Monster (2016)&#39;, &#39;Money Pit, The (1986)&#39;, &#39;Money Talks (1997)&#39;, &#39;Money Train (1995)&#39;, &#39;Moneyball (2011)&#39;, &#39;Mongol (2007)&#39;, &#39;Monkey Business (1952)&#39;, &#39;Monkey Shines (1988)&#39;, &#39;Monkey Trouble (1994)&#39;, &#39;Monkeybone (2001)&#39;, &#39;Monsieur Ibrahim (Monsieur Ibrahim et les fleurs du Coran) (2003)&#39;, &#39;Monsieur Lazhar (2011)&#39;, &#39;Monsieur Verdoux (1947)&#39;, &#39;Monsoon Wedding (2001)&#39;, &#39;Monster (2003)&#39;, &#39;Monster House (2006)&#39;, &#39;Monster Squad, The (1987)&#39;, &#39;Monster in a Box (1992)&#39;, &#34;Monster&#39;s Ball (2001)&#34;, &#39;Monster, The (Mostro, Il) (1994)&#39;, &#39;Monster-in-Law (2005)&#39;, &#39;Monsters (2010)&#39;, &#39;Monsters University (2013)&#39;, &#39;Monsters vs. Aliens (2009)&#39;, &#39;Monsters, Inc. (2001)&#39;, &#39;Monte Carlo (2011)&#39;, &#39;Monterey Pop (1968)&#39;, &#39;Monty Python Live at the Hollywood Bowl (1982)&#39;, &#39;Monty Python and the Holy Grail (1975)&#39;, &#34;Monty Python&#39;s And Now for Something Completely Different (1971)&#34;, &#34;Monty Python&#39;s Life of Brian (1979)&#34;, &#34;Monty Python&#39;s The Meaning of Life (1983)&#34;, &#39;Monument Ave. (1998)&#39;, &#39;Monuments Men, The (2014)&#39;, &#34;Mood Indigo (L&#39;écume des jours) (2013)&#34;, &#39;Moon (2009)&#39;, &#39;Moon Over Parador (1988)&#39;, &#39;Moonlight&#39;, &#39;Moonlight Mile (2002)&#39;, &#39;Moonraker (1979)&#39;, &#39;Moonrise Kingdom (2012)&#39;, &#39;Moonstruck (1987)&#39;, &#39;Moonwalker (1988)&#39;, &#39;Moonwalkers (2015)&#39;, &#39;More (1998)&#39;, &#39;More American Graffiti (1979)&#39;, &#39;Morning After, The (1986)&#39;, &#39;Morning Glory (2010)&#39;, &#39;Morons From Outer Space (1985)&#39;, &#39;Mortadelo &amp; Filemon: The Big Adventure (La gran aventura de Mortadelo y Filemón) (2003)&#39;, &#39;Mortal Kombat (1995)&#39;, &#39;Mortal Kombat: Annihilation (1997)&#39;, &#39;Mortal Kombat: The Journey Begins (1995)&#39;, &#39;Mortal Thoughts (1991)&#39;, &#39;Mortdecai (2015)&#39;, &#39;Mortuary (1983)&#39;, &#39;Morvern Callar (2002)&#39;, &#39;Moscow Does Not Believe in Tears (Moskva slezam ne verit) (1979)&#39;, &#39;Moscow on the Hudson (1984)&#39;, &#39;Mosquito Coast, The (1986)&#39;, &#39;Most Hated Family in America, The (2007)&#39;, &#39;Mostly Martha (Bella Martha) (2001)&#39;, &#39;Motel Hell (1980)&#39;, &#39;Mother (1996)&#39;, &#39;Mother (Madeo) (2009)&#39;, &#39;Mother Night (1996)&#39;, &#39;Mother! (2017)&#39;, &#39;Motherhood (2009)&#39;, &#39;Mothman Prophecies, The (2002)&#39;, &#39;Mothra (Mosura) (1961)&#39;, &#39;Motorcycle Diaries, The (Diarios de motocicleta) (2004)&#39;, &#39;Mouchette (1967)&#39;, &#39;Moulin Rouge (2001)&#39;, &#39;Mountains of the Moon (1990)&#39;, &#39;Mouse Hunt (1997)&#39;, &#39;Mouse That Roared, The (1959)&#39;, &#39;Moustache, La (2005)&#39;, &#39;Movie 43 (2013)&#39;, &#39;Mozart and the Whale (2005)&#39;, &#39;Mr Hublot (2013)&#39;, &#39;Mr. &amp; Mrs. Smith (1941)&#39;, &#39;Mr. &amp; Mrs. Smith (2005)&#39;, &#39;Mr. 3000 (2004)&#39;, &#39;Mr. Baseball (1992)&#39;, &#34;Mr. Bean&#39;s Holiday (2007)&#34;, &#39;Mr. Blandings Builds His Dream House (1948)&#39;, &#39;Mr. Brooks (2007)&#39;, &#39;Mr. Death: The Rise and Fall of Fred A. Leuchter, Jr. (1999)&#39;, &#39;Mr. Deeds (2002)&#39;, &#39;Mr. Deeds Goes to Town (1936)&#39;, &#39;Mr. Destiny (1990)&#39;, &#34;Mr. Holland&#39;s Opus (1995)&#34;, &#39;Mr. Holmes (2015)&#39;, &#39;Mr. Jealousy (1997)&#39;, &#39;Mr. Magoo (1997)&#39;, &#39;Mr. Mom (1983)&#39;, &#39;Mr. Nanny (1993)&#39;, &#39;Mr. Nice Guy (Yat goh ho yan) (1997)&#39;, &#39;Mr. Nobody (2009)&#39;, &#39;Mr. Peabody &amp; Sherman (2014)&#39;, &#34;Mr. Popper&#39;s Penguins (2011)&#34;, &#39;Mr. Right (2016)&#39;, &#39;Mr. Saturday Night (1992)&#39;, &#39;Mr. Skeffington (1944)&#39;, &#39;Mr. Smith Goes to Washington (1939)&#39;, &#39;Mr. Wonderful (1993)&#39;, &#39;Mr. Woodcock (2007)&#39;, &#39;Mr. Wrong (1996)&#39;, &#39;Mrs. Brown (a.k.a. Her Majesty, Mrs. Brown) (1997)&#39;, &#39;Mrs. Dalloway (1997)&#39;, &#39;Mrs. Doubtfire (1993)&#39;, &#39;Mrs. Henderson Presents (2005)&#39;, &#39;Mrs. Miniver (1942)&#39;, &#39;Mrs. Parker and the Vicious Circle (1994)&#39;, &#39;Mrs. Winterbourne (1996)&#39;, &#39;Much Ado About Nothing (1993)&#39;, &#39;Much Ado About Nothing (2012)&#39;, &#39;Mud (2012)&#39;, &#39;Mudbound (2017)&#39;, &#39;Mudge Boy, The (2003)&#39;, &#39;Mulan (1998)&#39;, &#39;Mulan II (2004)&#39;, &#39;Mulholland Dr. (1999)&#39;, &#39;Mulholland Drive (2001)&#39;, &#39;Mulholland Falls (1996)&#39;, &#39;Multiplicity (1996)&#39;, &#39;Mumford (1999)&#39;, &#39;Mummy Returns, The (2001)&#39;, &#39;Mummy, The (1932)&#39;, &#39;Mummy, The (1959)&#39;, &#39;Mummy, The (1999)&#39;, &#39;Mummy: Tomb of the Dragon Emperor, The (2008)&#39;, &#39;Munchies (1987)&#39;, &#39;Munich (2005)&#39;, &#39;Munna bhai M.B.B.S. (2003)&#39;, &#39;Muppet Christmas Carol, The (1992)&#39;, &#39;Muppet Christmas: Letters to Santa, A (2008)&#39;, &#39;Muppet Movie, The (1979)&#39;, &#39;Muppet Treasure Island (1996)&#39;, &#39;Muppets From Space (1999)&#39;, &#39;Muppets Most Wanted (2014)&#39;, &#39;Muppets Take Manhattan, The (1984)&#39;, &#39;Muppets, The (2011)&#39;, &#39;Murder at 1600 (1997)&#39;, &#39;Murder by Death (1976)&#39;, &#39;Murder by Numbers (2002)&#39;, &#39;Murder in the First (1995)&#39;, &#39;Murder on a Sunday Morning (Un coupable idéal) (2001)&#39;, &#39;Murder on the Orient Express (1974)&#39;, &#39;Murder on the Orient Express (2017)&#39;, &#39;Murderball (2005)&#39;, &#34;Muriel&#39;s Wedding (1994)&#34;, &#34;Murphy&#39;s Romance (1985)&#34;, &#39;Musa the Warrior (Musa) (2001)&#39;, &#39;Muse, The (1999)&#39;, &#39;Music Box (1989)&#39;, &#39;Music From Another Room (1998)&#39;, &#39;Music Man, The (1962)&#39;, &#39;Music and Lyrics (2007)&#39;, &#39;Music of the Heart (1999)&#39;, &#39;Musketeer, The (2001)&#39;, &#39;Must Love Dogs (2005)&#39;, &#39;Mutant Aliens (2001)&#39;, &#39;Mutant Chronicles (2008)&#39;, &#39;Mute Witness (1994)&#39;, &#39;Mutiny on the Bounty (1935)&#39;, &#39;My Afternoons with Margueritte (La tête en friche) (2010)&#39;, &#34;My Architect: A Son&#39;s Journey (2003)&#34;, &#39;My Best Fiend (Mein liebster Feind) (1999)&#39;, &#34;My Best Friend&#39;s Girl (2008)&#34;, &#34;My Best Friend&#39;s Wedding (1997)&#34;, &#39;My Big Fat Greek Wedding (2002)&#39;, &#39;My Big Fat Greek Wedding 2 (2016)&#39;, &#39;My Bloody Valentine (1981)&#39;, &#39;My Bloody Valentine 3-D (2009)&#39;, &#39;My Blue Heaven (1990)&#39;, &#39;My Blueberry Nights (2007)&#39;, &#39;My Bodyguard (1980)&#39;, &#34;My Boss&#39;s Daughter (2003)&#34;, &#34;My Boyfriend&#39;s Back (1993)&#34;, &#39;My Cousin Vinny (1992)&#39;, &#39;My Crazy Life (Mi vida loca) (1993)&#39;, &#39;My Demon Lover (1987)&#39;, &#39;My Dinner with André (1981)&#39;, &#39;My Dog Skip (1999)&#39;, &#39;My Fair Lady (1964)&#39;, &#39;My Family (1995)&#39;, &#39;My Father and My Son (Babam ve oglum) (2005)&#39;, &#39;My Father the Hero (1994)&#39;, &#39;My Father the Hero (Mon père, ce héros.) (1991)&#39;, &#34;My Father&#39;s Glory (La gloire de mon père) (1990)&#34;, &#39;My Favorite Martian (1999)&#39;, &#39;My Favorite Wife (1940)&#39;, &#39;My Favorite Year (1982)&#39;, &#39;My Fellow Americans (1996)&#39;, &#39;My First Mister (2001)&#39;, &#39;My Flesh and Blood (2003)&#39;, &#39;My Giant (1998)&#39;, &#39;My Girl (1991)&#39;, &#39;My Girl 2 (1994)&#39;, &#39;My Kid Could Paint That (2007)&#39;, &#39;My Left Eye Sees Ghosts (Ngo joh aan gin diy gwai) (2002)&#39;, &#39;My Left Foot (1989)&#39;, &#39;My Life (1993)&#39;, &#39;My Life Without Me (2003)&#39;, &#39;My Life as McDull (Mak dau goo si) (2001)&#39;, &#39;My Life as a Dog (Mitt liv som hund) (1985)&#39;, &#39;My Life in Pink (Ma vie en rose) (1997)&#39;, &#39;My Life in Ruins (2009)&#39;, &#39;My Love (2006)&#39;, &#39;My Lucky Stars (Fuk sing go jiu) (1985)&#39;, &#39;My Man Godfrey (1936)&#39;, &#39;My Man Godfrey (1957)&#39;, &#34;My Mother&#39;s Castle (Château de ma mère, Le) (1990)&#34;, &#39;My Name Is Bruce (2007)&#39;, &#39;My Name Is Joe (1998)&#39;, &#39;My Neighbor Totoro (Tonari no Totoro) (1988)&#39;, &#39;My Own Private Idaho (1991)&#39;, &#39;My Sassy Girl (Yeopgijeogin geunyeo) (2001)&#39;, &#39;My Science Project (1985)&#39;, &#39;My Scientology Movie (2016)&#39;, &#34;My Sister&#39;s Keeper (2009)&#34;, &#39;My Son the Fanatic (1997)&#39;, &#39;My Stepmother Is an Alien (1988)&#39;, &#39;My Super Ex-Girlfriend (2006)&#39;, &#39;My Tutor (1983)&#39;, &#39;My Voyage to Italy (Il mio viaggio in Italia) (1999)&#39;, &#39;My Wife is an Actress (Ma Femme est une Actrice) (2001)&#39;, &#39;Mysterious Skin (2004)&#39;, &#39;Mystery Date (1991)&#39;, &#39;Mystery Men (1999)&#39;, &#39;Mystery Science Theater 3000: The Movie (1996)&#39;, &#39;Mystery Train (1989)&#39;, &#39;Mystery of the Third Planet, The (Tayna tretey planety) (1981)&#39;, &#39;Mystery, Alaska (1999)&#39;, &#39;Mystic Pizza (1988)&#39;, &#39;Mystic River (2003)&#39;, &#39;Mystère à la Tour Eiffel (2015)&#39;, &#39;Ménage (Tenue de soirée) (1986)&#39;, &#39;Nacho Libre (2006)&#39;, &#39;Nadine (1987)&#39;, &#39;Nadja (1994)&#39;, &#39;Naked (1993)&#39;, &#39;Naked Gun 2 1/2: The Smell of Fear, The (1991)&#39;, &#39;Naked Gun 33 1/3: The Final Insult (1994)&#39;, &#39;Naked Gun: From the Files of Police Squad!, The (1988)&#39;, &#39;Naked Lunch (1991)&#39;, &#39;Name of the Rose, The (Name der Rose, Der) (1986)&#39;, &#39;Namesake, The (2006)&#39;, &#39;Nancy Drew (2007)&#39;, &#39;Nanny Diaries, The (2007)&#39;, &#39;Nanny McPhee (2005)&#39;, &#39;Napoleon Dynamite (2004)&#39;, &#39;Naqoyqatsi (2002)&#39;, &#39;Narc (2002)&#39;, &#39;Narcopolis (2014)&#39;, &#39;Nashville (1975)&#39;, &#39;Nasu: Summer in Andalusia (2003)&#39;, &#34;National Lampoon&#39;s Bag Boy (2007)&#34;, &#34;National Lampoon&#39;s Lady Killers (National Lampoon&#39;s Gold Diggers) (2003)&#34;, &#34;National Lampoon&#39;s Senior Trip (1995)&#34;, &#34;National Lampoon&#39;s Vacation (1983)&#34;, &#34;National Lampoon&#39;s Van Wilder (2002)&#34;, &#39;National Security (2003)&#39;, &#39;National Treasure (2004)&#39;, &#39;National Treasure: Book of Secrets (2007)&#39;, &#39;National Velvet (1944)&#39;, &#39;Native Son (1986)&#39;, &#39;Nativity Story, The (2006)&#39;, &#39;Natural Born Killers (1994)&#39;, &#39;Natural, The (1984)&#39;, &#39;Nature Calls (2012)&#39;, &#39;Nausicaä of the Valley of the Wind (Kaze no tani no Naushika) (1984)&#39;, &#39;Navigator, The (1924)&#39;, &#39;Navy Seals (1990)&#39;, &#39;Neal Brennan: 3 Mics (2017)&#39;, &#39;Near Dark (1987)&#39;, &#39;Nebraska (2013)&#39;, &#39;Necessary Roughness (1991)&#39;, &#39;Ned Kelly (2003)&#39;, &#39;Neds (2010)&#39;, &#39;Need for Speed (2014)&#39;, &#39;Needful Things (1993)&#39;, &#39;Negotiator, The (1998)&#39;, &#39;Neighbors (1981)&#39;, &#39;Neighbors (2014)&#39;, &#39;Neighbors 2: Sorority Rising (2016)&#39;, &#39;Nell (1994)&#39;, &#39;Nelly &amp; Monsieur Arnaud (1995)&#39;, &#39;Neo Tokyo (1987)&#39;, &#39;Neon Bull (2015)&#39;, &#39;Neon Genesis Evangelion: Death &amp; Rebirth (Shin seiki Evangelion Gekijô-ban: Shito shinsei) (1997)&#39;, &#39;Neon Genesis Evangelion: The End of Evangelion (Shin seiki Evangelion Gekijô-ban: Air/Magokoro wo, kimi ni) (1997)&#39;, &#39;Nerve (2016)&#39;, &#39;Net, The (1995)&#39;, &#39;Network (1976)&#39;, &#39;Nevada Smith (1966)&#39;, &#39;Never Back Down (2008)&#39;, &#39;Never Been Kissed (1999)&#39;, &#39;Never Cry Wolf (1983)&#39;, &#39;Never Die Alone (2004)&#39;, &#39;Never Let Me Go (2010)&#39;, &#39;Never Say Never Again (1983)&#39;, &#39;NeverEnding Story II: The Next Chapter, The (1990)&#39;, &#39;NeverEnding Story III, The (1994)&#39;, &#39;NeverEnding Story, The (1984)&#39;, &#39;New Adventures of Pippi Longstocking, The (1988)&#39;, &#39;New Guy, The (2002)&#39;, &#39;New Jersey Drive (1995)&#39;, &#39;New Kids Nitro (2011)&#39;, &#39;New One-Armed Swordsman, The (Xin du bi dao) (1971)&#39;, &#39;New Police Story (Xin jing cha gu shi) (2004)&#39;, &#39;New Rose Hotel (1998)&#39;, &#39;New Waterford Girl (1999)&#39;, &#39;New World, The (2005)&#39;, &#34;New Year&#39;s Eve (2011)&#34;, &#39;New York Cop (Nyû Yôku no koppu) (1993)&#39;, &#39;New York Stories (1989)&#39;, &#39;New York, I Love You (2009)&#39;, &#39;New York, New York (1977)&#39;, &#39;Newsies (1992)&#39;, &#39;Newton Boys, The (1998)&#39;, &#39;Next (2007)&#39;, &#39;Next Best Thing, The (2000)&#39;, &#39;Next Friday (2000)&#39;, &#39;Next Karate Kid, The (1994)&#39;, &#39;Next Stop Wonderland (1998)&#39;, &#39;Next Three Days, The (2010)&#39;, &#39;Next of Kin (1989)&#39;, &#39;Nicholas Nickleby (2002)&#39;, &#39;Nick Fury: Agent of S.H.I.E.L.D. (1998)&#39;, &#34;Nick and Norah&#39;s Infinite Playlist (2008)&#34;, &#39;Nick of Time (1995)&#39;, &#39;Nico Icon (1995)&#39;, &#39;Nico and Dani (Krámpack) (2000)&#39;, &#39;Nicotina (2003)&#39;, &#39;Night Flier (1997)&#39;, &#39;Night Guards (2016)&#39;, &#39;Night Listener, The (2006)&#39;, &#39;Night Porter, The (Portiere di notte, Il) (1974)&#39;, &#39;Night Shift (1982)&#39;, &#39;Night Watch (Nochnoy dozor) (2004)&#39;, &#39;Night and Day (1946)&#39;, &#39;Night and Fog (Nuit et brouillard) (1955)&#39;, &#39;Night at the Museum (2006)&#39;, &#39;Night at the Museum: Battle of the Smithsonian (2009)&#39;, &#39;Night at the Museum: Secret of the Tomb (2014)&#39;, &#39;Night at the Opera, A (1935)&#39;, &#39;Night at the Roxbury, A (1998)&#39;, &#39;Night in the Life of Jimmy Reardon, A (1988)&#39;, &#39;Night of the Comet (1984)&#39;, &#39;Night of the Creeps (1986)&#39;, &#39;Night of the Hunter, The (1955)&#39;, &#39;Night of the Iguana, The (1964)&#39;, &#39;Night of the Lepus (1972)&#39;, &#39;Night of the Living Dead (1968)&#39;, &#39;Night of the Living Dead (1990)&#39;, &#39;Night of the Shooting Stars (Notte di San Lorenzo, La) (1982)&#39;, &#39;Night on Earth (1991)&#39;, &#39;Night to Remember, A (1958)&#39;, &#39;Night, The (Notte, La) (1960)&#39;, &#39;Nightbreed (1990)&#39;, &#39;Nightcrawler (2014)&#39;, &#39;Nighthawks (1981)&#39;, &#39;Nightmare Before Christmas, The (1993)&#39;, &#34;Nightmare on Elm Street 2: Freddy&#39;s Revenge, A (1985)&#34;, &#39;Nightmare on Elm Street 3: Dream Warriors, A (1987)&#39;, &#39;Nightmare on Elm Street 4: The Dream Master, A (1988)&#39;, &#39;Nightmare on Elm Street 5: The Dream Child, A (1989)&#39;, &#39;Nightmare on Elm Street, A (1984)&#39;, &#39;Nightmare on Elm Street, A (2010)&#39;, &#39;Nights of Cabiria (Notti di Cabiria, Le) (1957)&#39;, &#39;Nightwatch (1997)&#39;, &#34;Nim&#39;s Island (2008)&#34;, &#39;Nina Takes a Lover (1994)&#39;, &#34;Nina&#39;s Heavenly Delights (2006)&#34;, &#39;Nine Lives of Tomas Katz, The (2000)&#39;, &#39;Nine Months (1995)&#39;, &#39;Nine Queens (Nueve reinas) (2000)&#39;, &#39;Nine to Five (a.k.a. 9 to 5) (1980)&#39;, &#39;Nines, The (2007)&#39;, &#39;Ninja (2009)&#39;, &#39;Ninja Assassin (2009)&#39;, &#39;Ninja Scroll (Jûbei ninpûchô) (1995)&#39;, &#39;Ninja: Shadow of a Tear (2013)&#39;, &#39;Ninotchka (1939)&#39;, &#39;Ninth Gate, The (1999)&#39;, &#39;Nirvana (1997)&#39;, &#39;Nixon (1995)&#39;, &#39;No Country for Old Men (2007)&#39;, &#39;No Direction Home: Bob Dylan (2005)&#39;, &#39;No End in Sight (2007)&#39;, &#39;No Escape (1994)&#39;, &#39;No Game No Life: Zero (2017)&#39;, &#39;No Holds Barred (1989)&#39;, &#34;No Man&#39;s Land (1987)&#34;, &#34;No Man&#39;s Land (2001)&#34;, &#39;No Mercy (1986)&#39;, &#39;No Reservations (2007)&#39;, &#39;No Small Affair (1984)&#39;, &#39;No Strings Attached (2011)&#39;, &#39;No Such Thing (2001)&#39;, &#39;No Way Jose (2015)&#39;, &#39;No Way Out (1987)&#39;, &#34;No. 1 Ladies&#39; Detective Agency, The (2008)&#34;, &#39;Noah (2014)&#39;, &#39;Nobody Knows (Dare mo shiranai) (2004)&#39;, &#39;Nobody Loves Me (Keiner liebt mich) (1994)&#39;, &#39;Nobody Speak: Hulk Hogan, Gawker and Trials of a Free Press (2017)&#39;, &#34;Nobody&#39;s Fool (1994)&#34;, &#39;Nocturnal Animals&#39;, &#39;Noin 7 veljestä (1968)&#39;, &#39;Noises Off... (1992)&#39;, &#39;Non-Stop (2014)&#39;, &#39;Norbit (2007)&#39;, &#34;Norm Macdonald: Hitler&#39;s Dog, Gossip &amp; Trickery (2017)&#34;, &#39;Norma Rae (1979)&#39;, &#39;Normal Life (1996)&#39;, &#39;Norte, El (1984)&#39;, &#39;North &amp; South (2004)&#39;, &#39;North (1994)&#39;, &#39;North Country (2005)&#39;, &#39;North Dallas Forty (1979)&#39;, &#39;North Pole: Open For Christmas (2015)&#39;, &#39;North by Northwest (1959)&#39;, &#39;Northanger Abbey (2007)&#39;, &#39;Northfork (2003)&#39;, &#39;Northmen - A Viking Saga (2014)&#39;, &#39;Northwest Passage (1940)&#39;, &#39;Nosferatu (Nosferatu, eine Symphonie des Grauens) (1922)&#39;, &#39;Nosferatu the Vampyre (Nosferatu: Phantom der Nacht) (1979)&#39;, &#39;Not Another Teen Movie (2001)&#39;, &#39;Not One Less (Yi ge dou bu neng shao) (1999)&#39;, &#39;Not Suitable for Children (2012)&#39;, &#39;Not Without My Daughter (1991)&#39;, &#39;Not on the Lips (Pas sur la bouche) (2003)&#39;, &#39;Notebook, The (2004)&#39;, &#39;Notes on a Scandal (2006)&#39;, &#39;Nothing (2003)&#39;, &#39;Nothing But Trouble (1991)&#39;, &#39;Nothing Personal (1995)&#39;, &#39;Nothing in Common (1986)&#39;, &#39;Nothing to Declare (Rien à déclarer) (2010)&#39;, &#39;Nothing to Lose (1994)&#39;, &#39;Nothing to Lose (1997)&#39;, &#39;Notorious (1946)&#39;, &#39;Notorious (2009)&#39;, &#39;Notorious Bettie Page, The (2005)&#39;, &#39;Notorious C.H.O. (2002)&#39;, &#39;Notting Hill (1999)&#39;, &#39;November (2004)&#39;, &#39;Novocaine (2001)&#39;, &#39;Now You See Me (2013)&#39;, &#39;Now You See Me 2 (2016)&#39;, &#39;Now and Then (1995)&#39;, &#39;Now, Voyager (1942)&#39;, &#39;Nowhere (1997)&#39;, &#39;Nowhere in Africa (Nirgendwo in Afrika) (2001)&#39;, &#39;Nowitzki: The Perfect Shot (2014)&#39;, &#39;Number 23, The (2007)&#39;, &#39;Nuns on the Run (1990)&#39;, &#39;Nuremberg (2000)&#39;, &#39;Nurse Betty (2000)&#39;, &#39;Nut Job, The (2014)&#39;, &#39;Nutty Professor II: The Klumps (2000)&#39;, &#39;Nutty Professor, The (1963)&#39;, &#39;Nutty Professor, The (1996)&#39;, &#39;Nymphomaniac: Volume I (2013)&#39;, &#39;Nymphomaniac: Volume II (2013)&#39;, &#39;O (2001)&#39;, &#39;O Brother, Where Art Thou? (2000)&#39;, &#39;O.J.: Made in America (2016)&#39;, &#39;OH in Ohio, The (2006)&#39;, &#39;OT: Our Town (2002)&#39;, &#39;Oasis (2002)&#39;, &#39;Object of Beauty, The (1991)&#39;, &#39;Object of My Affection, The (1998)&#39;, &#39;Objective, Burma! (1945)&#39;, &#39;Oblivion (2013)&#39;, &#39;Oblivion 2: Backlash (1996)&#39;, &#39;Observe and Report (2009)&#39;, &#39;Obsessed (2009)&#39;, &#39;Obsession (1965)&#39;, &#39;Obsession (1976)&#39;, &#34;Ocean&#39;s Eleven (2001)&#34;, &#34;Ocean&#39;s Eleven (a.k.a. Ocean&#39;s 11) (1960)&#34;, &#34;Ocean&#39;s Thirteen (2007)&#34;, &#34;Ocean&#39;s Twelve (2004)&#34;, &#39;Oceans (Océans) (2009)&#39;, &#39;Ocho apellidos vascos (2014)&#39;, &#39;Octagon, The (1980)&#39;, &#39;October Sky (1999)&#39;, &#39;Octopussy (1983)&#39;, &#39;Oculus (2013)&#39;, &#39;Odd Couple II, The (1998)&#39;, &#39;Odd Couple, The (1968)&#39;, &#39;Odd Life of Timothy Green, The (2012)&#39;, &#39;Odessa File, The (1974)&#39;, &#39;Of Human Bondage (1934)&#39;, &#39;Of Mice and Men (1939)&#39;, &#39;Of Mice and Men (1992)&#39;, &#39;Office Christmas Party (2016)&#39;, &#39;Office Romance (1977)&#39;, &#39;Office Space (1999)&#39;, &#39;Officer and a Gentleman, An (1982)&#39;, &#39;Official Story, The (La historia oficial) (1985)&#39;, &#39;Ogre, The (Unhold, Der) (1996)&#39;, &#39;Oh Boy (A Coffee in Berlin) (2012)&#39;, &#39;Oh, God! (1977)&#39;, &#39;Oh, God! Book II (1980)&#39;, &#39;Oh, God! You Devil (1984)&#39;, &#39;Oh, Hello: On Broadway (2017)&#39;, &#39;Okja (2017)&#39;, &#39;Oklahoma! (1955)&#39;, &#39;Old Boy (2003)&#39;, &#39;Old Dogs (2009)&#39;, &#39;Old Lady and the Pigeons, The (La vieille dame et les pigeons) (1997)&#39;, &#39;Old Man and the Sea, The (1958)&#39;, &#39;Old Men: Robbers (1971)&#39;, &#39;Old School (2003)&#39;, &#39;Old Yeller (1957)&#39;, &#39;Oldboy (2013)&#39;, &#39;Oliver &amp; Company (1988)&#39;, &#39;Oliver Twist (1948)&#39;, &#39;Oliver Twist (2005)&#39;, &#39;Oliver! (1968)&#39;, &#39;Olympus Has Fallen (2013)&#39;, &#39;Omega Code, The (1999)&#39;, &#39;Omega Doom (1996)&#39;, &#39;Omega Man, The (1971)&#39;, &#39;Omen, The (1976)&#39;, &#39;Omen, The (2006)&#39;, &#39;On Any Sunday (1971)&#39;, &#39;On Golden Pond (1981)&#39;, &#34;On Her Majesty&#39;s Secret Service (1969)&#34;, &#39;On a Clear Day (2005)&#39;, &#39;On the Beach (1959)&#39;, &#34;On the Other Side of the Tracks (De l&#39;autre côté du périph) (2012)&#34;, &#39;On the Ropes (1999)&#39;, &#39;On the Town (1949)&#39;, &#39;On the Trail of the Bremen Town Musicians (1973)&#39;, &#39;On the Waterfront (1954)&#39;, &#39;Once (2006)&#39;, &#39;Once Bitten (1985)&#39;, &#39;Once Upon a Time in America (1984)&#39;, &#39;Once Upon a Time in China (Wong Fei Hung) (1991)&#39;, &#39;Once Upon a Time in China II (Wong Fei-hung Ji Yi: Naam yi dong ji keung) (1992)&#39;, &#39;Once Upon a Time in China III (Wong Fei-hung tsi sam: Siwong tsangba) (1993)&#39;, &#39;Once Upon a Time in Mexico (2003)&#39;, &#39;Once Upon a Time in the Midlands (2002)&#39;, &#34;Once Upon a Time in the West (C&#39;era una volta il West) (1968)&#34;, &#39;Once Upon a Time... When We Were Colored (1995)&#39;, &#39;Once Were Warriors (1994)&#39;, &#39;Once a Thief (Zong heng si hai) (1991)&#39;, &#39;One Crazy Summer (1986)&#39;, &#39;One Day (2011)&#39;, &#39;One Day in September (1999)&#39;, &#39;One False Move (1992)&#39;, &#39;One Fine Day (1996)&#39;, &#34;One Flew Over the Cuckoo&#39;s Nest (1975)&#34;, &#39;One Hour Photo (2002)&#39;, &#39;One I Love, The (2014)&#39;, &#39;One Man Band (2005)&#39;, &#39;One Missed Call (Chakushin ari) (2003)&#39;, &#34;One Night at McCool&#39;s (2001)&#34;, &#39;One Tough Cop (1998)&#39;, &#39;One True Thing (1998)&#39;, &#39;One Week (1920)&#39;, &#39;One for the Money (2012)&#39;, &#39;One, The (2001)&#39;, &#39;One, Two, Three (1961)&#39;, &#39;One-Armed Swordsman, The (Dubei dao) (1967)&#39;, &#39;One-Eyed Jacks (1961)&#39;, &#39;One-Way Ticket to Mombasa (Menolippu Mombasaan) (2002)&#39;, &#39;Onegin (1999)&#39;, &#39;Ong-Bak: The Thai Warrior (Ong Bak) (2003)&#39;, &#39;Onibaba (1964)&#39;, &#39;Onion Movie, The (2008)&#39;, &#39;Only Angels Have Wings (1939)&#39;, &#39;Only God Forgives (2013)&#39;, &#39;Only Lovers Left Alive (2013)&#39;, &#39;Only Old Men Are Going to Battle (V boy idut odni stariki) (1973)&#39;, &#39;Only Yesterday (Omohide poro poro) (1991)&#39;, &#39;Only You (1994)&#39;, &#39;Only the Lonely (1991)&#39;, &#39;Only the Strong (1993)&#39;, &#39;Ooops! Noah is Gone... (2015)&#39;, &#39;Open Hearts (Elsker dig for evigt) (2002)&#39;, &#39;Open Range (2003)&#39;, &#39;Open Season (2006)&#39;, &#39;Open Water (2003)&#39;, &#39;Open Water 2: Adrift (2006)&#39;, &#39;Open Your Eyes (Abre los ojos) (1997)&#39;, &#39;Opera (1987)&#39;, &#34;Operation &#39;Y&#39; &amp; Other Shurik&#39;s Adventures (1965)&#34;, &#39;Operation Dumbo Drop (1995)&#39;, &#39;Operation Petticoat (1959)&#39;, &#39;Opposite of Sex, The (1998)&#39;, &#39;Orange County (2002)&#39;, &#39;Orca: The Killer Whale (1977)&#39;, &#34;Orchestra Rehearsal (Prova d&#39;orchestra) (1978)&#34;, &#39;Order, The (2001)&#39;, &#39;Ordet (Word, The) (1955)&#39;, &#39;Ordinary Decent Criminal (2000)&#39;, &#39;Ordinary Miracle (1978)&#39;, &#39;Ordinary People (1980)&#39;, &#39;Orgazmo (1997)&#39;, &#39;Original Kings of Comedy, The (2000)&#39;, &#39;Original Sin (2001)&#39;, &#39;Orlando (1992)&#39;, &#39;Orphan (2009)&#39;, &#39;Orphanage, The (Orfanato, El) (2007)&#39;, &#39;Osama (2003)&#39;, &#39;Oscar (1967)&#39;, &#39;Oscar (1991)&#39;, &#39;Oscar and Lucinda (a.k.a. Oscar &amp; Lucinda) (1997)&#39;, &#39;Osmosis Jones (2001)&#39;, &#39;Otello (1986)&#39;, &#39;Othello (1995)&#39;, &#39;Othello (Tragedy of Othello: The Moor of Venice, The) (1952)&#39;, &#39;Other Boleyn Girl, The (2008)&#39;, &#39;Other Guys, The (2010)&#39;, &#34;Other People&#39;s Money (1991)&#34;, &#39;Other Sister, The (1999)&#39;, &#39;Other Woman, The (2014)&#39;, &#39;Others, The (2001)&#39;, &#39;Our Brand Is Crisis (2015)&#39;, &#39;Our Family Wedding (2010)&#39;, &#39;Our Hospitality (1923)&#39;, &#39;Our Idiot Brother (2011)&#39;, &#39;Our Lady of the Assassins (Virgen de los sicarios, La) (2000)&#39;, &#39;Our Lips Are Sealed (2000)&#39;, &#39;Our Man Flint (1965)&#39;, &#39;Our Town (1940)&#39;, &#39;Out Cold (1989)&#39;, &#39;Out Cold (2001)&#39;, &#39;Out of Africa (1985)&#39;, &#39;Out of Sight (1998)&#39;, &#39;Out of Time (2003)&#39;, &#39;Out of the Past (1947)&#39;, &#39;Out to Sea (1997)&#39;, &#39;Out-of-Towners, The (1999)&#39;, &#39;Outbreak (1995)&#39;, &#34;Outfoxed: Rupert Murdoch&#39;s War on Journalism (2004)&#34;, &#39;Outland (1981)&#39;, &#39;Outlander (2008)&#39;, &#39;Outlaw Josey Wales, The (1976)&#39;, &#39;Outpost (2008)&#39;, &#39;Outrageous Fortune (1987)&#39;, &#39;Outside Providence (1999)&#39;, &#39;Outsiders, The (1983)&#39;, &#39;Outsourced (2006)&#39;, &#39;Over the Garden Wall (2013)&#39;, &#39;Over the Hedge (2006)&#39;, &#39;Over the Top (1987)&#39;, &#39;Overboard (1987)&#39;, &#39;Overnight Delivery (1998)&#39;, &#39;Oversimplification of Her Beauty, An (2012)&#39;, &#39;Owning Mahowny (2003)&#39;, &#39;Ox-Bow Incident, The (1943)&#39;, &#39;Oxygen (1999)&#39;, &#39;Oz the Great and Powerful (2013)&#39;, &#39;P.S. (2004)&#39;, &#39;P.S. I Love You (2007)&#39;, &#39;PCU (1994)&#39;, &#39;PK (2014)&#39;, &#39;Pacific Heights (1990)&#39;, &#39;Pacific Rim (2013)&#39;, &#39;Pacific Rim: Uprising (2018)&#39;, &#39;Pacifier, The (2005)&#39;, &#39;Package, The (1989)&#39;, &#39;Pact, The (2012)&#39;, &#39;Paddington (2014)&#39;, &#39;Paddington 2 (2017)&#39;, &#39;Pagemaster, The (1994)&#39;, &#39;Paid in Full (2002)&#39;, &#39;Pain &amp; Gain (2013)&#39;, &#39;Paint Your Wagon (1969)&#39;, &#39;Painted Skin (2008)&#39;, &#39;Painted Veil, The (2006)&#39;, &#39;Paisan (Paisà) (1946)&#39;, &#39;Pajama Game, The (1957)&#39;, &#39;Pale Rider (1985)&#39;, &#39;Palindromes (2004)&#39;, &#39;Pallbearer, The (1996)&#39;, &#39;Palm Beach Story, The (1942)&#39;, &#39;Palmetto (1998)&#39;, &#39;Palookaville (1996)&#39;, &#39;Pan (2015)&#39;, &#34;Pan&#39;s Labyrinth (Laberinto del fauno, El) (2006)&#34;, &#39;Pandorum (2009)&#39;, &#39;Panic (2000)&#39;, &#39;Panic Room (2002)&#39;, &#39;Paparazzi (2004)&#39;, &#39;Paper Birds (Pájaros de papel) (2010)&#39;, &#39;Paper Chase, The (1973)&#39;, &#39;Paper Clips (2004)&#39;, &#39;Paper Heart (2009)&#39;, &#39;Paper Man (2009)&#39;, &#39;Paper Moon (1973)&#39;, &#39;Paper Towns (2015)&#39;, &#39;Paper, The (1994)&#39;, &#39;Paperhouse (1988)&#39;, &#39;Paperman (2012)&#39;, &#39;Papillon (1973)&#39;, &#39;Paprika (Papurika) (2006)&#39;, &#39;ParaNorman (2012)&#39;, &#39;Paradine Case, The (1947)&#39;, &#39;Paradise (1982)&#39;, &#39;Paradise Lost 2: Revelations (2000)&#39;, &#39;Paradise Lost 3: Purgatory (2011)&#39;, &#39;Paradise Lost: The Child Murders at Robin Hood Hills (1996)&#39;, &#39;Paradise Now (2005)&#39;, &#39;Paradise Road (1997)&#39;, &#39;Paradox (2010)&#39;, &#39;Paranoid Park (2007)&#39;, &#39;Paranormal Activity (2009)&#39;, &#39;Paranormal Activity 2 (2010)&#39;, &#39;Paranormal Activity 3 (2011)&#39;, &#39;Paranormal Activity 4 (2012)&#39;, &#39;Parasite (1982)&#39;, &#39;Parasyte: Part 1 (2014)&#39;, &#39;Parasyte: Part 2 (2015)&#39;, &#39;Parent Trap, The (1961)&#39;, &#39;Parent Trap, The (1998)&#39;, &#39;Parental Guidance (2012)&#39;, &#39;Parenthood (1989)&#39;, &#39;Paris Is Burning (1990)&#39;, &#34;Paris, I Love You (Paris, je t&#39;aime) (2006)&#34;, &#39;Paris, Texas (1984)&#39;, &#39;Particle Fever (2013)&#39;, &#39;Partisan (2015)&#39;, &#39;Partly Cloudy (2009)&#39;, &#39;Party 2, The (Boum 2, La) (1982)&#39;, &#39;Party Girl (1995)&#39;, &#39;Party Monster (2003)&#39;, &#39;Party, The (1968)&#39;, &#39;Party, The (Boum, La) (1980)&#39;, &#39;Passage to India, A (1984)&#39;, &#39;Passenger 57 (1992)&#39;, &#39;Passenger, The (Professione: reporter) (1975)&#39;, &#39;Passengers (2016)&#39;, &#39;Passion (2012)&#39;, &#39;Passion Fish (1992)&#39;, &#39;Passion of Anna, The (Passion, En) (1969)&#39;, &#34;Passion of Joan of Arc, The (Passion de Jeanne d&#39;Arc, La) (1928)&#34;, &#39;Passion of the Christ, The (2004)&#39;, &#39;Pat Garrett and Billy the Kid (1973)&#39;, &#39;Pat and Mike (1952)&#39;, &#39;Patch Adams (1998)&#39;, &#39;Patch of Blue, A (1965)&#39;, &#39;Paterson&#39;, &#39;Pathology (2008)&#39;, &#39;Paths of Glory (1957)&#39;, &#39;Patlabor 2: The Movie (1993)&#39;, &#39;Patlabor: The Movie (Kidô keisatsu patorebâ: The Movie) (1989)&#39;, &#39;Patrik Age 1.5 (Patrik 1,5) (2008)&#39;, &#39;Patriot Games (1992)&#39;, &#39;Patriot, The (1998)&#39;, &#39;Patriot, The (2000)&#39;, &#39;Patti Rocks (1988)&#39;, &#39;Patton (1970)&#39;, &#39;Patton Oswalt: My Weakness Is Strong (2009)&#39;, &#39;Patton Oswalt: Tragedy Plus Comedy Equals Time (2014)&#39;, &#39;Paul (2011)&#39;, &#39;Paul Blart: Mall Cop (2009)&#39;, &#39;Paul Blart: Mall Cop 2 (2015)&#39;, &#39;Paulie (1998)&#39;, &#39;Pauline at the Beach (Pauline à la Plage) (1983)&#39;, &#39;Pawn (2013)&#39;, &#39;Pawn Sacrifice (2015)&#39;, &#39;Pawnbroker, The (1964)&#39;, &#39;Pay It Forward (2000)&#39;, &#39;Payback (1999)&#39;, &#39;Paycheck (2003)&#39;, &#39;Peaceful Warrior (2006)&#39;, &#39;Peacekeeper, The (1997)&#39;, &#39;Peacemaker, The (1997)&#39;, &#39;Peanuts Movie, The (2015)&#39;, &#39;Pearl Harbor (2001)&#39;, &#39;Pearl Jam Twenty (2011)&#39;, &#39;Pecker (1998)&#39;, &#34;Pee-wee&#39;s Big Adventure (1985)&#34;, &#39;Peeping Tom (1960)&#39;, &#39;Peggy Sue Got Married (1986)&#39;, &#39;Pekka ja Pätkä Suezilla (1958)&#39;, &#39;Pekka ja Pätkä salapoliiseina (1957)&#39;, &#39;Pelican Brief, The (1993)&#39;, &#39;Pelle the Conqueror (Pelle erobreren) (1987)&#39;, &#39;Pelé: Birth of a Legend (2016)&#39;, &#39;Penelope (2006)&#39;, &#39;Penguins of Madagascar (2014)&#39;, &#39;Penn &amp; Teller Get Killed (1989)&#39;, &#39;Penny Serenade (1941)&#39;, &#39;People I Know (2002)&#39;, &#39;People That Time Forgot, The (1977)&#39;, &#39;People Under the Stairs, The (1991)&#39;, &#39;People Will Talk (1951)&#39;, &#39;People vs. Larry Flynt, The (1996)&#39;, &#39;Percy Jackson &amp; the Olympians: The Lightning Thief (2010)&#39;, &#39;Percy Jackson: Sea of Monsters (2013)&#39;, &#39;Perez Family, The (1995)&#39;, &#39;Perfect (1985)&#39;, &#39;Perfect Blue (1997)&#39;, &#39;Perfect Candidate, A (1996)&#39;, &#39;Perfect Crime, The (Crimen Ferpecto) (Ferpect Crime) (2004)&#39;, &#39;Perfect Getaway, A (2009)&#39;, &#39;Perfect Man, The (2005)&#39;, &#39;Perfect Murder, A (1998)&#39;, &#39;Perfect Plan, A (Plan parfait, Un) (2012)&#39;, &#39;Perfect Score, The (2004)&#39;, &#39;Perfect Sense (2011)&#39;, &#39;Perfect Storm, The (2000)&#39;, &#39;Perfect World, A (1993)&#39;, &#39;Performance (1970)&#39;, &#39;Perfume: The Story of a Murderer (2006)&#39;, &#39;Perks of Being a Wallflower, The (2012)&#39;, &#39;Permanent Midnight (1998)&#39;, &#39;Persepolis (2007)&#39;, &#39;Persona (1966)&#39;, &#39;Personal Velocity (2002)&#39;, &#39;Persuasion (1995)&#39;, &#39;Persuasion (2007)&#39;, &#34;Pervert&#39;s Guide to Cinema, The (2006)&#34;, &#34;Pervert&#39;s Guide to Ideology, The (2012)&#34;, &#39;Pest, The (1997)&#39;, &#39;Pet Sematary (1989)&#39;, &#39;Pet Sematary II (1992)&#39;, &#34;Pete&#39;s Dragon (1977)&#34;, &#34;Pete&#39;s Dragon (2016)&#34;, &#39;Peter Pan (1953)&#39;, &#39;Peter Pan (1960)&#39;, &#39;Peter Pan (2003)&#39;, &#34;Peter&#39;s Friends (1992)&#34;, &#39;Peyton Place (1957)&#39;, &#39;Phantasm (1979)&#39;, &#39;Phantasm II (1988)&#39;, &#39;Phantasm III: Lord of the Dead (1994)&#39;, &#39;Phantasm IV: Oblivion (1998)&#39;, &#39;Phantom Thread (2017)&#39;, &#39;Phantom Tollbooth, The (1970)&#39;, &#39;Phantom of the Opera, The (2004)&#39;, &#39;Phantom of the Paradise (1974)&#39;, &#39;Phantom, The (1996)&#39;, &#39;Phantoms (1998)&#39;, &#39;Phenomena (a.k.a. Creepers) (1985)&#39;, &#39;Phenomenon (1996)&#39;, &#39;Phil Spector (2013)&#39;, &#39;Philadelphia (1993)&#39;, &#39;Philadelphia Experiment, The (1984)&#39;, &#39;Philadelphia Story, The (1940)&#39;, &#39;Philomena (2013)&#39;, &#39;Phineas and Ferb the Movie: Across the 2nd Dimension (2011)&#39;, &#39;Phir Hera Pheri (2006)&#39;, &#39;Phone Booth (2002)&#39;, &#39;Pi (1998)&#39;, &#39;Pianist, The (2002)&#39;, &#39;Piano Teacher, The (La pianiste) (2001)&#39;, &#39;Piano, The (1993)&#39;, &#39;Pickpocket (1959)&#39;, &#39;Pickup on South Street (1953)&#39;, &#39;Picnic (1955)&#39;, &#39;Picnic at Hanging Rock (1975)&#39;, &#39;Picture Bride (Bijo photo) (1994)&#39;, &#39;Picture Perfect (1997)&#39;, &#39;Picture of Dorian Gray, The (1945)&#39;, &#39;Pie in the Sky (1996)&#39;, &#39;Pieces of April (2003)&#39;, &#39;Pierrot le fou (1965)&#39;, &#34;Piglet&#39;s Big Movie (2003)&#34;, &#39;Pillow Book, The (1996)&#39;, &#39;Pillow Talk (1959)&#39;, &#39;Pineapple Express (2008)&#39;, &#39;Pink Cadillac (1989)&#39;, &#39;Pink Flamingos (1972)&#39;, &#39;Pink Floyd: The Wall (1982)&#39;, &#39;Pink Panther 2, The (2009)&#39;, &#39;Pink Panther Strikes Again, The (1976)&#39;, &#39;Pink Panther, The (1963)&#39;, &#39;Pink Panther, The (2006)&#39;, &#39;Pinocchio (1940)&#39;, &#39;Pinocchio (2002)&#39;, &#39;Piper (2016)&#39;, &#39;Piranha (1978)&#39;, &#39;Piranha (Piranha 3D) (2010)&#39;, &#39;Piranha 3DD (a.k.a. Piranha DD) (2012)&#39;, &#39;Piranha II: The Spawning (1981)&#39;, &#39;Pirate Movie, The (1982)&#39;, &#39;Pirate Radio (2009)&#39;, &#39;Pirates of Silicon Valley (1999)&#39;, &#34;Pirates of the Caribbean: At World&#39;s End (2007)&#34;, &#34;Pirates of the Caribbean: Dead Man&#39;s Chest (2006)&#34;, &#39;Pirates of the Caribbean: Dead Men Tell No Tales (2017)&#39;, &#39;Pirates of the Caribbean: On Stranger Tides (2011)&#39;, &#39;Pirates of the Caribbean: The Curse of the Black Pearl (2003)&#39;, &#39;Pirates! Band of Misfits, The (2012)&#39;, &#39;Pit and the Pendulum (1961)&#39;, &#39;Pitch Black (2000)&#39;, &#39;Pitch Perfect (2012)&#39;, &#39;Pitch Perfect 2 (2015)&#39;, &#39;Pitfall (Otoshiana) (1962)&#39;, &#39;Pixel Perfect (2004)&#39;, &#39;Pixels (2015)&#39;, &#39;Place Beyond the Pines, The (2012)&#39;, &#39;Place in the Sun, A (1951)&#39;, &#39;Places in the Heart (1984)&#39;, &#39;Plain Clothes (1988)&#39;, &#39;Plan 9 from Outer Space (1959)&#39;, &#39;Planes (2013)&#39;, &#39;Planes, Trains &amp; Automobiles (1987)&#39;, &#39;Planes: Fire &amp; Rescue (2014)&#39;, &#39;Planet 51 (2009)&#39;, &#39;Planet Earth (2006)&#39;, &#39;Planet Earth II (2016)&#39;, &#39;Planet Terror (2007)&#39;, &#39;Planet of the Apes (1968)&#39;, &#39;Planet of the Apes (2001)&#39;, &#39;Plastic (2014)&#39;, &#39;Platoon (1986)&#39;, &#39;Play It Again, Sam (1972)&#39;, &#39;Play Misty for Me (1971)&#39;, &#39;Play Time (a.k.a. Playtime) (1967)&#39;, &#39;Play the Game (2009)&#39;, &#39;Player, The (1992)&#39;, &#39;Playing God (1997)&#39;, &#39;Playing It Cool (2014)&#39;, &#39;Playing by Heart (1998)&#39;, &#39;Playing for Keeps (2012)&#39;, &#39;Playing the Victim (Izobrazhaya zhertvu) (2006)&#39;, &#39;Pleasantville (1998)&#39;, &#34;Please Don&#39;t Eat the Daisies (1960)&#34;, &#39;Please Give (2010)&#39;, &#39;Pledge, The (2001)&#39;, &#39;Plunkett &amp; MaCleane (1999)&#39;, &#39;Pocahontas (1995)&#39;, &#39;Pocahontas II: Journey to a New World (1998) &#39;, &#39;Pocketful of Miracles (1961)&#39;, &#39;Poetic Justice (1993)&#39;, &#39;Point Blank (1967)&#39;, &#39;Point Break (1991)&#39;, &#39;Point of No Return (1993)&#39;, &#39;Poison Ivy (1992)&#39;, &#39;Poison Ivy II (1996)&#39;, &#39;Poison Ivy: New Seduction (1997)&#39;, &#39;Pokemon 4 Ever (a.k.a. Pokémon 4: The Movie) (2002)&#39;, &#39;Poker Night (2014)&#39;, &#39;Pokémon 3: The Movie (2001)&#39;, &#39;Pokémon Heroes (2003)&#39;, &#39;Pokémon the Movie 2000 (2000)&#39;, &#39;Pokémon: The First Movie (1998)&#39;, &#39;Polar Express, The (2004)&#39;, &#39;Police Academy (1984)&#39;, &#39;Police Academy 2: Their First Assignment (1985)&#39;, &#39;Police Academy 3: Back in Training (1986)&#39;, &#39;Police Academy 4: Citizens on Patrol (1987)&#39;, &#39;Police Academy 5: Assignment: Miami Beach (1988)&#39;, &#39;Police Academy 6: City Under Siege (1989)&#39;, &#39;Police Academy: Mission to Moscow (1994)&#39;, &#39;Police Story (Ging chaat goo si) (1985)&#39;, &#39;Police Story 2 (Ging chaat goo si juk jaap) (1988)&#39;, &#39;Polish Wedding (1998)&#39;, &#39;Pollock (2000)&#39;, &#39;Pollyanna (1960)&#39;, &#39;Poltergeist (1982)&#39;, &#39;Poltergeist II: The Other Side (1986)&#39;, &#39;Poltergeist III (1988)&#39;, &#39;Polyester (1981)&#39;, &#39;Polytechnique (2009)&#39;, &#39;Pom Poko (a.k.a. Raccoon War, The) (Heisei tanuki gassen pompoko) (1994)&#39;, &#39;Pompatus of Love, The (1996)&#39;, &#39;Ponette (1996)&#39;, &#39;Pontypool (2008)&#39;, &#39;Ponyo (Gake no ue no Ponyo) (2008)&#39;, &#39;Poolhall Junkies (2002)&#39;, &#39;Pootie Tang (2001)&#39;, &#39;Pope of Greenwich Village, The (1984)&#39;, &#39;Popeye (1980)&#39;, &#39;Popstar: Never Stop Never Stopping (2016)&#39;, &#39;Porco Rosso (Crimson Pig) (Kurenai no buta) (1992)&#39;, &#39;Pork Chop Hill (1959)&#39;, &#39;Porky in Wackyland (1938)&#39;, &#34;Porky&#39;s (1982)&#34;, &#34;Porky&#39;s Hare Hunt (1938)&#34;, &#34;Porky&#39;s II: The Next Day (1983)&#34;, &#34;Porky&#39;s Revenge (1985)&#34;, &#39;Pornstar: The Legend of Ron Jeremy (2001)&#39;, &#39;Portrait of a Lady, The (1996)&#39;, &#39;Poseidon (2006)&#39;, &#39;Poseidon Adventure, The (1972)&#39;, &#39;Possession (2002)&#39;, &#39;Postman Always Rings Twice, The (1946)&#39;, &#39;Postman Always Rings Twice, The (1981)&#39;, &#39;Postman, The (1997)&#39;, &#39;Postman, The (Postino, Il) (1994)&#39;, &#39;Powaqqatsi (1988)&#39;, &#39;Powder (1995)&#39;, &#39;Powder Blue (2009)&#39;, &#39;Power Rangers (2017)&#39;, &#39;Power of Nightmares, The: The Rise of the Politics of Fear (2004)&#39;, &#39;Power of One, The (1992)&#39;, &#39;Power/Rangers (2015)&#39;, &#39;Powerpuff Girls, The (2002)&#39;, &#39;Practical Magic (1998)&#39;, &#39;Prairie Home Companion, A (2006)&#39;, &#39;Prancer (1989)&#39;, &#39;Prayers for Bobby (2009)&#39;, &#34;Preacher&#39;s Wife, The (1996)&#34;, &#39;Precious (2009)&#39;, &#39;Precious Cargo (2016)&#39;, &#39;Predator (1987)&#39;, &#39;Predator 2 (1990)&#39;, &#39;Predators (2010)&#39;, &#39;Predestination (2014)&#39;, &#39;Prefontaine (1997)&#39;, &#39;Prelude to a Kiss (1992)&#39;, &#39;Premium Rush (2012)&#39;, &#39;Premonition (2007)&#39;, &#39;Presidio, The (1988)&#39;, &#39;Prestige, The (2006)&#39;, &#39;Presto (2008)&#39;, &#39;Presumed Innocent (1990)&#39;, &#39;Pretty One, The (2013)&#39;, &#39;Pretty Persuasion (2005)&#39;, &#39;Pretty Woman (1990)&#39;, &#39;Pretty in Pink (1986)&#39;, &#39;Prey for Rock &amp; Roll (2003)&#39;, &#39;Price of Milk, The (2000)&#39;, &#39;Priceless (Hors de prix) (2006)&#39;, &#39;Pride &amp; Prejudice (2005)&#39;, &#39;Pride (2007)&#39;, &#39;Pride (2014)&#39;, &#39;Pride and Glory (2008)&#39;, &#39;Pride and Prejudice (1940)&#39;, &#39;Pride and Prejudice (1995)&#39;, &#39;Pride and Prejudice and Zombies (2016)&#39;, &#39;Pride of the Yankees, The (1942)&#39;, &#39;Priest (1994)&#39;, &#39;Priest (2011)&#39;, &#39;Priklyucheniya Kapitana Vrungelya (1979)&#39;, &#39;Primal Fear (1996)&#39;, &#39;Primary Colors (1998)&#39;, &#39;Prime (2005)&#39;, &#39;Prime Suspect 2 (1992)&#39;, &#39;Prime Suspect 3 (1993)&#39;, &#39;Prime Suspect 6: The Last Witness (2003)&#39;, &#39;Prime Suspect: The Lost Child (1995)&#39;, &#39;Prime of Miss Jean Brodie, The (1969)&#39;, &#39;Primer (2004)&#39;, &#39;Primeval (2007)&#39;, &#39;Prince &amp; Me, The (2004)&#39;, &#39;Prince of Darkness (1987)&#39;, &#39;Prince of Egypt, The (1998)&#39;, &#39;Prince of Persia: The Sands of Time (2010)&#39;, &#39;Prince of Tides, The (1991)&#39;, &#39;Princess (Prinsessa) (2010)&#39;, &#39;Princess Blade, The (Shura Yukihime) (2001)&#39;, &#39;Princess Bride, The (1987)&#39;, &#39;Princess Caraboo (1994)&#39;, &#39;Princess Diaries 2: Royal Engagement, The (2004)&#39;, &#39;Princess Diaries, The (2001)&#39;, &#39;Princess Mononoke (Mononoke-hime) (1997)&#39;, &#39;Princess and the Frog, The (2009)&#39;, &#39;Princess and the Pirate, The (1944)&#39;, &#39;Princess and the Warrior, The (Krieger und die Kaiserin, Der) (2000)&#39;, &#39;Principal, The (1987)&#39;, &#39;Prison Break: The Final Break (2009)&#39;, &#39;Prisoners (2013)&#39;, &#39;Private Benjamin (1980)&#39;, &#39;Private Eyes, The (1981)&#39;, &#39;Private Life of Sherlock Holmes, The (1970)&#39;, &#39;Private Lives of Pippa Lee, The (2009)&#39;, &#39;Private Parts (1997)&#39;, &#39;Private Resort (1985)&#39;, &#39;Private School (1983)&#39;, &#34;Prizzi&#39;s Honor (1985)&#34;, &#39;Problem Child (1990)&#39;, &#39;Problem Child 2 (1991)&#39;, &#39;Producers, The (1968)&#39;, &#39;Producers, The (2005)&#39;, &#39;Professional, The (Le professionnel) (1981)&#39;, &#39;Program, The (1993)&#39;, &#34;Project A (&#39;A&#39; gai waak) (1983)&#34;, &#34;Project A 2 (&#39;A&#39; gai wak juk jap) (1987)&#34;, &#39;Project Almanac (2015)&#39;, &#39;Project X (1968)&#39;, &#39;Project X (1987)&#39;, &#39;Project X (2012)&#39;, &#39;Prom Night (1980)&#39;, &#39;Prom Night (2008)&#39;, &#39;Prom Night IV: Deliver Us From Evil (1992)&#39;, &#39;Prometheus (2012)&#39;, &#39;Promise, The (La promesse) (1996)&#39;, &#39;Promised Land (2012)&#39;, &#39;Promises (2001)&#39;, &#39;Proof (2005)&#39;, &#39;Proof of Life (2000)&#39;, &#39;Prophecy, The (1995)&#39;, &#39;Prophet, A (Un Prophète) (2009)&#39;, &#39;Proposal, The (2009)&#39;, &#39;Proposition, The (2005)&#39;, &#39;Protector, The (1985)&#39;, &#39;Protector, The (a.k.a. Warrior King) (Tom yum goong) (2005)&#39;, &#39;Protocol (1984)&#39;, &#39;Prozac Nation (2001)&#39;, &#39;Psycho (1960)&#39;, &#39;Psycho (1998)&#39;, &#39;Psycho Beach Party (2000)&#39;, &#39;Psycho II (1983)&#39;, &#39;Psycho III (1986)&#39;, &#39;Public Enemies (2009)&#39;, &#39;Public Enemy, The (1931)&#39;, &#39;Public Eye, The (1992)&#39;, &#39;Puffy Chair, The (2006)&#39;, &#39;Pulp Fiction (1994)&#39;, &#39;Pulse (2006)&#39;, &#39;Pulse (Kairo) (2001)&#39;, &#39;Pump Up the Volume (1990)&#39;, &#39;Pumping Iron (1977)&#39;, &#39;Pumpkin (2002)&#39;, &#39;Pumpkinhead (1988)&#39;, &#39;Punch-Drunk Love (2002)&#39;, &#39;Punchline (1988)&#39;, &#39;Puncture (2011)&#39;, &#39;Punisher, The (1989)&#39;, &#39;Punisher, The (2004)&#39;, &#39;Punisher: War Zone (2008)&#39;, &#39;Puppet Master (1989)&#39;, &#39;Puppet Master 4 (1993)&#39;, &#39;Puppet Master 5: The Final Chapter (1994)&#39;, &#39;Puppet Master II (1991)&#39;, &#34;Puppet Master III: Toulon&#39;s Revenge (1991)&#34;, &#39;Puppet Masters, The (1994)&#39;, &#39;Pure Formality, A (Pura formalità, Una) (1994)&#39;, &#39;Purgatory (1999)&#39;, &#39;Purge, The (2013)&#39;, &#39;Purge: Anarchy, The (2014)&#39;, &#39;Purple Butterfly (Zi hudie) (2003)&#39;, &#39;Purple Rain (1984)&#39;, &#39;Purple Rose of Cairo, The (1985)&#39;, &#39;Pursuit of Happiness (2001)&#39;, &#39;Pursuit of Happyness, The (2006)&#39;, &#39;Push (2009)&#39;, &#39;Pusher (1996)&#39;, &#39;Pusher II: With Blood on My Hands (2004)&#39;, &#34;Pusher III: I&#39;m the Angel of Death (2005)&#34;, &#39;Pushing Hands (Tui shou) (1992)&#39;, &#39;Pushing Tin (1999)&#39;, &#39;Puss in Boots (2011)&#39;, &#39;Puss in Boots (Nagagutsu o haita neko) (1969)&#39;, &#39;Puss in Boots: The Three Diablos (2012)&#39;, &#39;Pygmalion (1938)&#39;, &#34;Pyromaniac&#39;s Love Story, A (1995)&#34;, &#39;Pépé le Moko (1937)&#39;, &#39;Quadrophenia (1979)&#39;, &#39;Quantum of Solace (2008)&#39;, &#39;Quatermass and the Pit (1967)&#39;, &#39;Queen Margot (Reine Margot, La) (1994)&#39;, &#39;Queen of Versailles, The (2012)&#39;, &#39;Queen of the Damned (2002)&#39;, &#39;Quest (2017)&#39;, &#39;Quest for Camelot (1998)&#39;, &#39;Quest for Fire (Guerre du feu, La) (1981)&#39;, &#39;Quest, The (1996)&#39;, &#39;Quick Change (1990)&#39;, &#39;Quick and the Dead, The (1995)&#39;, &#39;Quicksilver (1986)&#39;, &#39;Quiet American, The (2002)&#39;, &#39;Quiet Earth, The (1985)&#39;, &#39;Quiet Man, The (1952)&#39;, &#39;Quigley Down Under (1990)&#39;, &#39;Quills (2000)&#39;, &#39;Quiz Show (1994)&#39;, &#39;Quo Vadis (1951)&#39;, &#39;R.I.P.D. (2013)&#39;, &#39;RKO 281 (1999)&#39;, &#39;RV (2006)&#39;, &#39;Rabbit Hole (2010)&#39;, &#39;Rabbit-Proof Fence (2002)&#39;, &#39;Rabbits (2002)&#39;, &#39;Race (2016)&#39;, &#39;Race to Witch Mountain (2009)&#39;, &#39;Rachel Getting Married (2008)&#39;, &#39;Racing Stripes (2005)&#39;, &#39;Radio (2003)&#39;, &#39;Radio Day (2008)&#39;, &#39;Radio Days (1987)&#39;, &#39;Radio Flyer (1992)&#39;, &#39;Radioland Murders (1994)&#39;, &#39;Rage of Honor (1987)&#39;, &#39;Rage: Carrie 2, The (1999)&#39;, &#39;Raging Bull (1980)&#39;, &#39;Ragtime (1981)&#39;, &#39;Raiders of the Lost Ark (Indiana Jones and the Raiders of the Lost Ark) (1981)&#39;, &#39;Raiders of the Lost Ark: The Adaptation (1989)&#39;, &#39;Railway Children, The (1970)&#39;, &#39;Rain (2001)&#39;, &#39;Rain Man (1988)&#39;, &#39;Raining Stones (1993)&#39;, &#39;Rainmaker, The (1997)&#39;, &#39;Raise Your Voice (2004)&#39;, &#39;Raise the Red Lantern (Da hong deng long gao gao gua) (1991)&#39;, &#39;Raise the Titanic (1980)&#39;, &#39;Raisin in the Sun, A (1961)&#39;, &#39;Raising Arizona (1987)&#39;, &#39;Raising Cain (1992)&#39;, &#39;Raising Helen (2004)&#39;, &#39;Raising Victor Vargas (2002)&#39;, &#39;Rambo (Rambo 4) (2008)&#39;, &#39;Rambo III (1988)&#39;, &#39;Rambo: First Blood Part II (1985)&#39;, &#39;Ramona and Beezus (2010)&#39;, &#39;Rampage (2018)&#39;, &#39;Ran (1985)&#39;, &#39;Random Harvest (1942)&#39;, &#39;Random Hearts (1999)&#39;, &#39;Rango (2011)&#39;, &#39;Ransom (1996)&#39;, &#39;Rape Me (Baise-moi) (2000)&#39;, &#39;Rapid Fire (1992)&#39;, &#39;Rapture, The (1991)&#39;, &#39;Rapture-Palooza (2013)&#39;, &#39;Rare Birds (2001)&#39;, &#39;Rare Exports: A Christmas Tale (Rare Exports) (2010)&#39;, &#39;Rashomon (Rashômon) (1950)&#39;, &#39;Rat Race (2001)&#39;, &#39;Ratatouille (2007)&#39;, &#39;Ratchet &amp; Clank (2016)&#39;, &#39;Raven, The (2012)&#39;, &#39;Ravenous (1999)&#39;, &#39;Raw Deal (1986)&#39;, &#39;Rawhead Rex (1986)&#39;, &#39;Ray (2004)&#39;, &#34;Razor&#39;s Edge, The (1984)&#34;, &#39;Re-Animator (1985)&#39;, &#39;Reader, The (2008)&#39;, &#39;Ready Player One&#39;, &#39;Ready to Rumble (2000)&#39;, &#39;Ready to Wear (Pret-A-Porter) (1994)&#39;, &#39;Real Blonde, The (1997)&#39;, &#39;Real Genius (1985)&#39;, &#39;Real Life (1979)&#39;, &#39;Real McCoy, The (1993)&#39;, &#39;Real Steel (2011)&#39;, &#39;Real Women Have Curves (2002)&#39;, &#39;Reality (2014)&#39;, &#39;Reality Bites (1994)&#39;, &#39;Reaping, The (2007)&#39;, &#39;Rear Window (1954)&#39;, &#39;Rebecca (1940)&#39;, &#39;Rebel Without a Cause (1955)&#39;, &#39;Rebound (2005)&#39;, &#39;Rebound, The (2009)&#39;, &#34;Recess: School&#39;s Out (2001)&#34;, &#39;Reckless (1995)&#39;, &#39;Reckless Kelly (1994)&#39;, &#39;Reckoning, The (2004)&#39;, &#39;Recount (2008)&#39;, &#39;Recruit, The (2003)&#39;, &#39;Red (2010)&#39;, &#39;Red 2 (2013)&#39;, &#39;Red Army (2014)&#39;, &#39;Red Badge of Courage, The (1951)&#39;, &#39;Red Balloon, The (Ballon rouge, Le) (1956)&#39;, &#39;Red Beard (Akahige) (1965)&#39;, &#39;Red Cliff (Chi bi) (2008)&#39;, &#39;Red Cliff Part II (Chi Bi Xia: Jue Zhan Tian Xia) (2009)&#39;, &#39;Red Corner (1997)&#39;, &#39;Red Dawn (1984)&#39;, &#39;Red Dawn (2012)&#39;, &#39;Red Dragon (2002)&#39;, &#39;Red Eye (2005)&#39;, &#39;Red Flag (2012)&#39;, &#39;Red Heat (1988)&#39;, &#39;Red Hill (2010)&#39;, &#39;Red Lights (Feux rouges) (2004)&#39;, &#39;Red Planet (2000)&#39;, &#39;Red Riding Hood (2011)&#39;, &#39;Red River (1948)&#39;, &#39;Red Rock West (1992)&#39;, &#39;Red Shoes, The (1948)&#39;, &#39;Red Sonja (1985)&#39;, &#39;Red Sorghum (Hong gao liang) (1987)&#39;, &#39;Red State (2011)&#39;, &#39;Red Tails (2012)&#39;, &#39;Red Violin, The (Violon rouge, Le) (1998)&#39;, &#39;Redbelt (2008)&#39;, &#39;Redemption (Hummingbird) (2013)&#39;, &#39;Redline (2009)&#39;, &#39;Reds (1981)&#39;, &#39;Reefer Madness (a.k.a. Tell Your Children) (1938)&#39;, &#39;Reefer Madness: The Movie Musical (2005)&#39;, &#39;Ref, The (1994)&#39;, &#39;Reform School Girls (1986)&#39;, &#39;Regarding Henry (1991)&#39;, &#39;Regret to Inform (1998)&#39;, &#39;Reign Over Me (2007)&#39;, &#39;Reign of Assassins (2010)&#39;, &#39;Reign of Fire (2002)&#39;, &#39;Reindeer Games (2000)&#39;, &#39;Relative Fear (1994)&#39;, &#39;Relic, The (1997)&#39;, &#39;Religulous (2008)&#39;, &#39;Remains of the Day, The (1993)&#39;, &#39;Remember Me (2010)&#39;, &#39;Remember Me (Ricordati di me) (2003)&#39;, &#39;Remember the Titans (2000)&#39;, &#39;Remo Williams: The Adventure Begins (1985)&#39;, &#39;Renaissance (2006)&#39;, &#39;Renaissance Man (1994)&#39;, &#39;Reno 911!: Miami (2007)&#39;, &#39;Rent (2005)&#39;, &#39;Rent-A-Cop (1988)&#39;, &#39;Rent-a-Kid (1995)&#39;, &#39;Replacement Killers, The (1998)&#39;, &#39;Replacements, The (2000)&#39;, &#39;Repo Man (1984)&#39;, &#39;Repo Men (2010)&#39;, &#39;Repossessed (1990)&#39;, &#39;Reptilicus (1961)&#39;, &#39;Repulsion (1965)&#39;, &#39;Requiem (2006)&#39;, &#39;Requiem for a Dream (2000)&#39;, &#39;Requiem for a Heavyweight (1962)&#39;, &#39;Requiem for the American Dream (2015)&#39;, &#39;Rescue Dawn (2006)&#39;, &#39;Rescuers Down Under, The (1990)&#39;, &#39;Rescuers, The (1977)&#39;, &#39;Reservoir Dogs (1992)&#39;, &#39;Resident Evil (2002)&#39;, &#39;Resident Evil: Afterlife (2010)&#39;, &#39;Resident Evil: Apocalypse (2004)&#39;, &#39;Resident Evil: Extinction (2007)&#39;, &#39;Resident Evil: Retribution (2012)&#39;, &#39;Resolution (2012)&#39;, &#39;Respiro (2002)&#39;, &#39;Restoration (1995)&#39;, &#39;Restrepo (2010)&#39;, &#39;Retroactive (1997)&#39;, &#39;Return from Witch Mountain (1978)&#39;, &#39;Return of Jafar, The (1994)&#39;, &#39;Return of Martin Guerre, The (Retour de Martin Guerre, Le) (1982)&#39;, &#39;Return of the Living Dead, The (1985)&#39;, &#39;Return of the Musketeers, The (1989)&#39;, &#39;Return of the One-Armed Swordsman (1969)&#39;, &#39;Return of the Pink Panther, The (1975)&#39;, &#39;Return of the Secaucus 7 (1980)&#39;, &#39;Return to Me (2000)&#39;, &#39;Return to Never Land (2002)&#39;, &#39;Return to Oz (1985)&#39;, &#39;Return to Paradise (1998)&#39;, &#39;Return to Sender (2015)&#39;, &#39;Return to Snowy River (a.k.a. The Man From Snowy River II) (1988)&#39;, &#39;Return to Treasure Island (1988)&#39;, &#39;Return to the Blue Lagoon (1991)&#39;, &#39;Return with Honor (1998)&#39;, &#39;Return, The (Vozvrashcheniye) (2003)&#39;, &#39;Returner (Ritaanaa) (2002)&#39;, &#39;Revenant, The (2009)&#39;, &#39;Revenge (1990)&#39;, &#39;Revenge for Jolly! (2012)&#39;, &#39;Revenge of the Green Dragons (2014)&#39;, &#39;Revenge of the Nerds (1984)&#39;, &#39;Revenge of the Nerds II: Nerds in Paradise (1987)&#39;, &#39;Revenge of the Nerds III: The Next Generation (1992)&#39;, &#39;Revenge of the Nerds IV: Nerds in Love (1994)&#39;, &#39;Revenge of the Pink Panther (1978)&#39;, &#39;Reversal of Fortune (1990)&#39;, &#39;Revolution (1985)&#39;, &#39;Revolution OS (2001)&#39;, &#39;Revolution Will Not Be Televised, The (a.k.a. Chavez: Inside the Coup) (2003)&#39;, &#39;Revolutionary Road (2008)&#39;, &#39;Revolver (2005)&#39;, &#39;Rewrite, The (2014)&#39;, &#39;Richard III (1995)&#39;, &#39;Richard Pryor Live on the Sunset Strip (1982)&#39;, &#39;Richie Rich (1994)&#39;, &#39;Rick and Morty: State of Georgia Vs. Denver Fenton Allen (2016)&#39;, &#39;Ricki and the Flash (2015)&#39;, &#39;Ricky Gervais Live 3: Fame (2007)&#39;, &#39;Ricky Gervais Live: Animals (2003)&#39;, &#39;Riddick (2013)&#39;, &#39;Ride Along (2014)&#39;, &#39;Ride Along 2 (2016)&#39;, &#39;Ride the High Country (1962)&#39;, &#39;Ride with the Devil (1999)&#39;, &#39;Ridicule (1996)&#39;, &#39;Riding Giants (2004)&#39;, &#39;Riding in Cars with Boys (2001)&#39;, &#39;Rififi (Du rififi chez les hommes) (1955)&#39;, &#39;Right Stuff, The (1983)&#39;, &#39;Righteous Kill (2008)&#39;, &#39;Riki-Oh: The Story of Ricky (Lik Wong) (1991)&#39;, &#39;Ring Two, The (2005)&#39;, &#39;Ring of Terror (1962)&#39;, &#39;Ring, The (1927)&#39;, &#39;Ring, The (2002)&#39;, &#39;Ringer, The (2005)&#39;, &#39;Ringu (Ring) (1998)&#39;, &#39;Ringu 0: Bâsudei (2000)&#39;, &#39;Rink, The (1916)&#39;, &#39;Rio (2011)&#39;, &#39;Rio 2 (2014)&#39;, &#39;Rio Bravo (1959)&#39;, &#39;Rio Grande (1950)&#39;, &#34;Ripley&#39;s Game (2002)&#34;, &#39;Rise of the Footsoldier (2007)&#39;, &#39;Rise of the Guardians (2012)&#39;, &#39;Rise of the Planet of the Apes (2011)&#39;, &#39;Risen (2016)&#39;, &#39;Rising Sun (1993)&#39;, &#39;Risk (2016)&#39;, &#39;Risky Business (1983)&#39;, &#39;River Runs Through It, A (1992)&#39;, &#39;River Wild, The (1994)&#39;, &#34;River&#39;s Edge (1986)&#34;, &#39;River, The (1984)&#39;, &#39;Rivers and Tides (2001)&#39;, &#39;Rize (2005)&#39;, &#39;Ro.Go.Pa.G. (1963)&#39;, &#39;Road House (1989)&#39;, &#39;Road Trip (2000)&#39;, &#39;Road Warrior, The (Mad Max 2) (1981)&#39;, &#39;Road to El Dorado, The (2000)&#39;, &#39;Road to Guantanamo, The (2006)&#39;, &#39;Road to Morocco (1942)&#39;, &#39;Road to Perdition (2002)&#39;, &#39;Road to Wellville, The (1994)&#39;, &#39;Road, The (2009)&#39;, &#39;Rob Roy (1995)&#39;, &#39;Roberta (1935)&#39;, &#39;Robin Hood (1973)&#39;, &#39;Robin Hood (2010)&#39;, &#39;Robin Hood: Men in Tights (1993)&#39;, &#39;Robin Hood: Prince of Thieves (1991)&#39;, &#39;Robin Williams: Live on Broadway (2002)&#39;, &#39;Robin and Marian (1976)&#39;, &#39;Robin-B-Hood (Bo bui gai wak) (2006)&#39;, &#39;Robinson Crusoe on Mars (1964)&#39;, &#39;RoboCop (1987)&#39;, &#39;RoboCop (2014)&#39;, &#39;RoboCop 2 (1990)&#39;, &#39;RoboCop 3 (1993)&#39;, &#39;RoboGeisha (Robo-geisha) (2009)&#39;, &#39;Robot &amp; Frank (2012)&#39;, &#39;Robot Carnival (Roboto kânibauru) (1987)&#39;, &#39;Robot Jox (1990)&#39;, &#39;Robot Overlords (2014)&#39;, &#39;Robots (2005)&#39;, &#39;Rocco and His Brothers (Rocco e i suoi fratelli) (1960)&#39;, &#39;Rock School (2005)&#39;, &#39;Rock Star (2001)&#39;, &#39;Rock of Ages (2012)&#39;, &#39;Rock the Kasbah (2015)&#39;, &#39;Rock, The (1996)&#39;, &#39;Rock-A-Doodle (1991)&#39;, &#39;Rocker, The (2008)&#39;, &#39;Rocket Science (2007)&#39;, &#39;Rocket Singh: Salesman of the Year (2009)&#39;, &#39;RocketMan (a.k.a. Rocket Man) (1997)&#39;, &#39;Rocketeer, The (1991)&#39;, &#39;RocknRolla (2008)&#39;, &#39;Rocky (1976)&#39;, &#39;Rocky Balboa (2006)&#39;, &#39;Rocky Horror Picture Show, The (1975)&#39;, &#39;Rocky II (1979)&#39;, &#39;Rocky III (1982)&#39;, &#39;Rocky IV (1985)&#39;, &#39;Rocky V (1990)&#39;, &#39;Roger &amp; Me (1989)&#39;, &#39;Roger Dodger (2002)&#39;, &#39;Rogue (2007)&#39;, &#39;Rogue One: A Star Wars Story (2016)&#39;, &#39;Role Models (2008)&#39;, &#39;Roll Bounce (2005)&#39;, &#39;Rollerball (1975)&#39;, &#39;Rollerball (2002)&#39;, &#39;Rollercoaster (1977)&#39;, &#39;Rollo and the Woods Sprite (Rölli ja metsänhenki) (2001)&#39;, &#39;Roman Holiday (1953)&#39;, &#39;Roman J. Israel, Esq. (2017)&#39;, &#39;Romance (1999)&#39;, &#39;Romancing the Stone (1984)&#39;, &#39;Romantics, The (2010)&#39;, &#39;Rome, Open City (a.k.a. Open City) (Roma, città aperta) (1945)&#39;, &#39;Romeo Is Bleeding (1993)&#39;, &#39;Romeo Must Die (2000)&#39;, &#39;Romeo and Juliet (1968)&#39;, &#39;Romper Stomper (1992)&#39;, &#34;Romy and Michele&#39;s High School Reunion (1997)&#34;, &#39;Ronin (1998)&#39;, &#39;Rookie of the Year (1993)&#39;, &#39;Rookie, The (1990)&#39;, &#39;Rookie, The (2002)&#39;, &#39;Room (2015)&#39;, &#39;Room at the Top (1959)&#39;, &#39;Room for Romeo Brass, A (1999)&#39;, &#39;Room in Rome (Habitación en Roma) (2010)&#39;, &#39;Room with a View, A (1986)&#39;, &#39;Room, The (2003)&#39;, &#39;Roommate, The (2011)&#39;, &#39;Roommates (1995)&#39;, &#39;Roots (1977)&#39;, &#39;Rope (1948)&#39;, &#34;Rory O&#39;Shea Was Here (Inside I&#39;m Dancing) (2004)&#34;, &#39;Rory Scovel Tries Stand-Up for the First Time (2017)&#39;, &#39;Rose Red (2002)&#39;, &#39;Rose Tattoo, The (1955)&#39;, &#34;Rosemary&#39;s Baby (1968)&#34;, &#39;Rosencrantz and Guildenstern Are Dead (1990)&#39;, &#39;Rosetta (1999)&#39;, &#39;Rosewood (1997)&#39;, &#39;Rough Magic (1995)&#39;, &#39;Rough Night (2017)&#39;, &#39;Rounders (1998)&#39;, &#39;Roxanne (1987)&#39;, &#39;Royal Flash (1975)&#39;, &#39;Royal Tenenbaums, The (2001)&#39;, &#39;Royal Wedding (1951)&#39;, &#39;Rubber (2010)&#39;, &#39;Ruby &amp; Quentin (Tais-toi!) (2003)&#39;, &#39;Ruby Red (2013)&#39;, &#39;Ruby Sparks (2012)&#39;, &#39;Ruby in Paradise (1993)&#39;, &#39;Rudderless (2014)&#39;, &#39;Rude Boy (1980)&#39;, &#39;Rudolph, the Red-Nosed Reindeer (1964)&#39;, &#39;Rudy (1993)&#39;, &#39;Rugrats Movie, The (1998)&#39;, &#39;Rugrats in Paris: The Movie (2000)&#39;, &#39;Ruins, The (2008)&#39;, &#39;Rules of Attraction, The (2002)&#39;, &#39;Rules of Engagement (2000)&#39;, &#39;Rules of the Game, The (La règle du jeu) (1939)&#39;, &#39;Ruling Class, The (1972)&#39;, &#39;Rum Diary, The (2011)&#39;, &#39;Rumble in the Bronx (Hont faan kui) (1995)&#39;, &#39;Rumor Has It... (2005)&#39;, &#39;Run (1991)&#39;, &#39;Run All Night (2015)&#39;, &#39;Run Fatboy Run (2007)&#39;, &#39;Run Lola Run (Lola rennt) (1998)&#39;, &#39;Run Silent Run Deep (1958)&#39;, &#39;Run of the Country, The (1995)&#39;, &#39;Runaway (1984)&#39;, &#39;Runaway Brain (1995) &#39;, &#39;Runaway Bride (1999)&#39;, &#39;Runaway Jury (2003)&#39;, &#39;Runaway Train (1985)&#39;, &#39;Runaways, The (2010)&#39;, &#39;Rundown, The (2003)&#39;, &#39;Runner Runner (2013)&#39;, &#39;Running Man, The (1987)&#39;, &#39;Running Scared (1980)&#39;, &#39;Running Scared (1986)&#39;, &#39;Running Scared (2006)&#39;, &#39;Running With Scissors (2006)&#39;, &#39;Running on Empty (1988)&#39;, &#39;Rush (1991)&#39;, &#39;Rush (2013)&#39;, &#39;Rush Hour (1998)&#39;, &#39;Rush Hour 2 (2001)&#39;, &#39;Rush Hour 3 (2007)&#39;, &#39;Rushmore (1998)&#39;, &#39;Russia House, The (1990)&#39;, &#39;Russians Are Coming, the Russians Are Coming, The (1966)&#39;, &#34;Rust and Bone (De rouille et d&#39;os) (2012)&#34;, &#39;Ruthless People (1986)&#39;, &#39;Ryuzo and the Seven Henchmen (2015)&#39;, &#39;S.F.W. (1994)&#39;, &#39;S.W.A.T. (2003)&#39;, &#39;SLC Punk! (1998)&#39;, &#39;SORI: Voice from the Heart (2016)&#39;, &#39;SUBWAYStories: Tales from the Underground (1997)&#39;, &#39;Sabotage (1936)&#39;, &#39;Saboteur (1942)&#39;, &#39;Sabrina (1954)&#39;, &#39;Sabrina (1995)&#39;, &#39;Sacrament, The (2013)&#39;, &#39;Sacrifice (Zhao shi gu er) (2010)&#39;, &#39;Sacrifice, The (Offret - Sacraficatio) (1986)&#39;, &#39;Safe (1995)&#39;, &#39;Safe (2012)&#39;, &#39;Safe Haven (2013)&#39;, &#39;Safe House (2012)&#39;, &#39;Safety Last! (1923)&#39;, &#39;Safety Not Guaranteed (2012)&#39;, &#39;Safety of Objects, The (2001)&#39;, &#39;Sahara (2005)&#39;, &#39;Saint Ralph (2004)&#39;, &#39;Saint, The (1997)&#39;, &#39;Saints and Soldiers (2003)&#39;, &#39;Salaam Bombay! (1988)&#39;, &#39;Salmon Fishing in the Yemen (2011)&#39;, &#39;Salo, or The 120 Days of Sodom (Salò o le 120 giornate di Sodoma) (1976)&#39;, &#39;Salt (2010)&#39;, &#39;Salton Sea, The (2002)&#39;, &#39;Salvador (1986)&#39;, &#39;Salvation Boulevard (2011)&#39;, &#39;Salvation, The (2014)&#39;, &#39;Samouraï, Le (Godson, The) (1967)&#39;, &#39;Samsara (2011)&#39;, &#39;Samurai Assassin (Samurai) (1965)&#39;, &#39;Samurai Rebellion (Jôi-uchi: Hairyô tsuma shimatsu) (1967)&#39;, &#39;San Andreas (2015)&#39;, &#39;San Francisco (1936)&#39;, &#39;Sand Pebbles, The (1966)&#39;, &#39;Sandlot, The (1993)&#39;, &#39;Sandpiper, The (1965)&#39;, &#39;Sands of Iwo Jima (1949)&#39;, &#39;Sandy Wexler (2017)&#39;, &#39;Sanjuro (Tsubaki Sanjûrô) (1962)&#39;, &#39;Sansho the Bailiff (Sanshô dayû) (1954)&#39;, &#39;Santa Claus Is a Stinker (Le Père Noël est une ordure) (1982)&#39;, &#39;Santa Claus: The Movie (1985)&#39;, &#39;Santa Clause 2, The (2002)&#39;, &#39;Santa Clause 3: The Escape Clause, The (2006)&#39;, &#39;Santa Clause, The (1994)&#39;, &#39;Santa Sangre (1989)&#39;, &#34;Santa&#39;s Little Helper (2015)&#34;, &#39;Sapphire Blue (2014)&#39;, &#39;Sarafina! (1992)&#39;, &#39;Saragossa Manuscript, The (Rekopis znaleziony w Saragossie) (1965)&#39;, &#39;Sarah Silverman: Jesus Is Magic (2005)&#39;, &#39;Satanic (2016)&#39;, &#39;Satin Rouge (2002)&#39;, &#39;Saturday Night Fever (1977)&#39;, &#39;Saturn 3 (1980)&#39;, &#39;Sausage Party (2016)&#39;, &#39;Savage Nights (Nuits fauves, Les) (1992)&#39;, &#39;Savages (2012)&#39;, &#39;Savages, The (2007)&#39;, &#39;Savannah Smiles (1982)&#39;, &#39;Save the Last Dance (2001)&#39;, &#39;Saved by the Bell: Hawaiian Style (1992)&#39;, &#39;Saved! (2004)&#39;, &#39;Saving Christmas (2014)&#39;, &#39;Saving Face (2004)&#39;, &#39;Saving Grace (2000)&#39;, &#39;Saving Mr. Banks (2013)&#39;, &#39;Saving Private Ryan (1998)&#39;, &#39;Saving Santa (2013)&#39;, &#39;Saving Silverman (Evil Woman) (2001)&#39;, &#39;Savior (1998)&#39;, &#39;Saw (2003)&#39;, &#39;Saw (2004)&#39;, &#39;Saw II (2005)&#39;, &#39;Saw III (2006)&#39;, &#39;Saw IV (2007)&#39;, &#39;Saw V (2008)&#39;, &#39;Saw VI (2009)&#39;, &#39;Saw VII 3D - The Final Chapter (2010)&#39;, &#39;Say Anything... (1989)&#39;, &#34;Say It Isn&#39;t So (2001)&#34;, &#39;Scalphunters, The (1968)&#39;, &#39;Scanner Darkly, A (2006)&#39;, &#39;Scanners (1981)&#39;, &#39;Scaramouche (1952)&#39;, &#39;Scarface (1932)&#39;, &#39;Scarface (1983)&#39;, &#39;Scarlet Letter, The (1995)&#39;, &#39;Scary Movie (2000)&#39;, &#39;Scary Movie 2 (2001)&#39;, &#39;Scary Movie 3 (2003)&#39;, &#39;Scary Movie 4 (2006)&#39;, &#39;Scenes From a Marriage (Scener ur ett äktenskap) (1973)&#39;, &#39;Scenes from a Mall (1991)&#39;, &#39;Scenes from the Class Struggle in Beverly Hills (1989)&#39;, &#34;Scent of Green Papaya, The (Mùi du du xhan - L&#39;odeur de la papaye verte) (1993)&#34;, &#39;Scent of a Woman (1992)&#39;, &#34;Schindler&#39;s List (1993)&#34;, &#39;Schizopolis (1996)&#39;, &#39;Schlussmacher (2013)&#39;, &#39;School Daze (1988)&#39;, &#39;School Ties (1992)&#39;, &#39;School for Scoundrels (2006)&#39;, &#34;School of Flesh, The (École de la chair, L&#39;) (1998)&#34;, &#39;School of Rock (2003)&#39;, &#39;Science of Sleep, The (La science des rêves) (2006)&#39;, &#39;Scooby-Doo (2002)&#39;, &#39;Scooby-Doo 2: Monsters Unleashed (2004)&#39;, &#39;Scooby-Doo Goes Hollywood (1979)&#39;, &#39;Scooby-Doo! Abracadabra-Doo (2010)&#39;, &#39;Scooby-Doo! Curse of the Lake Monster (2010)&#39;, &#39;Scooby-Doo! and the Loch Ness Monster (2004)&#39;, &#39;Scooby-Doo! and the Samurai Sword (2009)&#39;, &#39;Scoop (2006)&#39;, &#39;Scorched (2003)&#39;, &#39;Score, The (2001)&#39;, &#39;Scorpio (1973)&#39;, &#39;Scotland, Pa. (2001)&#39;, &#39;Scott Pilgrim vs. the World (2010)&#39;, &#39;Scout, The (1994)&#39;, &#39;Scouts Guide to the Zombie Apocalypse (2015)&#39;, &#39;Scratch (2001)&#39;, &#39;Scream (1996)&#39;, &#39;Scream 2 (1997)&#39;, &#39;Scream 3 (2000)&#39;, &#39;Scream 4 (2011)&#39;, &#39;Screamers (1995)&#39;, &#39;Screwed (2000)&#39;, &#39;Scrooged (1988)&#39;, &#39;Sea Inside, The (Mar adentro) (2004)&#39;, &#39;Sea of Love (1989)&#39;, &#39;Seabiscuit (2003)&#39;, &#39;Search Party (2014)&#39;, &#39;Searchers, The (1956)&#39;, &#39;Searching for Bobby Fischer (1993)&#39;, &#39;Searching for Sugar Man (2012)&#39;, &#39;Season of the Witch (2011)&#39;, &#34;Sebastian Maniscalco: What&#39;s Wrong with People? (2012)&#34;, &#39;Secondhand Lions (2003)&#39;, &#39;Seconds (1966)&#39;, &#39;Secret Admirer (1985)&#39;, &#39;Secret Agent (1936)&#39;, &#39;Secret Agent, The (1996)&#39;, &#39;Secret Ballot (Raye makhfi) (2001)&#39;, &#39;Secret Garden, The (1993)&#39;, &#39;Secret Life of Bees, The (2008)&#39;, &#39;Secret Life of Walter Mitty, The (1947)&#39;, &#39;Secret Life of Walter Mitty, The (2013)&#39;, &#39;Secret Life of Words, The (2005)&#39;, &#39;Secret Lives of Dentists, The (2002)&#39;, &#34;Secret Policeman&#39;s Other Ball, The (1982)&#34;, &#39;Secret Society (2002)&#39;, &#39;Secret Window (2004)&#39;, &#39;Secret World of Arrietty, The (Kari-gurashi no Arietti) (2010)&#39;, &#39;Secret in Their Eyes (2015)&#39;, &#39;Secret in Their Eyes, The (El secreto de sus ojos) (2009)&#39;, &#39;Secret of Kells, The (2009)&#39;, &#39;Secret of My Succe$s, The (a.k.a. The Secret of My Success) (1987)&#39;, &#39;Secret of NIMH, The (1982)&#39;, &#39;Secret of Roan Inish, The (1994)&#39;, &#39;Secretariat (2010)&#39;, &#39;Secretary (2002)&#39;, &#39;Secrets &amp; Lies (1996)&#39;, &#39;Secrets of a Soul (Geheimnisse einer Seele) (1926)&#39;, &#39;Seducing Doctor Lewis (Grande séduction, La) (2003)&#39;, &#39;See No Evil, Hear No Evil (1989)&#39;, &#34;Seed of Chucky (Child&#39;s Play 5) (2004)&#34;, &#39;Seeker: The Dark Is Rising, The (2007)&#39;, &#39;Seeking Justice (2011)&#39;, &#39;Seeking a Friend for the End of the World (2012)&#39;, &#39;Seems Like Old Times (1980)&#39;, &#39;Selena (1997)&#39;, &#39;Self-criticism of a Bourgeois Dog (2017)&#39;, &#39;Self/less (2015)&#39;, &#39;Selfish Giant, The (2013)&#39;, &#39;Selma (2014)&#39;, &#39;Semi-Pro (2008)&#39;, &#39;Send Me No Flowers (1964)&#39;, &#39;Senna (2010)&#39;, &#39;Sense and Sensibility (1995)&#39;, &#39;Senseless (1998)&#39;, &#39;Sentinel, The (2006)&#39;, &#39;Separation, A (Jodaeiye Nader az Simin) (2011)&#39;, &#39;September (1987)&#39;, &#39;Serbian Film, A (Srpski film) (2010)&#39;, &#39;Serendipity (2001)&#39;, &#39;Serenity (2005)&#39;, &#39;Sergeant York (1941)&#39;, &#39;Serial Mom (1994)&#39;, &#39;Series 7: The Contenders (2001)&#39;, &#39;Serious Man, A (2009)&#39;, &#39;Serpent and the Rainbow, The (1988)&#39;, &#39;Serpico (1973)&#39;, &#39;Serving Sara (2002)&#39;, &#39;Serving in Silence: The Margarethe Cammermeyer Story (1995)&#39;, &#39;Session 9 (2001)&#39;, &#39;Sessions, The (Surrogate, The) (2012)&#39;, &#39;Set It Off (1996)&#39;, &#39;Seve (2014)&#39;, &#39;Seven (a.k.a. Se7en) (1995)&#39;, &#39;Seven Brides for Seven Brothers (1954)&#39;, &#39;Seven Days in May (1964)&#39;, &#39;Seven Pounds (2008)&#39;, &#39;Seven Psychopaths (2012)&#39;, &#39;Seven Samurai (Shichinin no samurai) (1954)&#39;, &#39;Seven Sisters (2017)&#39;, &#39;Seven Up! (1964)&#39;, &#39;Seven Year Itch, The (1955)&#39;, &#39;Seven Years in Tibet (1997)&#39;, &#39;Seven-Per-Cent Solution, The (1976)&#39;, &#39;Seventh Seal, The (Sjunde inseglet, Det) (1957)&#39;, &#39;Seventh Sign, The (1988)&#39;, &#39;Seventh Son (2014)&#39;, &#39;Severance (2006)&#39;, &#39;Sex Drive (2008)&#39;, &#39;Sex Ed (2014)&#39;, &#39;Sex Tape (2014)&#39;, &#39;Sex and Lucia (Lucía y el sexo) (2001)&#39;, &#39;Sex and the City (2008)&#39;, &#39;Sex and the City 2 (2010)&#39;, &#39;Sex, Drugs &amp; Taxation (2013)&#39;, &#39;Sex, Lies, and Videotape (1989)&#39;, &#39;Sexy Beast (2000)&#39;, &#39;Sgt. Bilko (1996)&#39;, &#39;Shadow Conspiracy (1997)&#39;, &#39;Shadow Dancer (2012)&#39;, &#39;Shadow World (2016)&#39;, &#39;Shadow of a Doubt (1943)&#39;, &#39;Shadow of the Thin Man (1941)&#39;, &#39;Shadow of the Vampire (2000)&#39;, &#39;Shadow, The (1994)&#39;, &#39;Shadowlands (1993)&#39;, &#39;Shadows and Fog (1991)&#39;, &#39;Shaft (1971)&#39;, &#39;Shaft (2000)&#39;, &#39;Shaggy D.A., The (1976)&#39;, &#39;Shaggy Dog, The (1959)&#39;, &#39;Shaggy Dog, The (2006)&#39;, &#39;Shake Hands with the Devil (2007)&#39;, &#39;Shakes the Clown (1992)&#39;, &#39;Shakespeare Behind Bars (2005)&#39;, &#39;Shakespeare in Love (1998)&#39;, &#39;Shall We Dance (1937)&#39;, &#39;Shall We Dance? (2004)&#39;, &#39;Shall We Dance? (Shall We Dansu?) (1996)&#39;, &#39;Shallow Grave (1994)&#39;, &#39;Shallow Hal (2001)&#39;, &#39;Shame (2011)&#39;, &#39;Shame (Skammen) (1968)&#39;, &#39;Shampoo (1975)&#39;, &#39;Shane (1953)&#39;, &#39;Shanghai Kiss (2007)&#39;, &#39;Shanghai Knights (2003)&#39;, &#39;Shanghai Noon (2000)&#39;, &#39;Shanghai Surprise (1986)&#39;, &#39;Shanghai Triad (Yao a yao yao dao waipo qiao) (1995)&#39;, &#39;Shaolin Soccer (Siu lam juk kau) (2001)&#39;, &#39;Shaolin Temple (Shao Lin si) (1976)&#39;, &#39;Shape of Things, The (2003)&#39;, &#39;Shark Night 3D (2011)&#39;, &#39;Shark Tale (2004)&#39;, &#39;Sharknado (2013)&#39;, &#39;Sharknado 3: Oh Hell No! (2015)&#39;, &#39;Sharknado 4: The 4th Awakens (2016)&#39;, &#39;Sharkwater (2006)&#39;, &#39;Shattered (1991)&#39;, &#39;Shattered Glass (2003)&#39;, &#39;Shaun of the Dead (2004)&#39;, &#39;Shaun the Sheep Movie (2015)&#39;, &#39;Shawshank Redemption, The (1994)&#39;, &#39;She Wore a Yellow Ribbon (1949)&#39;, &#34;She&#39;s All That (1999)&#34;, &#34;She&#39;s Gotta Have It (1986)&#34;, &#34;She&#39;s Having a Baby (1988)&#34;, &#34;She&#39;s Out of Control (1989)&#34;, &#34;She&#39;s Out of My League (2010)&#34;, &#34;She&#39;s So Lovely (1997)&#34;, &#34;She&#39;s the Man (2006)&#34;, &#34;She&#39;s the One (1996)&#34;, &#39;She-Devil (1989)&#39;, &#39;Sheena (1984)&#39;, &#39;Shelter (2007)&#39;, &#39;Sheltering Sky, The (1990)&#39;, &#39;Shenandoah (1965)&#39;, &#39;Shepherd: Border Patrol, The (2008)&#39;, &#39;Sherlock - A Study in Pink (2010)&#39;, &#39;Sherlock Holmes (2009)&#39;, &#39;Sherlock Holmes and Dr. Watson: Acquaintance (1979)&#39;, &#39;Sherlock Holmes and the Secret Weapon (1942)&#39;, &#39;Sherlock Holmes: A Game of Shadows (2011)&#39;, &#39;Sherlock Holmes: Dressed to Kill (1946)&#39;, &#39;Sherlock Holmes: Terror by Night (1946)&#39;, &#39;Sherlock Holmes: The Woman in Green (1945)&#39;, &#39;Sherlock Jr. (1924)&#39;, &#39;Sherlock: The Abominable Bride (2016)&#39;, &#39;SherryBaby (2006)&#39;, &#39;Shiloh (1997)&#39;, &#39;Shin Godzilla (2016)&#39;, &#39;Shine (1996)&#39;, &#39;Shine a Light (2008)&#39;, &#39;Shining Through (1992)&#39;, &#39;Shining, The (1980)&#39;, &#39;Ship of Fools (1965)&#39;, &#39;Shipping News, The (2001)&#39;, &#39;Shiri (Swiri) (1999)&#39;, &#39;Shock Corridor (1963)&#39;, &#39;Shogun Assassin (1980)&#39;, &#34;Shoot &#39;Em Up (2007)&#34;, &#39;Shooter (2007)&#39;, &#39;Shooting Dogs (a.k.a. Beyond the Gates) (2005)&#39;, &#39;Shooting Fish (1997)&#39;, &#39;Shootist, The (1976)&#39;, &#39;Shop Around the Corner, The (1940)&#39;, &#39;Shopgirl (2005)&#39;, &#39;Short Circuit (1986)&#39;, &#39;Short Circuit 2 (1988)&#39;, &#39;Short Cuts (1993)&#39;, &#39;Short Film About Killing, A (Krótki film o zabijaniu) (1988)&#39;, &#39;Short Film About Love, A (Krótki film o milosci) (1988)&#39;, &#39;Short Term 12 (2013)&#39;, &#39;Shortbus (2006)&#39;, &#39;Shot Caller (2017)&#39;, &#39;Shot in the Dark, A (1964)&#39;, &#39;Shotgun Stories (2007)&#39;, &#39;Show Boat (1951)&#39;, &#39;Show Me Love (Fucking Åmål) (1998)&#39;, &#39;Shower (Xizao) (1999)&#39;, &#39;Showgirls (1995)&#39;, &#39;Showtime (2002)&#39;, &#39;Shrek (2001)&#39;, &#39;Shrek 2 (2004)&#39;, &#39;Shrek Forever After (a.k.a. Shrek: The Final Chapter) (2010)&#39;, &#39;Shrek the Halls (2007)&#39;, &#39;Shrek the Third (2007)&#39;, &#39;Shrink (2009)&#39;, &#39;Shrooms (2007)&#39;, &#39;Shut Up &amp; Sing (2006)&#39;, &#39;Shutter Island (2010)&#39;, &#39;Siam Sunset (1999)&#39;, &#39;Sibling Rivalry (1990)&#39;, &#39;Sicario (2015)&#39;, &#39;Sicko (2007)&#39;, &#39;Sid and Nancy (1986)&#39;, &#39;Side Effects (2013)&#39;, &#39;Side by Side (2012)&#39;, &#39;Sidekicks (1992)&#39;, &#39;Sidewalks of New York (2001)&#39;, &#39;Sidewalls (Medianeras) (2011)&#39;, &#39;Sideways (2004)&#39;, &#39;Siege, The (1998)&#39;, &#39;Sightseers (2012)&#39;, &#39;Sign of Four, The (1987)&#39;, &#39;Signal, The (2007)&#39;, &#39;Signal, The (2014)&#39;, &#39;Signs (2002)&#39;, &#39;Silence (2016)&#39;, &#39;Silence of the Lambs, The (1991)&#39;, &#39;Silence, The (Tystnaden) (1963)&#39;, &#39;Silent Hill (2006)&#39;, &#39;Silent Hill: Revelation 3D (2012)&#39;, &#39;Silent Movie (1976)&#39;, &#39;Silent Night, Deadly Night (1984)&#39;, &#39;Silent Running (1972)&#39;, &#39;Silk Stockings (1957)&#39;, &#39;Silkwood (1983)&#39;, &#34;Silver Bullet (Stephen King&#39;s Silver Bullet) (1985)&#34;, &#39;Silver Linings Playbook (2012)&#39;, &#39;Silver Spoon (2014)&#39;, &#39;Silver Streak (1976)&#39;, &#39;Silverado (1985)&#39;, &#39;Simon Birch (1998)&#39;, &#39;Simon Sez (1999)&#39;, &#39;Simone (S1m0ne) (2002)&#39;, &#39;Simpatico (1999)&#39;, &#39;Simple Plan, A (1998)&#39;, &#39;Simple Twist of Fate, A (1994)&#39;, &#39;Simple Wish, A (1997)&#39;, &#39;Simply Irresistible (1999)&#39;, &#39;Simpsons Movie, The (2007)&#39;, &#39;Simpsons: The Longest Daycare, The (2012)&#39;, &#39;Sin City (2005)&#39;, &#39;Sin City: A Dame to Kill For (2014)&#39;, &#39;Sin Nombre (2009)&#39;, &#39;Sinbad and the Eye of the Tiger (1977)&#39;, &#39;Sinbad: Legend of the Seven Seas (2003)&#39;, &#39;Sing (2016)&#39;, &#39;Sing Street (2016)&#39;, &#34;Singin&#39; in the Rain (1952)&#34;, &#39;Single Girl, A (Fille seule, La) (1995)&#39;, &#39;Single Man, A (2009)&#39;, &#39;Single White Female (1992)&#39;, &#39;Singles (1992)&#39;, &#39;Sinister (2012)&#39;, &#39;Sintel (2010)&#39;, &#39;Sirens (1994)&#39;, &#39;Sister Act (1992)&#39;, &#39;Sister Act 2: Back in the Habit (1993)&#39;, &#39;Sisterhood of the Traveling Pants 2, The (2008)&#39;, &#39;Sisterhood of the Traveling Pants, The (2005)&#39;, &#39;Sisters (1973)&#39;, &#39;Sisters (2015)&#39;, &#39;Sisters (Syostry) (2001)&#39;, &#39;Sitter, The (2011)&#39;, &#39;Six Days Seven Nights (1998)&#39;, &#39;Six Degrees of Separation (1993)&#39;, &#39;Six-String Samurai (1998)&#39;, &#39;Sixteen Candles (1984)&#39;, &#39;Sixth Sense, The (1999)&#39;, &#39;Skeleton Key, The (2005)&#39;, &#39;Ski School (1991)&#39;, &#39;Skin Deep (1989)&#39;, &#39;Skin I Live In, The (La piel que habito) (2011)&#39;, &#39;Skipped Parts (2000)&#39;, &#39;Skulls, The (2000)&#39;, &#39;Sky Captain and the World of Tomorrow (2004)&#39;, &#39;Sky Crawlers, The (Sukai kurora) (2008)&#39;, &#39;Sky High (2003)&#39;, &#39;Sky High (2005)&#39;, &#39;Skyfall (2012)&#39;, &#39;Skyline (2010)&#39;, &#39;Slacker (1991)&#39;, &#39;Slackers (2002)&#39;, &#34;Slammin&#39; Salmon, The (2009)&#34;, &#39;Slap Shot (1977)&#39;, &#39;Slasher (2004)&#39;, &#39;Slaughterhouse-Five (1972)&#39;, &#39;Sleepaway Camp (1983)&#39;, &#39;Sleeper (1973)&#39;, &#39;Sleepers (1996)&#39;, &#39;Sleeping Beauty (1959)&#39;, &#39;Sleeping with the Enemy (1991)&#39;, &#39;Sleepless in Seattle (1993)&#39;, &#39;Sleepwalkers (1992)&#39;, &#39;Sleepy Hollow (1999)&#39;, &#39;Sleuth (1972)&#39;, &#39;Sleuth (2007)&#39;, &#39;Sliding Doors (1998)&#39;, &#39;Sling Blade (1996)&#39;, &#39;Slither (2006)&#39;, &#39;Sliver (1993)&#39;, &#39;Slow Learners (2015)&#39;, &#39;Slow West (2015)&#39;, &#39;Slumber Party Massacre II (1987)&#39;, &#39;Slumber Party Massacre III (1990)&#39;, &#39;Slumber Party Massacre, The (1982)&#39;, &#39;Slumdog Millionaire (2008)&#39;, &#39;Slums of Beverly Hills, The (1998)&#39;, &#39;Small Soldiers (1998)&#39;, &#39;Small Time Crooks (2000)&#39;, &#39;Smart People (2008)&#39;, &#39;Smashed (2012)&#39;, &#34;Smiley&#39;s People (1982)&#34;, &#39;Smiling Fish and Goat on Fire (1999)&#39;, &#34;Smilla&#39;s Sense of Snow (1997)&#34;, &#39;Smoke (1995)&#39;, &#39;Smoke Signals (1998)&#39;, &#39;Smokey and the Bandit (1977)&#39;, &#39;Smokey and the Bandit II (1980)&#39;, &#39;Smokey and the Bandit III (1983)&#39;, &#34;Smokin&#39; Aces (2006)&#34;, &#39;Smooth Talk (1985)&#39;, &#39;Smurfs 2, The (2013)&#39;, &#39;Smurfs, The (2011)&#39;, &#39;Snake Eyes (1998)&#39;, &#39;Snake Pit, The (1948)&#39;, &#34;Snake in the Eagle&#39;s Shadow (Se ying diu sau) (1978)&#34;, &#39;Snakes on a Plane (2006)&#39;, &#39;Snapper, The (1993)&#39;, &#39;Snatch (2000)&#39;, &#39;Snatched (2017)&#39;, &#39;Sneakers (1992)&#39;, &#39;Sniper (1993)&#39;, &#39;Snipes (2001)&#39;, &#39;Snitch (2013)&#39;, &#39;Snow Angels (2007)&#39;, &#39;Snow Day (2000)&#39;, &#39;Snow Dogs (2002)&#39;, &#39;Snow Falling on Cedars (1999)&#39;, &#39;Snow Walker, The (2003)&#39;, &#39;Snow White (1916)&#39;, &#39;Snow White and the Huntsman (2012)&#39;, &#39;Snow White and the Seven Dwarfs (1937)&#39;, &#39;Snowden (2016)&#39;, &#39;Snowflake, the White Gorilla (2011)&#39;, &#39;Snowman, The (1982)&#39;, &#39;Snowpiercer (2013)&#39;, &#39;Snowtown (Snowtown Murders, The) (2011)&#39;, &#39;So I Married an Axe Murderer (1993)&#39;, &#39;Soapdish (1991)&#39;, &#39;Social Network, The (2010)&#39;, &#39;Soft Fruit (1999)&#39;, &#39;Solace (2015)&#39;, &#39;Solaris (2002)&#39;, &#39;Solaris (Solyaris) (1972)&#39;, &#39;Solas (1999)&#39;, &#39;Soldier (1998)&#39;, &#34;Soldier&#39;s Story, A (1984)&#34;, &#39;Solo (1996)&#39;, &#39;Solo: A Star Wars Story (2018)&#39;, &#39;Soloist, The (2009)&#39;, &#39;Solyaris (1968)&#39;, &#39;Some Folks Call It a Sling Blade (1993)&#39;, &#39;Some Guy Who Kills People (2011)&#39;, &#39;Some Kind of Wonderful (1987)&#39;, &#39;Some Like It Hot (1959)&#39;, &#34;Some Mother&#39;s Son (1996)&#34;, &#39;Somebody to Love (1994)&#39;, &#39;Someone Like You (2001)&#39;, &#39;Someone Marry Barry (2014)&#39;, &#39;Someone to Watch Over Me (1987)&#39;, &#39;Somers Town (2008)&#39;, &#39;Something Borrowed (2011)&#39;, &#39;Something New (2006)&#39;, &#39;Something Wicked This Way Comes (1983)&#39;, &#39;Something Wild (1986)&#39;, &#39;Something to Talk About (1995)&#39;, &#34;Something&#39;s Gotta Give (2003)&#34;, &#39;Somewhere (2010)&#39;, &#39;Somewhere in Time (1980)&#39;, &#39;Sommersby (1993)&#39;, &#39;Son in Law (1993)&#39;, &#39;Son of Flubber (1963)&#39;, &#39;Son of God (2014)&#39;, &#39;Son of Rambow (2007)&#39;, &#39;Son of a Gun (2014)&#39;, &#39;Son of the Bride (Hijo de la novia, El) (2001)&#39;, &#39;Son of the Mask (2005)&#39;, &#39;Son of the Sheik, The (1926)&#39;, &#34;Son&#39;s Room, The (Stanza del figlio, La) (2001)&#34;, &#39;Sonatine (Sonachine) (1993)&#39;, &#39;Song of Bernadette, The (1943)&#39;, &#39;Song of the Little Road (Pather Panchali) (1955)&#39;, &#39;Song of the Sea (2014)&#39;, &#39;Song of the South (1946)&#39;, &#39;Song of the Thin Man (1947)&#39;, &#39;Songs From the Second Floor (Sånger från andra våningen) (2000)&#39;, &#39;Sons of the Desert (1933)&#39;, &#39;Sophie Scholl: The Final Days (Sophie Scholl - Die letzten Tage) (2005)&#39;, &#34;Sophie&#39;s Choice (1982)&#34;, &#34;Sorcerer&#39;s Apprentice, The (2010)&#34;, &#39;Sorority Babes in the Slimeball Bowl-O-Rama (1988)&#39;, &#39;Sorority Boys (2002)&#39;, &#39;Sorority House Massacre (1986)&#39;, &#39;Sorority House Massacre II (1990)&#39;, &#39;Sorrow (2015)&#39;, &#39;Sorry to Bother You (2018)&#39;, &#39;Sorry, Wrong Number (1948)&#39;, &#39;Soul Food (1997)&#39;, &#39;Soul Man (1986)&#39;, &#39;Soul Plane (2004)&#39;, &#39;Soul Surfer (2011)&#39;, &#39;Sound of Music, The (1965)&#39;, &#39;Sound of My Voice (2011)&#39;, &#39;Sound of Thunder, A (2005)&#39;, &#39;Sound of the Mountain (Thunder of the Mountain, The) (Yama no oto) (1954)&#39;, &#39;Source Code (2011)&#39;, &#39;Source, The (1999)&#39;, &#39;South Pacific (1958)&#39;, &#39;South Park: Bigger, Longer and Uncut (1999)&#39;, &#39;South Park: Imaginationland (2008)&#39;, &#39;Southbound (2016)&#39;, &#39;Southland Tales (2006)&#39;, &#39;Southpaw (2015)&#39;, &#39;Soylent Green (1973)&#39;, &#39;Space Battleship Yamato (2010)&#39;, &#39;Space Buddies (2009)&#39;, &#39;Space Cowboys (2000)&#39;, &#39;Space Jam (1996)&#39;, &#39;Space Truckers (1996)&#39;, &#39;SpaceCamp (1986)&#39;, &#39;Spaceballs (1987)&#39;, &#39;Spaced Invaders (1990)&#39;, &#39;Spacehunter: Adventures in the Forbidden Zone (1983)&#39;, &#39;Spanglish (2004)&#39;, &#34;Spanish Apartment, The (L&#39;auberge espagnole) (2002)&#34;, &#39;Spanish Prisoner, The (1997)&#39;, &#39;Spanking the Monkey (1994)&#39;, &#39;Spartacus (1960)&#39;, &#39;Spartan (2004)&#39;, &#39;Spawn (1997)&#39;, &#39;Special (2006)&#39;, &#39;Special Day, A (Giornata particolare, Una) (1977)&#39;, &#39;Specialist, The (1994)&#39;, &#39;Species (1995)&#39;, &#39;Species II (1998)&#39;, &#39;Species III (2004)&#39;, &#39;Spectre (2015)&#39;, &#39;Speechless (1994)&#39;, &#39;Speed (1994)&#39;, &#39;Speed 2: Cruise Control (1997)&#39;, &#39;Speed Racer (2008)&#39;, &#39;Spellbound (1945)&#39;, &#39;Spellbound (2002)&#39;, &#39;Spellbound (2011)&#39;, &#39;Sphere (1998)&#39;, &#39;Spice World (1997)&#39;, &#39;Spider (2002)&#39;, &#39;Spider-Man (2002)&#39;, &#39;Spider-Man 2 (2004)&#39;, &#39;Spider-Man 3 (2007)&#39;, &#39;Spiderwick Chronicles, The (2008)&#39;, &#39;Spies Like Us (1985)&#39;, &#39;Spiral (2007)&#39;, &#39;Spiral (2018)&#39;, &#39;Spirit Camp (2009)&#39;, &#39;Spirit, The (2008)&#39;, &#39;Spirit: Stallion of the Cimarron (2002)&#39;, &#39;Spirited Away (Sen to Chihiro no kamikakushi) (2001)&#39;, &#39;Spirits of the Dead (1968)&#39;, &#39;Spitfire Grill, The (1996)&#39;, &#39;Splash (1984)&#39;, &#39;Splendor in the Grass (1961)&#39;, &#39;Splice (2009)&#39;, &#39;Splinter (2008)&#39;, &#39;Split (2017)&#39;, &#39;SpongeBob SquarePants Movie, The (2004)&#39;, &#39;Spotlight (2015)&#39;, &#39;Spread (2009)&#39;, &#39;Spriggan (Supurigan) (1998)&#39;, &#39;Spring (2015)&#39;, &#39;Spring Forward (1999)&#39;, &#39;Spring, Summer, Fall, Winter... and Spring (Bom yeoreum gaeul gyeoul geurigo bom) (2003)&#39;, &#39;Spun (2001)&#39;, &#39;Spy (2015)&#39;, &#39;Spy Game (2001)&#39;, &#39;Spy Hard (1996)&#39;, &#39;Spy Kids (2001)&#39;, &#39;Spy Kids 2: The Island of Lost Dreams (2002)&#39;, &#39;Spy Kids 3-D: Game Over (2003)&#39;, &#39;Spy Next Door, The (2010)&#39;, &#39;Spy Who Came in from the Cold, The (1965)&#39;, &#39;Spy Who Loved Me, The (1977)&#39;, &#39;Squid and the Whale, The (2005)&#39;, &#39;Squirm (1976)&#39;, &#34;St Trinian&#39;s 2: The Legend of Fritton&#39;s Gold (2009)&#34;, &#34;St. Elmo&#39;s Fire (1985)&#34;, &#34;St. Trinian&#39;s (2007)&#34;, &#39;St. Vincent (2014)&#39;, &#39;Stage Beauty (2004)&#39;, &#39;Stage Door (1937)&#39;, &#39;Stage Fright (1950)&#39;, &#39;Stagecoach (1939)&#39;, &#39;Stake Land (2010)&#39;, &#39;Stakeout (1987)&#39;, &#39;Stalag 17 (1953)&#39;, &#39;Stalingrad (1993)&#39;, &#39;Stalingrad (2013)&#39;, &#39;Stalker (1979)&#39;, &#39;Stan Helsing (2009)&#39;, &#39;Stand Up Guys (2012)&#39;, &#39;Stand and Deliver (1988)&#39;, &#39;Stand by Me (1986)&#39;, &#39;Stand, The (1994)&#39;, &#39;Stander (2003)&#39;, &#39;Standing in the Shadows of Motown (2002)&#39;, &#39;Standoff (2016)&#39;, &#39;Stanley &amp; Iris (1990)&#39;, &#39;Stanley Kubrick: A Life in Pictures (2001)&#39;, &#39;Star Is Born, A (1937)&#39;, &#39;Star Is Born, A (1954)&#39;, &#39;Star Maps (1997)&#39;, &#39;Star Trek (2009)&#39;, &#39;Star Trek Beyond (2016)&#39;, &#39;Star Trek II: The Wrath of Khan (1982)&#39;, &#39;Star Trek III: The Search for Spock (1984)&#39;, &#39;Star Trek IV: The Voyage Home (1986)&#39;, &#39;Star Trek Into Darkness (2013)&#39;, &#39;Star Trek V: The Final Frontier (1989)&#39;, &#39;Star Trek VI: The Undiscovered Country (1991)&#39;, &#39;Star Trek: First Contact (1996)&#39;, &#39;Star Trek: Generations (1994)&#39;, &#39;Star Trek: Insurrection (1998)&#39;, &#39;Star Trek: Nemesis (2002)&#39;, &#39;Star Trek: The Motion Picture (1979)&#39;, &#39;Star Wars: Episode I - The Phantom Menace (1999)&#39;, &#39;Star Wars: Episode II - Attack of the Clones (2002)&#39;, &#39;Star Wars: Episode III - Revenge of the Sith (2005)&#39;, &#39;Star Wars: Episode IV - A New Hope (1977)&#39;, &#39;Star Wars: Episode V - The Empire Strikes Back (1980)&#39;, &#39;Star Wars: Episode VI - Return of the Jedi (1983)&#39;, &#39;Star Wars: Episode VII - The Force Awakens (2015)&#39;, &#39;Star Wars: The Clone Wars (2008)&#39;, &#39;Star Wars: The Last Jedi (2017)&#39;, &#39;Starcrash (a.k.a. Star Crash) (1978)&#39;, &#39;Stardust (2007)&#39;, &#39;Stardust Memories (1980)&#39;, &#39;Stargate (1994)&#39;, &#39;Stargate: Continuum (2008)&#39;, &#39;Starman (1984)&#39;, &#39;Starship Troopers (1997)&#39;, &#39;Starship Troopers 2: Hero of the Federation (2004)&#39;, &#39;Starsky &amp; Hutch (2004)&#39;, &#39;Starsuckers (2009)&#39;, &#39;Start the Revolution Without Me (1970)&#39;, &#39;Starter for 10 (2006)&#39;, &#39;Startup.com (2001)&#39;, &#39;State Property 2 (2005)&#39;, &#39;State and Main (2000)&#39;, &#39;State of Grace (1990)&#39;, &#39;State of Play (2009)&#39;, &#39;Staten Island (2009)&#39;, &#39;Station Agent, The (2003)&#39;, &#39;Stay (2005)&#39;, &#39;Stay Alive (2006)&#39;, &#39;Stay Tuned (1992)&#39;, &#39;Staying Alive (1983)&#39;, &#39;Steal Big, Steal Little (1995)&#39;, &#39;Stealing Beauty (1996)&#39;, &#39;Stealing Harvard (2002)&#39;, &#39;Stealing Home (1988)&#39;, &#39;Stealing Rembrandt (Rembrandt) (2003)&#39;, &#39;Stealth (2005)&#39;, &#39;Steam of Life (Miesten vuoro) (2010)&#39;, &#39;Steam: The Turkish Bath (Hamam) (1997)&#39;, &#39;Steamboat Bill, Jr. (1928)&#39;, &#39;Steamboat Willie (1928)&#39;, &#39;Steamboy (Suchîmubôi) (2004)&#39;, &#39;Steel (1997)&#39;, &#39;Steel Magnolias (1989)&#39;, &#39;Stefan Zweig: Farewell to Europe (2016)&#39;, &#39;Steins;Gate the Movie: The Burden of Déjà vu (2013)&#39;, &#39;Stendhal Syndrome, The (Sindrome di Stendhal, La) (1996)&#39;, &#39;Step Brothers (2008)&#39;, &#39;Step Into Liquid (2002)&#39;, &#39;Step Up (2006)&#39;, &#39;Step Up 2 the Streets (2008)&#39;, &#39;Stepfather, The (1987)&#39;, &#39;Stepford Wives, The (1975)&#39;, &#39;Stepford Wives, The (2004)&#39;, &#39;Stepmom (1998)&#39;, &#39;Steve Jobs (2015)&#39;, &#39;Steve Jobs: The Man in the Machine (2015)&#39;, &#39;Stevie (2002)&#39;, &#39;Stick It (2006)&#39;, &#39;Stigmata (1999)&#39;, &#39;Still Alice (2014)&#39;, &#39;Still Crazy (1998)&#39;, &#39;Still Walking (Aruitemo aruitemo) (2008)&#39;, &#39;Sting, The (1973)&#39;, &#39;Stingray Sam (2009)&#39;, &#39;Stir Crazy (1980)&#39;, &#39;Stir of Echoes (1999)&#39;, &#39;Stitch! The Movie (2003)&#39;, &#39;Stoked: The Rise and Fall of Gator (2002)&#39;, &#39;Stoker (2013)&#39;, &#39;Stolen Children (Ladro di bambini, Il) (1992)&#39;, &#39;Stolen Summer (2002)&#39;, &#39;Stomp the Yard (2007)&#39;, &#39;Stone (2010)&#39;, &#39;Stone Reader (2002)&#39;, &#39;Stoned (2005)&#39;, &#39;Stonewall (2015)&#39;, &#39;Stoning of Soraya M., The (2008)&#39;, &#39;Stop Making Sense (1984)&#39;, &#39;Stop! Or My Mom Will Shoot (1992)&#39;, &#39;Stop-Loss (2008)&#39;, &#39;Storks (2016)&#39;, &#39;Story of Film: An Odyssey, The (2011)&#39;, &#34;Story of O, The (Histoire d&#39;O) (1975)&#34;, &#39;Story of Us, The (1999)&#39;, &#39;Story of Women (Affaire de femmes, Une) (1988)&#39;, &#39;Story of the Weeping Camel, The (Geschichte vom weinenden Kamel, Die) (2003)&#39;, &#39;Storytelling (2001)&#39;, &#39;Strada, La (1954)&#39;, &#39;Straight Outta Compton (2015)&#39;, &#39;Straight Story, The (1999)&#39;, &#39;Strange Brew (1983)&#39;, &#39;Strange Circus (Kimyô na sâkasu) (2005)&#39;, &#39;Strange Days (1995)&#39;, &#39;Strange Love of Martha Ivers, The (1946)&#39;, &#39;Strange Magic (2015)&#39;, &#39;Strange Wilderness (2008)&#39;, &#39;Strangeland (1998)&#39;, &#39;Stranger Than Paradise (1984)&#39;, &#39;Stranger in the House (1997)&#39;, &#39;Stranger than Fiction (2006)&#39;, &#39;Stranger, The (1946)&#39;, &#39;Strangers on a Train (1951)&#39;, &#39;Strangers with Candy (2005)&#39;, &#39;Strangers, The (2008)&#39;, &#39;Straw Dogs (1971)&#39;, &#39;Strawberry and Chocolate (Fresa y chocolate) (1993)&#39;, &#39;Stray Dog (Nora inu) (1949)&#39;, &#39;Street Fighter (1994)&#39;, &#39;Street Fighter II: The Animated Movie (Sutorîto Faitâ II gekijô-ban) (1994)&#39;, &#39;Street Kings (2008)&#39;, &#39;Streetcar Named Desire, A (1951)&#39;, &#39;Stretch (2014)&#39;, &#39;Strictly Ballroom (1992)&#39;, &#39;Strictly Sexual (2008)&#39;, &#39;Strike! (a.k.a. All I Wanna Do, The Hairy Bird) (1998)&#39;, &#39;Striking Distance (1993)&#39;, &#39;Stripes (1981)&#39;, &#39;Striptease (1996)&#39;, &#39;Stroszek (1977)&#39;, &#39;Stuart Little (1999)&#39;, &#39;Stuart Little 2 (2002)&#39;, &#39;Stuart Little 3: Call of the Wild (2005)&#39;, &#39;Stuart Saves His Family (1995)&#39;, &#39;Stuck (2007)&#39;, &#39;Stuck in Love (2012)&#39;, &#39;Stuck on You (2003)&#39;, &#39;Stunt Man, The (1980)&#39;, &#39;Stupids, The (1996)&#39;, &#39;Style Wars (1983)&#39;, &#39;SubUrbia (1997)&#39;, &#39;Submarine (2010)&#39;, &#39;Substitute, The (1996)&#39;, &#39;Suburban Commando (1991)&#39;, &#39;Subway (1985)&#39;, &#39;Sucker Punch (2011)&#39;, &#39;Sudden Death (1995)&#39;, &#39;Sudden Impact (1983)&#39;, &#39;Suddenly (1954)&#39;, &#39;Suddenly, Last Summer (1959)&#39;, &#39;Suffragette (2015)&#39;, &#39;Sugar &amp; Spice (2001)&#39;, &#39;Sugar Hill (1994)&#39;, &#39;Sugar Town (1999)&#39;, &#39;Sugarland Express, The (1974)&#39;, &#39;Suicide Club (Jisatsu saakuru) (2001)&#39;, &#39;Suicide Kings (1997)&#39;, &#39;Suicide Squad (2016)&#39;, &#39;Sukiyaki Western Django (2008)&#39;, &#34;Sullivan&#39;s Travels (1941)&#34;, &#39;Sully (2016)&#39;, &#39;Sum of All Fears, The (2002)&#39;, &#39;Sum of Us, The (1994)&#39;, &#39;Summer Catch (2001)&#39;, &#39;Summer Place, A (1959)&#39;, &#39;Summer Rental (1985)&#39;, &#39;Summer School (1987)&#39;, &#39;Summer Wars (Samâ wôzu) (2009)&#39;, &#39;Summer of Sam (1999)&#39;, &#34;Summer&#39;s Tale, A (Conte d&#39;été) (1996)&#34;, &#39;Sun Alley (Sonnenallee) (1999)&#39;, &#39;Sunflower (Xiang ri kui) (2005)&#39;, &#39;Sunless (Sans Soleil) (1983)&#39;, &#39;Sunrise: A Song of Two Humans (1927)&#39;, &#39;Sunset Blvd. (a.k.a. Sunset Boulevard) (1950)&#39;, &#39;Sunset Limited, The (2011)&#39;, &#39;Sunset Park (1996)&#39;, &#39;Sunshine (1999)&#39;, &#39;Sunshine (2007)&#39;, &#39;Sunshine Cleaning (2008)&#39;, &#39;Sunshine State (2002)&#39;, &#39;Super (2010)&#39;, &#39;Super 8 (2011)&#39;, &#39;Super High Me (2007)&#39;, &#39;Super Mario Bros. (1993)&#39;, &#39;Super Size Me (2004)&#39;, &#39;Super Troopers (2001)&#39;, &#39;Super, The (1991)&#39;, &#39;SuperFly (2018)&#39;, &#39;Superbad (2007)&#39;, &#39;Supercop (Police Story 3: Supercop) (Jing cha gu shi III: Chao ji jing cha) (1992)&#39;, &#39;Supercop 2 (Project S) (Chao ji ji hua) (1993)&#39;, &#39;Superfast! (2015)&#39;, &#39;Supergirl (1984)&#39;, &#39;Superhero Movie (2008)&#39;, &#39;Superman (1978)&#39;, &#39;Superman II (1980)&#39;, &#39;Superman III (1983)&#39;, &#39;Superman IV: The Quest for Peace (1987)&#39;, &#39;Superman Returns (2006)&#39;, &#39;Superman/Batman: Public Enemies (2009)&#39;, &#39;Superman/Doomsday (2007) &#39;, &#39;Supernova (2000)&#39;, &#39;Superstar (1999)&#39;, &#39;Sure Thing, The (1985)&#39;, &#39;Surf Nazis Must Die (1987)&#39;, &#34;Surf&#39;s Up (2007)&#34;, &#39;Suriyothai (a.k.a. Legend of Suriyothai, The) (2001)&#39;, &#39;Surrogates (2009)&#39;, &#39;Survive Style 5+ (2004)&#39;, &#39;Surviving Christmas (2004)&#39;, &#39;Surviving the Game (1994)&#39;, &#39;Survivor (2015)&#39;, &#39;Suspect Zero (2004)&#39;, &#39;Suspicion (1941)&#39;, &#39;Suspiria (1977)&#39;, &#39;Suture (1993)&#39;, &#39;Swamp Thing (1982)&#39;, &#39;Swamp, The (Ciénaga, La) (2001)&#39;, &#39;Swan Princess, The (1994)&#39;, &#39;Swarm, The (1978)&#39;, &#39;Sweeney Todd (2006)&#39;, &#39;Sweeney Todd: The Demon Barber of Fleet Street (2007)&#39;, &#39;Sweet Bird of Youth (1962)&#39;, &#39;Sweet Charity (1969)&#39;, &#39;Sweet Dreams (1985)&#39;, &#39;Sweet Hereafter, The (1997)&#39;, &#39;Sweet Home Alabama (2002)&#39;, &#39;Sweet Liberty (1986)&#39;, &#39;Sweet November (2001)&#39;, &#39;Sweet Sixteen (2002)&#39;, &#39;Sweet Smell of Success (1957)&#39;, &#39;Sweet and Lowdown (1999)&#39;, &#39;Sweetest Thing, The (2002)&#39;, &#39;Sweetgrass (2009)&#39;, &#39;Sweetie (1989)&#39;, &#39;Swelter (2014)&#39;, &#39;Swept Away (2002)&#39;, &#34;Swept Away (Travolti da un insolito destino nell&#39;azzurro mare d&#39;Agosto) (1975)&#34;, &#39;Swept from the Sea (1997)&#39;, &#39;Swimfan (2002)&#39;, &#39;Swimming Pool (2003)&#39;, &#39;Swimming with Sharks (1995)&#39;, &#39;Swing Kids (1993)&#39;, &#39;Swing Time (1936)&#39;, &#39;Swingers (1996)&#39;, &#39;Swiss Army Man (2016)&#39;, &#39;Swiss Family Robinson (1960)&#39;, &#39;Switch, The (2010)&#39;, &#39;Switchback (1997)&#39;, &#39;Sword Art Online The Movie: Ordinal Scale (2017)&#39;, &#39;Sword in the Stone, The (1963)&#39;, &#39;Sword of Doom, The (Dai-bosatsu tôge) (1966)&#39;, &#39;Sword of Vengeance (2014)&#39;, &#39;Sword of the Beast (Kedamono no ken) (1965)&#39;, &#39;Sword of the Stranger (Sutorejia: Mukô hadan) (2007)&#39;, &#39;Swordfish (2001)&#39;, &#39;Sydney (Hard Eight) (1996)&#39;, &#39;Sydney White (2007)&#39;, &#39;Sylvia (2003)&#39;, &#39;Sympathy for Mr. Vengeance (Boksuneun naui geot) (2002)&#39;, &#39;Sympathy for the Devil (1968)&#39;, &#39;Sympathy for the Underdog (1971)&#39;, &#39;Synecdoche, New York (2008)&#39;, &#39;Syriana (2005)&#39;, &#39;Syrup (2013)&#39;, &#39;T-Rex: Back to the Cretaceous (1998)&#39;, &#39;T2 3-D: Battle Across Time (1996)&#39;, &#39;T2: Trainspotting (2017)&#39;, &#39;THX 1138 (1971)&#39;, &#39;TMNT (Teenage Mutant Ninja Turtles) (2007)&#39;, &#39;TV Set, The (2006)&#39;, &#39;Table 19 (2017)&#39;, &#39;Tabu (2012)&#39;, &#39;Tadpole (2002)&#39;, &#39;Tae Guk Gi: The Brotherhood of War (Taegukgi hwinalrimyeo) (2004)&#39;, &#39;Tag (2018)&#39;, &#39;Tailor of Panama, The (2001)&#39;, &#34;Take Aim at the Police Van (Sono gosôsha wo nerae: &#39;Jûsangô taihisen&#39; yori) (1960)&#34;, &#39;Take Me Home Tonight (2011)&#39;, &#39;Take Shelter (2011)&#39;, &#39;Take This Job and Shove It (1981)&#39;, &#39;Take This Waltz (2011)&#39;, &#39;Take the Lead (2006)&#39;, &#39;Take the Money and Run (1969)&#39;, &#39;Taken (2008)&#39;, &#39;Taken 2 (2012)&#39;, &#39;Taken 3 (2015)&#39;, &#39;Takers (2010)&#39;, &#39;Taking Care of Business (1990)&#39;, &#39;Taking Lives (2004)&#39;, &#39;Taking Sides (2001)&#39;, &#39;Taking Woodstock (2009)&#39;, &#39;Taking of Pelham 1 2 3, The (2009)&#39;, &#39;Taking of Pelham One Two Three, The (1974)&#39;, &#39;Tale of Despereaux, The (2008)&#39;, &#39;Tale of Princess Kaguya, The (Kaguyahime no monogatari) (2013)&#39;, &#39;Tale of Two Cities, A (1935)&#39;, &#39;Tale of Two Sisters, A (Janghwa, Hongryeon) (2003)&#39;, &#39;Talent for the Game (1991)&#39;, &#39;Talented Mr. Ripley, The (1999)&#39;, &#39;Tales from the Crypt Presents: Bordello of Blood (1996)&#39;, &#39;Tales from the Crypt Presents: Demon Knight (1995)&#39;, &#39;Tales from the Darkside: The Movie (1990)&#39;, &#39;Tales from the Hood (1995)&#39;, &#39;Tales of Manhattan (1942)&#39;, &#39;Talk Radio (1988)&#39;, &#39;Talk of the Town, The (1942)&#39;, &#39;Talk to Her (Hable con Ella) (2002)&#39;, &#39;Tall Guy, The (1989)&#39;, &#39;Tall Man, The (2012)&#39;, &#39;Tall Tale (1995)&#39;, &#39;Talladega Nights: The Ballad of Ricky Bobby (2006)&#39;, &#39;Taming of the Shrew, The (1967)&#39;, &#39;Tammy (2014)&#39;, &#39;Tampopo (1985)&#39;, &#39;Tangerine (2015)&#39;, &#39;Tangerines (2013)&#39;, &#39;Tangled (2010)&#39;, &#39;Tangled Ever After (2012)&#39;, &#39;Tango &amp; Cash (1989)&#39;, &#39;Tango (1998)&#39;, &#39;Tanguy (2001)&#39;, &#39;Tank Girl (1995)&#39;, &#39;Tao of Steve, The (2000)&#39;, &#39;Tape (2001)&#39;, &#39;Tapeheads (1988)&#39;, &#39;Taps (1981)&#39;, &#39;Tarantula (1955)&#39;, &#39;Tarnation (2003)&#39;, &#39;Tarzan (1999)&#39;, &#39;Tarzan and the Lost City (1998)&#39;, &#34;Taste of Cherry (Ta&#39;m e guilass) (1997)&#34;, &#39;Tattooed Life (Irezumi ichidai) (1965)&#39;, &#39;Taxi (1998)&#39;, &#39;Taxi (2004)&#39;, &#39;Taxi 2 (2000)&#39;, &#39;Taxi 3 (2003)&#39;, &#39;Taxi 4 (2007)&#39;, &#39;Taxi Driver (1976)&#39;, &#39;Taxi to the Dark Side (2007)&#39;, &#39;Tea with Mussolini (1999)&#39;, &#34;Teacher&#39;s Pet (1958)&#34;, &#39;Teaching Mrs. Tingle (1999)&#39;, &#39;Teahouse of the August Moon, The (1956)&#39;, &#39;Team America: World Police (2004)&#39;, &#39;Tears for Sale (2008)&#39;, &#39;Tears of the Sun (2003)&#39;, &#39;Ted (2012)&#39;, &#39;Ted 2 (2015)&#39;, &#39;Teddy Bear (Mis) (1981)&#39;, &#39;Teen Wolf (1985)&#39;, &#39;Teenage Mutant Ninja Turtles (1990)&#39;, &#39;Teenage Mutant Ninja Turtles (2014)&#39;, &#39;Teenage Mutant Ninja Turtles II: The Secret of the Ooze (1991)&#39;, &#39;Teenage Mutant Ninja Turtles III (1993)&#39;, &#39;Teenage Mutant Ninja Turtles: Out of the Shadows (2016)&#39;, &#39;Teenage Mutant Ninja Turtles: Turtles Forever (2009)&#39;, &#39;Teeth (2007)&#39;, &#39;Tekkonkinkreet (Tekkon kinkurîto) (2006)&#39;, &#39;Teknolust (2002)&#39;, &#39;Tell No One (Ne le dis à personne) (2006)&#39;, &#39;Temple Grandin (2010)&#39;, &#39;Temptress Moon (Feng Yue) (1996)&#39;, &#39;Ten Commandments, The (1956)&#39;, &#39;Ten, The (2007)&#39;, &#39;Tenacious D in The Pick of Destiny (2006)&#39;, &#39;Tenant, The (Locataire, Le) (1976)&#39;, &#39;Tenchi Muyô! In Love (1996)&#39;, &#39;Tender Mercies (1983)&#39;, &#39;Tenebre (1982)&#39;, &#39;Tequila Sunrise (1988)&#39;, &#39;Terminal Velocity (1994)&#39;, &#39;Terminal, The (2004)&#39;, &#39;Terminator 2: Judgment Day (1991)&#39;, &#39;Terminator 3: Rise of the Machines (2003)&#39;, &#39;Terminator Genisys (2015)&#39;, &#39;Terminator Salvation (2009)&#39;, &#39;Terminator, The (1984)&#39;, &#39;Terms of Endearment (1983)&#39;, &#39;Terri (2011)&#39;, &#39;Terrorist, The (a.k.a. Malli) (Theeviravaathi) (1998)&#39;, &#39;Testament of Dr. Mabuse, The (Das Testament des Dr. Mabuse) (1933)&#39;, &#39;Tetro (2009)&#39;, &#39;Tetsuo, the Ironman (Tetsuo) (1988)&#39;, &#39;Tex (1982)&#39;, &#39;Texas - Doc Snyder hält die Welt in Atem (1993)&#39;, &#39;Texas Chainsaw 3D (2013)&#39;, &#39;Texas Chainsaw Massacre 2, The (1986)&#39;, &#39;Texas Chainsaw Massacre, The (1974)&#39;, &#39;Texas Chainsaw Massacre, The (2003)&#39;, &#39;Texas Chainsaw Massacre: The Beginning, The (2006)&#39;, &#39;Texas Chainsaw Massacre: The Next Generation (a.k.a. The Return of the Texas Chainsaw Massacre) (1994)&#39;, &#39;Texas Rangers (2001)&#39;, &#39;Thank You for Smoking (2006)&#39;, &#39;That Awkward Moment (2014)&#39;, &#39;That Darn Cat (1997)&#39;, &#39;That Darn Cat! (1965)&#39;, &#39;That Demon Within (2014)&#39;, &#39;That Munchhausen (1979)&#39;, &#39;That Obscure Object of Desire (Cet obscur objet du désir) (1977)&#39;, &#39;That Sugar Film (2014)&#39;, &#39;That Thing You Do! (1996)&#39;, &#39;That Touch of Mink (1962)&#39;, &#34;That&#39;s Entertainment (1974)&#34;, &#34;That&#39;s My Boy (2012)&#34;, &#39;The 5th Wave (2016)&#39;, &#39;The Accountant (2016)&#39;, &#39;The Adderall Diaries (2015)&#39;, &#39;The Adventures of Sherlock Holmes and Doctor Watson&#39;, &#39;The Adventures of Sherlock Holmes and Doctor Watson: King of Blackmailers (1980)&#39;, &#39;The Adventures of Sherlock Holmes and Doctor Watson: The Hunt for the Tiger (1980)&#39;, &#39;The Adventures of Sherlock Holmes and Doctor Watson: The Treasures of Agra (1983)&#39;, &#39;The Adventures of Sherlock Holmes and Dr. Watson: Bloody Signature (1979)&#39;, &#39;The Adventures of Sherlock Holmes and Dr. Watson: The Hound of the Baskervilles (1981)&#39;, &#39;The African Doctor (2016)&#39;, &#39;The Alamo (2004)&#39;, &#39;The Amazing Screw-On Head (2006)&#39;, &#39;The Amazing Spider-Man 2 (2014)&#39;, &#39;The Angry Birds Movie (2016)&#39;, &#39;The Artist (2011)&#39;, &#39;The BFG (2016)&#39;, &#39;The Barkley Marathons: The Race That Eats Its Young (2015)&#39;, &#39;The Beast of Hollow Mountain (1956)&#39;, &#39;The Beguiled (2017)&#39;, &#39;The Big Bus (1976)&#39;, &#39;The Big Sick (2017)&#39;, &#39;The Blue Lagoon (1949)&#39;, &#39;The Blue Planet (2001)&#39;, &#39;The Book of Life (2014)&#39;, &#39;The Boss (2016)&#39;, &#39;The Boss Baby (2017)&#39;, &#39;The Boy Next Door (2015)&#39;, &#39;The Boy and the Beast (2015)&#39;, &#39;The Brain (1969)&#39;, &#39;The Brand New Testament (2015)&#39;, &#39;The Bremen Town Musicians (1969)&#39;, &#39;The Brothers Grimsby (2016)&#39;, &#39;The Butterfly Effect (2004)&#39;, &#39;The Butterfly Effect 3: Revelations (2009)&#39;, &#39;The Cave of the Golden Rose (1991)&#39;, &#39;The Chumscrubber (2005)&#39;, &#39;The Circle (2016)&#39;, &#39;The Clapper (2018)&#39;, &#39;The Cloverfield Paradox (2018)&#39;, &#39;The Cobbler (2015)&#39;, &#39;The Commuter (2018)&#39;, &#39;The Conjuring 2 (2016)&#39;, &#39;The Count of Monte Cristo (2002)&#39;, &#39;The Crew (2016)&#39;, &#39;The D Train (2015)&#39;, &#39;The DUFF (2015)&#39;, &#39;The Danish Girl (2015)&#39;, &#39;The Dark Tower (2017)&#39;, &#39;The Dark Valley (2014)&#39;, &#39;The Darkest Minds (2018)&#39;, &#39;The Deadly Bees (1967)&#39;, &#39;The Death of Louis XIV (2016)&#39;, &#39;The Death of Stalin (2017)&#39;, &#34;The Devil&#39;s Advocate (1997)&#34;, &#34;The Devil&#39;s Candy (2015)&#34;, &#39;The Diary of Anne Frank (1959)&#39;, &#39;The Diary of Anne Frank (2009)&#39;, &#39;The Disaster Artist (2017)&#39;, &#39;The Do-Over (2016)&#39;, &#39;The Dressmaker (2015)&#39;, &#39;The Drop (2014)&#39;, &#39;The Duke of Burgundy (2014)&#39;, &#39;The Edge of Seventeen (2016)&#39;, &#39;The Editor (2015)&#39;, &#39;The Electric Hotel (1908)&#39;, &#39;The Emoji Movie (2017)&#39;, &#34;The Emperor&#39;s Club (2002)&#34;, &#39;The End of the Tour (2015)&#39;, &#39;The Escort (2015)&#39;, &#39;The Even Stevens Movie (2003)&#39;, &#39;The Expendables 3 (2014)&#39;, &#39;The Eye: Infinity (2005)&#39;, &#39;The FP (2012)&#39;, &#39;The Face of an Angel (2015)&#39;, &#39;The Falcon and the Snowman (1985)&#39;, &#39;The Fate of the Furious (2017)&#39;, &#39;The Fault in Our Stars (2014)&#39;, &#39;The Final Girls (2015)&#39;, &#39;The Finest Hours (2016)&#39;, &#39;The Flash 2 - Revenge of the Trickster (1991)&#39;, &#39;The Fool (2014)&#39;, &#39;The Forbidden Dance (1990)&#39;, &#39;The Forgotten Space (2010)&#39;, &#39;The Founder (2016)&#39;, &#39;The Fox and the Hound 2 (2006)&#39;, &#39;The Fundamentals of Caring (2016)&#39;, &#39;The Gallows (2015)&#39;, &#39;The Gambler (2014)&#39;, &#39;The Gift (2015)&#39;, &#39;The Girl on the Train (2016)&#39;, &#39;The Girl with All the Gifts (2016)&#39;, &#39;The Girls (1961)&#39;, &#39;The Godfather Trilogy: 1972-1990 (1992)&#39;, &#39;The Golden Voyage of Sinbad (1973)&#39;, &#39;The Good Boy (2016)&#39;, &#39;The Good Dinosaur (2015)&#39;, &#39;The Gracefield Incident (2015)&#39;, &#39;The Grandmother (1970)&#39;, &#39;The Great Hypnotist (2014)&#39;, &#39;The Great Raid (2005)&#39;, &#39;The Great Train Robbery (1903)&#39;, &#39;The Great Train Robbery (1978)&#39;, &#39;The Greatest Showman (2017)&#39;, &#39;The Green Inferno (2014)&#39;, &#39;The Green Prince (2014)&#39;, &#39;The Hairdresser (2010)&#39;, &#39;The Handmaiden (2016)&#39;, &#39;The Hateful Eight (2015)&#39;, &#39;The Hero (2017)&#39;, &#34;The Hitman&#39;s Bodyguard (2017)&#34;, &#39;The Hobbit: The Battle of the Five Armies (2014)&#39;, &#39;The Hound of the Baskervilles (1988)&#39;, &#39;The House (2017)&#39;, &#39;The Hundred-Foot Journey (2014)&#39;, &#39;The Hunger (1983)&#39;, &#39;The Hunger Games (2012)&#39;, &#39;The Hunger Games: Catching Fire (2013)&#39;, &#39;The Hunger Games: Mockingjay - Part 1 (2014)&#39;, &#39;The Hunger Games: Mockingjay - Part 2 (2015)&#39;, &#39;The Hungover Games (2014)&#39;, &#34;The Huntsman Winter&#39;s War (2016)&#34;, &#39;The Idolmaker (1980)&#39;, &#39;The Imitation Game (2014)&#39;, &#39;The Importance of Being Earnest (1952)&#39;, &#39;The Infiltrator (2016)&#39;, &#39;The Intern (2015)&#39;, &#39;The Interview (2014)&#39;, &#39;The Island (2006)&#39;, &#39;The Jane Austen Book Club (2007)&#39;, &#39;The Jinx: The Life and Deaths of Robert Durst (2015)&#39;, &#39;The Jungle Book (2016)&#39;, &#39;The Lair of the White Worm (1988)&#39;, &#39;The Last Five Years (2014)&#39;, &#39;The Last Witch Hunter (2015)&#39;, &#39;The Legend of Tarzan (2016)&#39;, &#39;The Lego Batman Movie (2017)&#39;, &#39;The Lego Movie (2014)&#39;, &#39;The Little Prince (2015)&#39;, &#39;The Little World of Don Camillo (1952)&#39;, &#39;The Lobster (2015)&#39;, &#39;The Loft (2014)&#39;, &#39;The Longest Ride (2015)&#39;, &#39;The Longest Week (2014)&#39;, &#34;The Lord&#39;s Lantern in Budapest (1999)&#34;, &#39;The Lost Room (2006)&#39;, &#39;The Love Bug (1997)&#39;, &#39;The Lovers (2015)&#39;, &#39;The Machinist (2004)&#39;, &#39;The Madagascar Penguins in a Christmas Caper (2005)&#39;, &#39;The Magic Ring (1982)&#39;, &#39;The Magician (1958)&#39;, &#39;The Magnificent Ruffians (1979)&#39;, &#39;The Magnificent Seven (2016)&#39;, &#34;The Maid&#39;s Room (2014)&#34;, &#39;The Malibu Bikini Shop (1986)&#39;, &#39;The Man Who Killed Don Quixote (2018)&#39;, &#39;The Man Who Knew Infinity (2016)&#39;, &#39;The Man from Nowhere (2010)&#39;, &#39;The Man from U.N.C.L.E. (2015)&#39;, &#39;The Man in the Moon (1991)&#39;, &#39;The Martian (2015)&#39;, &#39;The Meddler (2016)&#39;, &#39;The Meyerowitz Stories (2017)&#39;, &#39;The Monkey King (1964)&#39;, &#39;The Mule (2014)&#39;, &#39;The Mummy (2017)&#39;, &#39;The Natural Love (1996)&#39;, &#39;The Neon Demon (2016)&#39;, &#39;The Nice Guys (2016)&#39;, &#39;The Night Before (1988)&#39;, &#39;The Night Before (2015)&#39;, &#39;The Night Is Short, Walk on Girl (2017)&#39;, &#39;The Nut Job 2: Nutty by Nature (2017)&#39;, &#39;The OA&#39;, &#39;The Odyssey (1997)&#39;, &#39;The Opposite Sex (2014)&#39;, &#39;The Overnight (2015)&#39;, &#39;The Pacific (2010)&#39;, &#39;The Perfect Guy (2015)&#39;, &#39;The Plague of the Zombies (1966)&#39;, &#39;The Players Club (1998)&#39;, &#39;The Post (2017)&#39;, &#39;The Prime Gig (2000)&#39;, &#39;The Professional: Golgo 13 (1983)&#39;, &#39;The Pumaman (1980)&#39;, &#39;The Punisher: Dirty Laundry (2012)&#39;, &#39;The Purge: Election Year (2016)&#39;, &#39;The Purple Sea (2009)&#39;, &#39;The Putin Interviews (2017)&#39;, &#39;The Queen (2006)&#39;, &#39;The Quiet Family (1998)&#39;, &#34;The Rabbi&#39;s Cat (Le chat du rabbin) (2011)&#34;, &#39;The Raid 2: Berandal (2014)&#39;, &#39;The Raid: Redemption (2011)&#39;, &#39;The Red Turtle (2016)&#39;, &#39;The Return of Don Camillo (1953)&#39;, &#39;The Revenant (2015)&#39;, &#39;The Ridiculous 6 (2015)&#39;, &#39;The Road Within (2014)&#39;, &#34;The Rocky Horror Picture Show: Let&#39;s Do the Time Warp Again (2016)&#34;, &#39;The Runner (2015)&#39;, &#39;The Salt of the Earth (2014)&#39;, &#39;The Scorpion King (2002)&#39;, &#39;The Second Best Exotic Marigold Hotel (2015)&#39;, &#39;The Second Renaissance Part II (2003)&#39;, &#39;The Secret Life of Pets (2016)&#39;, &#39;The Shallows (2016)&#39;, &#39;The Shape of Water (2017)&#39;, &#39;The Shining (1997)&#39;, &#39;The Silence of the Hams (1994)&#39;, &#39;The Skeleton Twins (2014)&#39;, &#39;The Space Between Us (2016)&#39;, &#39;The Spectacular Now (2013)&#39;, &#39;The Spiral Staircase (1945)&#39;, &#39;The Spirit of Christmas (1995)&#39;, &#39;The Square (2017)&#39;, &#39;The Squeeze (2015)&#39;, &#39;The Stanford Prison Experiment (2015)&#39;, &#39;The Star Wars Holiday Special (1978)&#39;, &#39;The Survivalist (2015)&#39;, &#39;The Tale of the Bunny Picnic (1986)&#39;, &#39;The Taming of the Scoundrel (1980)&#39;, &#39;The Theory of Everything (2014)&#39;, &#39;The Thief (1997)&#39;, &#39;The Thinning (2016)&#39;, &#39;The Town that Dreaded Sundown (2014)&#39;, &#39;The True Memoirs of an International Assassin (2016)&#39;, &#39;The Trust (2016)&#39;, &#39;The Unauthorized Saved by the Bell Story (2014)&#39;, &#39;The Voices (2014)&#39;, &#39;The Void (2016)&#39;, &#39;The Wailing (2016)&#39;, &#39;The Wait (2015)&#39;, &#39;The Walk (2015)&#39;, &#39;The Way (2010)&#39;, &#39;The Wedding Ringer (2015)&#39;, &#39;The Wild One (1953)&#39;, &#39;The Witch (2015)&#39;, &#39;The Wolfpack (2015)&#39;, &#39;The Wooden Horse (1950)&#39;, &#39;The Year My Voice Broke (1987)&#39;, &#39;Thelma &amp; Louise (1991)&#39;, &#39;Them (Ils) (2006)&#39;, &#39;Them! (1954)&#39;, &#39;Themroc (1973)&#39;, &#39;Theodore Rex (1995)&#39;, &#39;There Once Was a Dog (1982)&#39;, &#39;There Will Be Blood (2007)&#39;, &#39;There Will Come a Day (2013)&#39;, &#34;There&#39;s Something About Mary (1998)&#34;, &#39;Theremin: An Electronic Odyssey (1993)&#39;, &#39;Thesis (Tesis) (1996)&#39;, &#39;They (2002)&#39;, &#39;They Call Me Bruce? (a.k.a. A Fistful of Chopsticks) (1982)&#39;, &#39;They Call Me Trinity (1971)&#39;, &#39;They Came Together (2014)&#39;, &#39;They Drive by Night (1940)&#39;, &#39;They Live (1988)&#39;, &#39;They Might Be Giants (1971)&#39;, &#34;They Shoot Horses, Don&#39;t They? (1969)&#34;, &#39;Thief (1981)&#39;, &#39;Thief of Bagdad, The (1924)&#39;, &#39;Thief of Bagdad, The (1940)&#39;, &#39;Thief of Paris, The (Le voleur) (1967)&#39;, &#39;Thieves (Voleurs, Les) (1996)&#39;, &#39;Thin Blue Line, The (1988)&#39;, &#39;Thin Line Between Love and Hate, A (1996)&#39;, &#39;Thin Man Goes Home, The (1945)&#39;, &#39;Thin Man, The (1934)&#39;, &#39;Thin Red Line, The (1998)&#39;, &#39;Thing Called Love, The (1993)&#39;, &#39;Thing from Another World, The (1951)&#39;, &#39;Thing with Two Heads, The (1972)&#39;, &#39;Thing, The (1982)&#39;, &#39;Thing, The (2011)&#39;, &#39;Thing: Terror Takes Shape, The (1998)&#39;, &#39;Things You Can Tell Just by Looking at Her (2000)&#39;, &#34;Things to Do in Denver When You&#39;re Dead (1995)&#34;, &#39;Think Like a Man (2012)&#39;, &#39;Think Like a Man Too (2014)&#39;, &#39;Thinner (1996)&#39;, &#39;Third Man, The (1949)&#39;, &#39;Third Miracle, The (1999)&#39;, &#39;Thirst (Bakjwi) (2009)&#39;, &#39;Thirteen (2003)&#39;, &#39;Thirteen Conversations About One Thing (a.k.a. 13 Conversations) (2001)&#39;, &#39;Thirteen Days (2000)&#39;, &#39;Thirteen Ghosts (a.k.a. Thir13en Ghosts) (2001)&#39;, &#39;Thirteenth Floor, The (1999)&#39;, &#39;Thirty-Two Short Films About Glenn Gould (1993)&#39;, &#34;This Boy&#39;s Life (1993)&#34;, &#39;This Film Is Not Yet Rated (2006)&#39;, &#39;This Is 40 (2012)&#39;, &#39;This Is England (2006)&#39;, &#39;This Is My Father (1998)&#39;, &#39;This Is Spinal Tap (1984)&#39;, &#39;This Is Where I Leave You (2014)&#39;, &#39;This Is the End (2013)&#39;, &#39;This Island Earth (1955)&#39;, &#39;This Means War (2012)&#39;, &#39;This Must Be the Place (2011)&#39;, &#39;This Property is Condemned (1966)&#39;, &#39;This So-Called Disaster (2003)&#39;, &#39;This World, Then the Fireworks (1997)&#39;, &#39;Thomas Crown Affair, The (1968)&#39;, &#39;Thomas Crown Affair, The (1999)&#39;, &#39;Thor (2011)&#39;, &#39;Thor: Ragnarok (2017)&#39;, &#39;Thor: The Dark World (2013)&#39;, &#39;Thoroughly Modern Millie (1967)&#39;, &#39;Those Happy Days (2006)&#39;, &#39;Those Magnificent Men in Their Flying Machines (1965)&#39;, &#39;Thousand Acres, A (1997)&#39;, &#39;Thousand Clowns, A (1965)&#39;, &#39;Thousand Words, A (2012)&#39;, &#39;Three Billboards Outside Ebbing, Missouri (2017)&#39;, &#39;Three Burials of Melquiades Estrada, The (2006)&#39;, &#39;Three Caballeros, The (1945)&#39;, &#39;Three Colors: Blue (Trois couleurs: Bleu) (1993)&#39;, &#39;Three Colors: Red (Trois couleurs: Rouge) (1994)&#39;, &#39;Three Colors: White (Trzy kolory: Bialy) (1994)&#39;, &#39;Three Days of the Condor (3 Days of the Condor) (1975)&#39;, &#39;Three Faces of Eve, The (1957)&#39;, &#39;Three Fugitives (1989)&#39;, &#39;Three Kings (1999)&#39;, &#39;Three Men and a Baby (1987)&#39;, &#39;Three Men and a Cradle (3 hommes et un couffin) (1985)&#39;, &#39;Three Men and a Little Lady (1990)&#39;, &#39;Three Musketeers, The (1948)&#39;, &#39;Three Musketeers, The (1973)&#39;, &#39;Three Musketeers, The (1993)&#39;, &#39;Three Musketeers, The (2011)&#39;, &#34;Three O&#39;Clock High (1987)&#34;, &#39;Three Outlaw Samurai (Sanbiki no samurai) (1964)&#39;, &#39;Three Stooges, The (2012)&#39;, &#39;Three Wishes (1995)&#39;, &#39;Three from Prostokvashino (1978)&#39;, &#39;Three to Tango (1999)&#39;, &#39;Threesome (1994)&#39;, &#39;Thrill of It All, The (1963)&#39;, &#39;Throne of Blood (Kumonosu jô) (1957)&#39;, &#39;Through a Glass Darkly (Såsom i en spegel) (1961)&#39;, &#39;Throw Momma from the Train (1987)&#39;, &#39;Thumbelina (1994)&#39;, &#39;Thumbsucker (2005)&#39;, &#39;Thunderball (1965)&#39;, &#39;Thunderbirds (2004)&#39;, &#39;Thunderbolt and Lightfoot (1974)&#39;, &#39;Thursday (1998)&#39;, &#39;TiMER (2009)&#39;, &#39;Tickling Giants (2017)&#39;, &#39;Tideland (2005)&#39;, &#39;Tie Me Up! Tie Me Down! (¡Átame!) (1990)&#39;, &#39;Tie Xi Qu: West of the Tracks (Tiexi qu) (2003)&#39;, &#39;Tiger Raid (2016)&#39;, &#39;Tiger and the Snow, The (La tigre e la neve) (2005)&#39;, &#39;Tigerland (2000)&#39;, &#39;Tigger Movie, The (2000)&#39;, &#39;Tightrope (1984)&#39;, &#39;Tilt (2011)&#39;, &#34;Tim&#39;s Vermeer (2013)&#34;, &#39;Time After Time (1979)&#39;, &#39;Time Bandits (1981)&#39;, &#39;Time Code (2000)&#39;, &#39;Time Lapse (2014)&#39;, &#39;Time Machine, The (1960)&#39;, &#39;Time Machine, The (2002)&#39;, &#39;Time Masters (Maîtres du temps, Les) (1982)&#39;, &#34;Time Out (L&#39;emploi du temps) (2001)&#34;, &#34;Time Traveler&#39;s Wife, The (2009)&#34;, &#39;Time of the Gypsies (Dom za vesanje) (1989)&#39;, &#39;Time to Kill, A (1996)&#39;, &#39;Timecop (1994)&#39;, &#39;Timecrimes (Cronocrímenes, Los) (2007)&#39;, &#39;Timeline (2003)&#39;, &#39;Times of Harvey Milk, The (1984)&#39;, &#39;Tin Cup (1996)&#39;, &#39;Tin Drum, The (Blechtrommel, Die) (1979)&#39;, &#39;Tin Man (2007)&#39;, &#39;Tin Men (1987)&#39;, &#39;Tinker Tailor Soldier Spy (2011)&#39;, &#39;Tinker, Tailor, Soldier, Spy (1979)&#39;, &#39;Titan A.E. (2000)&#39;, &#39;Titanic (1953)&#39;, &#39;Titanic (1997)&#39;, &#39;Titanica (1992)&#39;, &#39;Titicut Follies (1967)&#39;, &#39;Titus (1999)&#39;, &#39;To Be and to Have (Être et avoir) (2002)&#39;, &#39;To Be or Not to Be (1942)&#39;, &#39;To Catch a Thief (1955)&#39;, &#39;To Die For (1995)&#39;, &#39;To Do List, The (2013)&#39;, &#39;To Each His Own (1946)&#39;, &#39;To End All Wars (2001)&#39;, &#39;To Gillian on Her 37th Birthday (1996)&#39;, &#34;To Grandmother&#39;s House We Go (1992)&#34;, &#39;To Have and Have Not (1944)&#39;, &#39;To Kill a Mockingbird (1962)&#39;, &#39;To Live (Huozhe) (1994)&#39;, &#39;To Live and Die in L.A. (1985)&#39;, &#39;To Rome with Love (2012)&#39;, &#39;To Sir with Love (1967)&#39;, &#39;To Wong Foo, Thanks for Everything! Julie Newmar (1995)&#39;, &#39;Together (Han ni Zai Yiki) (2002)&#39;, &#39;Together (Tillsammans) (2000)&#39;, &#39;Tokyo Decadence (Topâzu) (1992)&#39;, &#39;Tokyo Drifter (Tôkyô nagaremono) (1966)&#39;, &#39;Tokyo Godfathers (2003)&#39;, &#39;Tokyo Idols (2017)&#39;, &#39;Tokyo Story (Tôkyô monogatari) (1953)&#39;, &#39;Tokyo Tribe (2014)&#39;, &#39;Tokyo! (2008)&#39;, &#39;Tokyo-Ga (1985)&#39;, &#39;Tom &amp; Viv (1994)&#39;, &#39;Tom Horn (1980)&#39;, &#39;Tom Jones (1963)&#39;, &#39;Tom Segura: Completely Normal (2014)&#39;, &#39;Tom Segura: Disgraceful (2018)&#39;, &#39;Tom Segura: Mostly Stories (2016)&#39;, &#39;Tom and Huck (1995)&#39;, &#39;Tom and Jerry: A Nutcracker Tale (2007)&#39;, &#39;Tom and Jerry: Shiver Me Whiskers (2006)&#39;, &#39;Tomb Raider (2018)&#39;, &#39;Tomboy (2011)&#39;, &#39;Tombstone (1993)&#39;, &#39;Tomcats (2001)&#39;, &#39;Tommy (1975)&#39;, &#39;Tommy Boy (1995)&#39;, &#39;Tomorrow (2015)&#39;, &#39;Tomorrow Never Dies (1997)&#39;, &#39;Tomorrowland (2015)&#39;, &#39;Toni Erdmann (2016)&#39;, &#39;Too Big to Fail (2011)&#39;, &#39;Too Funny to Fail: The Life and Death of The Dana Carvey Show (2017)&#39;, &#39;Too Late for Tears (1949)&#39;, &#39;Too Many Cooks (2014)&#39;, &#39;Tooth Fairy (2010)&#39;, &#39;Tooth Fairy 2 (2012)&#39;, &#39;Tootsie (1982)&#39;, &#39;Top Five (2014)&#39;, &#39;Top Gun (1986)&#39;, &#39;Top Hat (1935)&#39;, &#39;Top Secret! (1984)&#39;, &#39;Topaz (1969)&#39;, &#39;Topkapi (1964)&#39;, &#39;Topo, El (1970)&#39;, &#39;Topsy-Turvy (1999)&#39;, &#39;Tora! Tora! Tora! (1970)&#39;, &#39;Tormented (1960)&#39;, &#39;Torn Curtain (1966)&#39;, &#39;Tornado! (1996)&#39;, &#39;Torque (2004)&#39;, &#39;Tortilla Soup (2001)&#39;, &#39;Total Eclipse (1995)&#39;, &#39;Total Recall (1990)&#39;, &#39;Total Recall (2012)&#39;, &#39;Touch (1997)&#39;, &#39;Touch of Evil (1958)&#39;, &#39;Touch of Pink (2004)&#39;, &#39;Touch of Zen, A (Xia nu) (1971)&#39;, &#39;Touching the Void (2003)&#39;, &#39;Tough Guys (1986)&#39;, &#39;Touki Bouki (1973)&#39;, &#39;Tourist, The (2010)&#39;, &#39;Tournament, The (2009)&#39;, &#39;Tower Heist (2011)&#39;, &#39;Towering Inferno, The (1974)&#39;, &#39;Town &amp; Country (2001)&#39;, &#39;Town Called Panic, A (Panique au village) (2009)&#39;, &#39;Town is Quiet, The (Ville est tranquille, La) (2000)&#39;, &#39;Town, The (2010)&#39;, &#39;Toxic Avenger Part III: The Last Temptation of Toxie, The (1989)&#39;, &#39;Toxic Avenger, Part II, The (1989)&#39;, &#39;Toxic Avenger, The (1985)&#39;, &#39;Toy Soldiers (1991)&#39;, &#39;Toy Story (1995)&#39;, &#39;Toy Story 2 (1999)&#39;, &#39;Toy Story 3 (2010)&#39;, &#39;Toy, The (1982)&#39;, &#39;Toys (1992)&#39;, &#39;Tracers (2015)&#39;, &#39;Tracey Fragments, The (2007)&#39;, &#39;Trading Places (1983)&#39;, &#39;Traffic (2000)&#39;, &#39;Trail of the Pink Panther (1982)&#39;, &#39;Trailer Park Boys (1999)&#39;, &#39;Train of Life (Train de vie) (1998)&#39;, &#39;Train to Busan (2016)&#39;, &#39;Training Day (2001)&#39;, &#39;Trainspotting (1996)&#39;, &#39;Trainwreck (2015)&#39;, &#39;Traitor (2008)&#39;, &#39;Trance (2013)&#39;, &#39;Transamerica (2005)&#39;, &#39;Transcendence (2014)&#39;, &#39;Transformers (2007)&#39;, &#39;Transformers: Age of Extinction (2014)&#39;, &#39;Transformers: Dark of the Moon (2011)&#39;, &#39;Transformers: Revenge of the Fallen (2009)&#39;, &#39;Transformers: The Movie (1986)&#39;, &#39;Transporter 2 (2005)&#39;, &#39;Transporter 3 (2008)&#39;, &#39;Transporter, The (2002)&#39;, &#39;Transsiberian (2008)&#39;, &#39;Trapped (2002)&#39;, &#39;Trapped in Paradise (1994)&#39;, &#39;Trash Humpers (2009)&#39;, &#39;Travels of an Ant (1983)&#39;, &#39;Treasure Island (1950)&#39;, &#39;Treasure Island (2012)&#39;, &#39;Treasure Planet (2002)&#39;, &#39;Treasure of the Sierra Madre, The (1948)&#39;, &#39;Tree of Life, The (2011)&#39;, &#39;Trees Lounge (1996)&#39;, &#39;Trekkies (1997)&#39;, &#39;Tremors (1990)&#39;, &#39;Tremors 3: Back to Perfection (2001)&#39;, &#39;Tremors 4: The Legend Begins (2004)&#39;, &#39;Tremors II: Aftershocks (1996)&#39;, &#39;Trevor Noah: African American (2013)&#39;, &#39;Trial and Error (1997)&#39;, &#39;Trial, The (Procès, Le) (1962)&#39;, &#39;Trials of Henry Kissinger, The (2002)&#39;, &#39;Triangle (2009)&#39;, &#34;Trick &#39;r Treat (2007)&#34;, &#39;Trigger Effect, The (1996)&#39;, &#39;Trilogy of Terror (1975)&#39;, &#39;Trinity and Sartana Are Coming (1972)&#39;, &#39;Trip to Bountiful, The (1985)&#39;, &#39;Trip to the Moon, A (Voyage dans la lune, Le) (1902)&#39;, &#39;Trip, The (2002)&#39;, &#39;Trip, The (2010)&#39;, &#39;Triplets of Belleville, The (Les triplettes de Belleville) (2003)&#39;, &#34;Trippin&#39; (1999)&#34;, &#39;Tristan &amp; Isolde (2006)&#39;, &#39;Tristram Shandy: A Cock and Bull Story (2005)&#39;, &#39;Triumph of Love, The (2001)&#39;, &#39;Triumph of the Spirit (1989)&#39;, &#39;Triumph of the Will (Triumph des Willens) (1934)&#39;, &#39;Troll 2 (1990)&#39;, &#39;Troll Hunter, The (Trolljegeren) (2010)&#39;, &#39;Tron (1982)&#39;, &#39;Tron: Legacy (2010)&#39;, &#39;Troop Beverly Hills (1989)&#39;, &#39;Tropic Thunder (2008)&#39;, &#39;Trou, Le (Hole, The) (Night Watch, The) (1960)&#39;, &#39;Trouble in Paradise (1932)&#39;, &#39;Trouble with Harry, The (1955)&#39;, &#39;Troy (2004)&#39;, &#39;True Crime (1996)&#39;, &#39;True Crime (1999)&#39;, &#39;True Grit (1969)&#39;, &#39;True Grit (2010)&#39;, &#39;True Lies (1994)&#39;, &#39;True Romance (1993)&#39;, &#39;True Stories (1986)&#39;, &#39;True Story (2015)&#39;, &#39;Truly, Madly, Deeply (1991)&#39;, &#39;Truman Show, The (1998)&#39;, &#39;Trumbo (2015)&#39;, &#39;Trust (1990)&#39;, &#39;Truth (2015)&#39;, &#39;Truth About Cats &amp; Dogs, The (1996)&#39;, &#39;Truth About Charlie, The (2002)&#39;, &#39;Tsotsi (2005)&#39;, &#39;Tuck Everlasting (2002)&#39;, &#39;Tucker &amp; Dale vs Evil (2010)&#39;, &#39;Tucker: The Man and His Dream (1988)&#39;, &#39;Tuesdays with Morrie (1999)&#39;, &#39;Tully (2000)&#39;, &#39;Tupac: Resurrection (2003)&#39;, &#39;Turbo (2013)&#39;, &#39;Turbo Kid (2015)&#39;, &#39;Turbo: A Power Rangers Movie (1997)&#39;, &#39;Turbulence (1997)&#39;, &#39;Turkish Delight (Turks fruit) (1973)&#39;, &#39;Turner &amp; Hooch (1989)&#39;, &#39;Turning Point, The (1977)&#39;, &#39;Turtle Diary (1985)&#39;, &#39;Turtle Power: The Definitive History of the Teenage Mutant Ninja Turtles (2014)&#39;, &#39;Turtles Can Fly (Lakposhtha hâm parvaz mikonand) (2004)&#39;, &#39;Tusk (2014)&#39;, &#39;Tuskegee Airmen, The (1995)&#39;, &#39;Tuxedo, The (2002)&#39;, &#39;Twelfth Night (1996)&#39;, &#39;Twelve Chairs, The (1970)&#39;, &#39;Twelve Monkeys (a.k.a. 12 Monkeys) (1995)&#39;, &#34;Twelve O&#39;Clock High (1949)&#34;, &#34;Twelve Tasks of Asterix, The (Les douze travaux d&#39;Astérix) (1976)&#34;, &#39;Twilight (1998)&#39;, &#39;Twilight (2008)&#39;, &#39;Twilight Saga: Breaking Dawn - Part 1, The (2011)&#39;, &#39;Twilight Saga: Breaking Dawn - Part 2, The (2012)&#39;, &#39;Twilight Saga: Eclipse, The (2010)&#39;, &#39;Twilight Saga: New Moon, The (2009)&#39;, &#39;Twilight Samurai, The (Tasogare Seibei) (2002)&#39;, &#39;Twilight Zone: The Movie (1983)&#39;, &#39;Twin Dragons (Shuang long hui) (1992)&#39;, &#39;Twin Falls Idaho (1999)&#39;, &#39;Twin Peaks: Fire Walk with Me (1992)&#39;, &#39;Twins (1988)&#39;, &#39;Twinsters (2015)&#39;, &#39;Twisted (2004)&#39;, &#39;Twister (1990)&#39;, &#39;Twister (1996)&#39;, &#39;Two Brothers (Deux frères) (2004)&#39;, &#39;Two Can Play That Game (2001)&#39;, &#39;Two Days, One Night (Deux jours, une nuit) (2014)&#39;, &#39;Two Escobars, The (2010)&#39;, &#39;Two Family House (2000)&#39;, &#39;Two Girls and a Guy (1997)&#39;, &#39;Two Jakes, The (1990)&#39;, &#39;Two Moon Junction (1988)&#39;, &#39;Two Much (1995)&#39;, &#39;Two Mules for Sister Sara (1970)&#39;, &#39;Two Night Stand (2014)&#39;, &#39;Two Weeks Notice (2002)&#39;, &#39;Two Women (Ciociara, La) (1960)&#39;, &#39;Two for the Money (2005)&#39;, &#39;Two if by Sea (1996)&#39;, &#34;Tyler Perry&#39;s Daddy&#39;s Little Girls (2007)&#34;, &#34;Tyler Perry&#39;s Diary of a Mad Black Woman (2005)&#34;, &#34;Tyler Perry&#39;s I Can Do Bad All by Myself (2009)&#34;, &#39;Tyrannosaur (2011)&#39;, &#39;U Turn (1997)&#39;, &#39;U-571 (2000)&#39;, &#39;U.S. Marshals (1998)&#39;, &#39;U.S. vs. John Lennon, The (2006)&#39;, &#39;U2: Rattle and Hum (1988)&#39;, &#39;UHF (1989)&#39;, &#39;Ugetsu (Ugetsu monogatari) (1953)&#39;, &#39;Ugly Duckling and Me!, The (2006)&#39;, &#39;Ugly Truth, The (2009)&#39;, &#39;Ugly, The (1997)&#39;, &#34;Ulee&#39;s Gold (1997)&#34;, &#39;Ultimate Avengers (2006)&#39;, &#39;Ultimate Avengers 2 (2006)&#39;, &#39;Ultraviolet (2006)&#39;, &#39;Umberto D. (1952)&#39;, &#39;Umbrellas of Cherbourg, The (Parapluies de Cherbourg, Les) (1964)&#39;, &#39;UnHung Hero (2013)&#39;, &#39;Unbearable Lightness of Being, The (1988)&#39;, &#39;Unbelievable Adventures of Italians in Russia (1974)&#39;, &#39;Unbreakable (2000)&#39;, &#39;Unbroken (2014)&#39;, &#39;Uncle Buck (1989)&#39;, &#39;Uncle Nino (2003)&#39;, &#39;Uncommon Valor (1983)&#39;, &#39;Undead (2003)&#39;, &#39;Under Siege (1992)&#39;, &#39;Under Siege 2: Dark Territory (1995)&#39;, &#39;Under Suspicion (2000)&#39;, &#39;Under the Rainbow (1981)&#39;, &#39;Under the Sand (2000)&#39;, &#39;Under the Skin (2013)&#39;, &#39;Under the Tuscan Sun (2003)&#39;, &#39;Undercover Blues (1993)&#39;, &#39;Undercover Brother (2002)&#39;, &#39;Undercurrent (1946)&#39;, &#39;Underground (1995)&#39;, &#39;Underneath (1995)&#39;, &#39;Undertaking Betty (Plots with a View) (2002)&#39;, &#39;Undertow (2004)&#39;, &#39;Underworld (1996)&#39;, &#39;Underworld (2003)&#39;, &#39;Underworld: Awakening (2012)&#39;, &#39;Underworld: Blood Wars (2016)&#39;, &#39;Underworld: Evolution (2006)&#39;, &#39;Underworld: Rise of the Lycans (2009)&#39;, &#39;Undisputed (2002)&#39;, &#39;Undisputed II: Last Man Standing (2006)&#39;, &#39;Undisputed III: Redemption (2010)&#39;, &#39;Unedited Footage of a Bear (2014)&#39;, &#39;Unfaithful (2002)&#39;, &#39;Unfaithfully Yours (1948)&#39;, &#39;Unfinished Business (2015)&#39;, &#39;Unfinished Life, An (2005)&#39;, &#39;Unforgettable (1996)&#39;, &#39;Unforgettable Summer, An (Un été inoubliable) (1994)&#39;, &#39;Unforgiven (1992)&#39;, &#39;Unforgiven (2013)&#39;, &#39;Unforgiven, The (1960)&#39;, &#39;Unicorn City (2012)&#39;, &#39;Unintentional Kidnapping of Mrs. Elfriede Ott, The (Die Unabsichtliche Entführung der Frau Elfriede Ott) (2010)&#39;, &#39;Uninvited, The (2009)&#39;, &#39;Union: The Business Behind Getting High, The (2007)&#39;, &#39;United 93 (2006)&#39;, &#39;United States of Leland, The (2003)&#39;, &#39;Universal Soldier (1992)&#39;, &#39;Universal Soldier: Day of Reckoning (2012)&#39;, &#39;Universal Soldier: The Return (1999)&#39;, &#39;Unknown (2006)&#39;, &#39;Unknown (2011)&#39;, &#39;Unknown Known, The (2013)&#39;, &#39;Unknown White Male (2005)&#39;, &#39;Unlawful Entry (1992)&#39;, &#39;Unleashed (Danny the Dog) (2005)&#39;, &#39;Unprecedented: The 2000 Presidential Election (2002)&#39;, &#39;Unreasonable Man, An (2006)&#39;, &#39;Unsinkable Molly Brown, The (1964)&#39;, &#39;Unstoppable (2010)&#39;, &#39;Unstrung Heroes (1995)&#39;, &#39;Untamed Heart (1993)&#39;, &#39;Unthinkable (2010)&#39;, &#39;Until the End of the World (Bis ans Ende der Welt) (1991)&#39;, &#39;Untitled Spider-Man Reboot (2017)&#39;, &#39;Untouchables, The (1987)&#39;, &#39;Untraceable (2008)&#39;, &#39;Unvanquished, The (Aparajito) (1957)&#39;, &#39;Unzipped (1995)&#39;, &#39;Up (2009)&#39;, &#39;Up Close and Personal (1996)&#39;, &#39;Up at the Villa (2000)&#39;, &#39;Up in the Air (2009)&#39;, &#39;Upside Down (2012)&#39;, &#39;Upside Down: The Creation Records Story (2010)&#39;, &#39;Upside of Anger, The (2005)&#39;, &#39;Upstream Color (2013)&#39;, &#39;Uptown Girls (2003)&#39;, &#39;Urban Cowboy (1980)&#39;, &#39;Urban Legend (1998)&#39;, &#39;Urban Legends: Final Cut (2000)&#39;, &#39;Used People (1992)&#39;, &#39;Usual Suspects, The (1995)&#39;, &#39;V for Vendetta (2006)&#39;, &#39;V. I. Warshawski (1991)&#39;, &#39;V/H/S (2012)&#39;, &#39;V/H/S/2 (2013)&#39;, &#39;Vacancy (2007)&#39;, &#39;Vacation (2015)&#39;, &#39;Vacations in Prostokvashino (1980)&#39;, &#39;Vagabond (Sans toit ni loi) (1985)&#39;, &#39;Valentine (2001)&#39;, &#34;Valentine&#39;s Day (2010)&#34;, &#39;Valerian and the City of a Thousand Planets (2017)&#39;, &#39;Valet, The (La doublure) (2006)&#39;, &#39;Valhalla Rising (2009)&#39;, &#39;Valiant (2005)&#39;, &#39;Valkyrie (2008)&#39;, &#39;Valley Girl (1983)&#39;, &#39;Valmont (1989)&#39;, &#39;Vampire Hunter D (1985)&#39;, &#39;Vampire Hunter D: Bloodlust (Banpaia hantâ D) (2000)&#39;, &#39;Vampire in Brooklyn (1995)&#39;, &#39;Vampire in Venice (Nosferatu a Venezia) (Nosferatu in Venice) (1986)&#39;, &#39;Vampires (1998)&#39;, &#39;Vamps (2012)&#39;, &#39;Van Helsing (2004)&#39;, &#39;Vanilla Sky (2001)&#39;, &#39;Vanishing, The (1993)&#39;, &#39;Vanishing, The (Spoorloos) (1988)&#39;, &#39;Vanity Fair (2004)&#39;, &#39;Vantage Point (2008)&#39;, &#39;Vanya on 42nd Street (1994)&#39;, &#39;Varsity Blues (1999)&#39;, &#39;Vatel (2000)&#39;, &#34;Vegas Vacation (National Lampoon&#39;s Las Vegas Vacation) (1997)&#34;, &#39;Velvet Goldmine (1998)&#39;, &#39;Venom (1982)&#39;, &#39;Venus (2006)&#39;, &#39;Venus in Fur (La Vénus à la fourrure) (2013)&#39;, &#39;Vera Drake (2004)&#39;, &#39;Verdict, The (1982)&#39;, &#39;Veronica Guerin (2003)&#39;, &#39;Veronica Mars (2014)&#39;, &#39;Versus (2000)&#39;, &#39;Vertical Limit (2000)&#39;, &#39;Vertigo (1958)&#39;, &#39;Very Bad Things (1998)&#39;, &#39;Very Brady Sequel, A (1996)&#39;, &#39;Very Harold &amp; Kumar 3D Christmas, A (2011)&#39;, &#39;Very Long Engagement, A (Un long dimanche de fiançailles) (2004)&#39;, &#39;Very Potter Musical, A (2009)&#39;, &#39;Very Potter Sequel, A (2010)&#39;, &#39;Vibes (1988)&#39;, &#39;Vice (2015)&#39;, &#39;Vicky Cristina Barcelona (2008)&#39;, &#39;Victor Frankenstein (2015)&#39;, &#39;Victor/Victoria (1982)&#39;, &#39;Victoria (2015)&#39;, &#39;Victory (a.k.a. Escape to Victory) (1981)&#39;, &#39;Videodrome (1983)&#39;, &#39;Vie en Rose, La (Môme, La) (2007)&#39;, &#39;View from the Top (2003)&#39;, &#39;View to a Kill, A (1985)&#39;, &#39;Vigilante Diaries (2016)&#39;, &#39;Village of the Damned (1960)&#39;, &#39;Village of the Damned (1995)&#39;, &#39;Village, The (2004)&#39;, &#39;Villain (1971)&#39;, &#39;Vincent Wants to Sea (Vincent will meer) (2010)&#39;, &#39;Violet &amp; Daisy (2011)&#39;, &#39;Violets Are Blue... (1986)&#39;, &#39;Vir Das: Abroad Understanding (2017)&#39;, &#39;Virgin Spring, The (Jungfrukällan) (1960)&#39;, &#39;Virgin Suicides, The (1999)&#39;, &#39;Viridiana (1961)&#39;, &#39;Virtuosity (1995)&#39;, &#39;Virunga (2014)&#39;, &#39;Virus (1999)&#39;, &#39;Visions of Light: The Art of Cinematography (1992)&#39;, &#39;Visit, The (2000)&#39;, &#39;Visit, The (2015)&#39;, &#39;Visitor Q (Bizita Q) (2001)&#39;, &#39;Visitor, The (2007)&#39;, &#39;Visitors, The (Visiteurs, Les) (1993)&#39;, &#39;Vitelloni, I (a.k.a. The Young and the Passionate) (1953)&#39;, &#39;Voices from the List (2004)&#39;, &#39;Voices of a Distant Star (Hoshi no koe) (2003)&#39;, &#39;Volcano (1997)&#39;, &#39;Volcano High (Whasango) (2001)&#39;, &#39;Volga - Volga (1938)&#39;, &#39;Volunteers (1985)&#39;, &#39;Volver (2006)&#39;, &#34;Von Ryan&#39;s Express (1965)&#34;, &#39;Vovka in the Kingdom of Far Far Away (1965)&#39;, &#39;Vow, The (2012)&#39;, &#39;Voyage to the Bottom of the Sea (1961)&#39;, &#39;W. (2008)&#39;, &#39;WALL·E (2008)&#39;, &#39;Wackness, The (2008)&#39;, &#39;Waco: The Rules of Engagement (1997)&#39;, &#39;Wadjda (2012)&#39;, &#39;Wag the Dog (1997)&#39;, &#39;Wages of Fear, The (Salaire de la peur, Le) (1953)&#39;, &#39;Wagons East (1994)&#39;, &#39;Wait Until Dark (1967)&#39;, &#34;Waiting for &#39;Superman&#39; (2010)&#34;, &#39;Waiting for Guffman (1996)&#39;, &#39;Waiting to Exhale (1995)&#39;, &#39;Waiting... (2005)&#39;, &#39;Waitress (2007)&#39;, &#39;Wake Up, Ron Burgundy (2004)&#39;, &#39;Waking Life (2001)&#39;, &#39;Waking Ned Devine (a.k.a. Waking Ned) (1998)&#39;, &#39;Wal-Mart: The High Cost of Low Price (2005)&#39;, &#39;Walk Among the Tombstones, A (2014)&#39;, &#39;Walk Hard: The Dewey Cox Story (2007)&#39;, &#39;Walk in the Clouds, A (1995)&#39;, &#39;Walk of Shame (2014)&#39;, &#39;Walk on the Moon, A (1999)&#39;, &#39;Walk the Line (2005)&#39;, &#39;Walk to Remember, A (2002)&#39;, &#34;Walk, Don&#39;t Run (1966)&#34;, &#39;Walkabout (1971)&#39;, &#39;Walker (1987)&#39;, &#39;Walker, The (2007)&#39;, &#39;Walking Dead, The (1995)&#39;, &#39;Walking Tall (2004)&#39;, &#39;Walking and Talking (1996)&#39;, &#39;Walking with Monsters (2005)&#39;, &#39;Wall Street (1987)&#39;, &#39;Wall Street: Money Never Sleeps (2010)&#39;, &#39;Wallace &amp; Gromit in The Curse of the Were-Rabbit (2005)&#39;, &#39;Wallace &amp; Gromit: A Close Shave (1995)&#39;, &#39;Wallace &amp; Gromit: The Best of Aardman Animation (1996)&#39;, &#39;Wallace &amp; Gromit: The Wrong Trousers (1993)&#39;, &#34;Wallace and Gromit in &#39;A Matter of Loaf and Death&#39; (2008)&#34;, &#39;Walled In (2009)&#39;, &#39;Waltz with Bashir (Vals im Bashir) (2008)&#39;, &#39;Wanderlust (2012)&#39;, &#39;Wanted (2008)&#39;, &#39;War Dance (2007)&#39;, &#39;War Dogs (2016)&#39;, &#39;War Horse (2011)&#39;, &#39;War Machine (2017)&#39;, &#39;War Room (2015)&#39;, &#39;War Room, The (1993)&#39;, &#39;War Zone, The (1999)&#39;, &#39;War and Peace (1956)&#39;, &#39;War and Peace (2016)&#39;, &#39;War for the Planet of the Apes (2017)&#39;, &#39;War of the Roses, The (1989)&#39;, &#39;War of the Worlds (2005)&#39;, &#39;War of the Worlds, The (1953)&#39;, &#39;War, The (1994)&#39;, &#39;WarGames (1983)&#39;, &#39;Warcraft (2016)&#39;, &#39;Ward 13 (2003)&#39;, &#39;Warm Bodies (2013)&#39;, &#39;Warrior (2011)&#39;, &#34;Warrior&#39;s Way, The (2010)&#34;, &#39;Warriors of Heaven and Earth (Tian di ying xiong) (2003)&#39;, &#39;Warriors, The (1979)&#39;, &#39;Wasabi (2001)&#39;, &#39;Washington Square (1997)&#39;, &#39;Wasp Woman, The (1959)&#39;, &#39;Watch Out for the Automobile (Beregis avtomobilya) (1966)&#39;, &#39;Watch on the Rhine (1943)&#39;, &#39;Watch, The (2012)&#39;, &#39;Watcher in the Woods, The (1980)&#39;, &#39;Watcher, The (2000)&#39;, &#39;Watching the Detectives (2007)&#39;, &#39;Watchmen (2009)&#39;, &#39;Watchmen: Tales of the Black Freighter (2009)&#39;, &#39;Water (2005)&#39;, &#39;Water Horse: Legend of the Deep, The (2007)&#39;, &#39;Water for Elephants (2011)&#39;, &#39;Waterboy, The (1998)&#39;, &#39;Waterdance, The (1992)&#39;, &#39;Watermark (2014)&#39;, &#39;Watership Down (1978)&#39;, &#39;Waterworld (1995)&#39;, &#39;Wave, The (Welle, Die) (2008)&#39;, &#39;Way Back, The (2010)&#39;, &#39;Way South, The (De weg naar het zuiden) (1981)&#39;, &#39;Way We Were, The (1973)&#39;, &#39;Way of the Dragon, The (a.k.a. Return of the Dragon) (Meng long guo jiang) (1972)&#39;, &#39;Way of the Gun, The (2000)&#39;, &#39;Way, Way Back, The (2013)&#39;, &#39;Waydowntown (2000)&#39;, &#34;Wayne&#39;s World (1992)&#34;, &#34;Wayne&#39;s World 2 (1993)&#34;, &#39;We Are Marshall (2006)&#39;, &#39;We Are What We Are (2013)&#39;, &#39;We Bought a Zoo (2011)&#39;, &#39;We Could Be King (2014)&#39;, &#34;We Don&#39;t Live Here Anymore (2004)&#34;, &#39;We Need to Talk About Kevin (2011)&#39;, &#39;We Own the Night (2007)&#39;, &#39;We Were Soldiers (2002)&#39;, &#34;We&#39;re Back! A Dinosaur&#39;s Story (1993)&#34;, &#34;We&#39;re No Angels (1955)&#34;, &#34;We&#39;re No Angels (1989)&#34;, &#34;We&#39;re the Millers (2013)&#34;, &#39;Weather Man, The (2005)&#39;, &#39;Weather Underground, The (2002)&#39;, &#39;Webmaster (1998)&#39;, &#39;Wedding Banquet, The (Xi yan) (1993)&#39;, &#39;Wedding Crashers (2005)&#39;, &#39;Wedding Date, The (2005)&#39;, &#39;Wedding Planner, The (2001)&#39;, &#39;Wedding Singer, The (1998)&#39;, &#39;Weekend (a.k.a. Le Week-end) (Week End) (1967)&#39;, &#34;Weekend at Bernie&#39;s (1989)&#34;, &#34;Weekend at Bernie&#39;s II (1993)&#34;, &#39;Weird Science (1985)&#39;, &#39;Weirdsville (2007)&#39;, &#39;Welcome to Collinwood (2002)&#39;, &#39;Welcome to Dongmakgol (2005)&#39;, &#39;Welcome to Happiness (2015)&#39;, &#39;Welcome to Me (2014)&#39;, &#39;Welcome to Mooseport (2004)&#39;, &#39;Welcome to Sarajevo (1997)&#39;, &#39;Welcome to Woop-Woop (1997)&#39;, &#39;Welcome to the Dollhouse (1995)&#39;, &#39;Welcome to the Jungle (2013)&#39;, &#34;Welcome to the Sticks (Bienvenue chez les Ch&#39;tis) (2008)&#34;, &#39;Wendigo (2001)&#39;, &#39;Were the World Mine (2008)&#39;, &#34;Wes Craven&#39;s New Nightmare (Nightmare on Elm Street Part 7: Freddy&#39;s Finale, A) (1994)&#34;, &#39;West Beirut (West Beyrouth) (1998)&#39;, &#39;West Side Story (1961)&#39;, &#39;Westworld (1973)&#39;, &#39;Wet Hot American Summer (2001)&#39;, &#39;Whale Rider (2002)&#39;, &#39;What About Bob? (1991)&#39;, &#39;What Dreams May Come (1998)&#39;, &#39;What Ever Happened to Baby Jane? (1962)&#39;, &#39;What Happened Was... (1994)&#39;, &#39;What Happened, Miss Simone? (2015)&#39;, &#39;What Happens in Vegas... (2008)&#39;, &#39;What Have I Done to Deserve This? (¿Qué he hecho yo para merecer esto!!) (1984)&#39;, &#39;What If (2013)&#39;, &#39;What Lies Beneath (2000)&#39;, &#39;What Love Is (2007)&#39;, &#39;What Men Still Talk About (2011)&#39;, &#39;What Men Talk About (2010)&#39;, &#39;What Planet Are You From? (2000)&#39;, &#39;What Time Is It There? (Ni neibian jidian) (2001)&#39;, &#39;What We Do in the Shadows (2014)&#39;, &#39;What Women Want (2000)&#39;, &#39;What a Girl Wants (2003)&#39;, &#39;What the #$*! Do We Know!? (a.k.a. What the Bleep Do We Know!?) (2004)&#39;, &#34;What to Expect When You&#39;re Expecting (2012)&#34;, &#34;What&#39;s Eating Gilbert Grape (1993)&#34;, &#34;What&#39;s Love Got to Do with It? (1993)&#34;, &#34;What&#39;s New, Pussycat (1965)&#34;, &#34;What&#39;s Up, Doc? (1972)&#34;, &#34;What&#39;s Up, Tiger Lily? (1966)&#34;, &#34;What&#39;s Your Number? (2011)&#34;, &#39;Whatever (1998)&#39;, &#39;Whatever It Takes (2000)&#39;, &#39;Whatever Works (2009)&#39;, &#39;Wheels on Meals (Kuai can che) (1984)&#39;, &#39;When Harry Met Sally... (1989)&#39;, &#39;When Night Is Falling (1995)&#39;, &#39;When We First Met (2018)&#39;, &#39;When We Were Kings (1996)&#39;, &#39;When Worlds Collide (1951)&#39;, &#34;When You&#39;re Strange (2009)&#34;, &#39;When a Man Loves a Woman (1994)&#39;, &#39;When a Stranger Calls (1979)&#39;, &#39;When a Stranger Calls (2006)&#39;, &#39;When a Woman Ascends the Stairs (Onna ga kaidan wo agaru toki) (1960)&#39;, &#39;When in Rome (2010)&#39;, &#34;When the Cat&#39;s Away (Chacun cherche son chat) (1996)&#34;, &#39;When the Levees Broke: A Requiem in Four Acts (2006)&#39;, &#39;Where Eagles Dare (1968)&#39;, &#39;Where the Buffalo Roam (1980)&#39;, &#39;Where the Day Takes You (1992)&#39;, &#39;Where the Heart Is (2000)&#39;, &#39;Where the Money Is (2000)&#39;, &#39;Where the Wild Things Are (2009)&#39;, &#34;Where&#39;s Marlowe? (1998)&#34;, &#34;While We&#39;re Young (2014)&#34;, &#39;While You Were Fighting: A Thor Mockumentary (2016)&#39;, &#39;While You Were Sleeping (1995)&#39;, &#39;While the City Sleeps (1956)&#39;, &#39;Whip It (2009)&#39;, &#39;Whiplash (2013)&#39;, &#39;Whiplash (2014)&#39;, &#39;Whipped (2000)&#39;, &#39;Whiskey Tango Foxtrot (2016)&#39;, &#39;Whisper of the Heart (Mimi wo sumaseba) (1995)&#39;, &#39;Whistleblower, The (2010)&#39;, &#39;White Balloon, The (Badkonake sefid) (1995)&#39;, &#39;White Chicks (2004)&#39;, &#39;White Christmas (1954)&#39;, &#39;White Dog (1982)&#39;, &#39;White Fang (1991)&#39;, &#39;White Frog (2012)&#39;, &#39;White Heat (1949)&#39;, &#39;White House Down (2013)&#39;, &#39;White Hunter, Black Heart (1990)&#39;, &#34;White Man&#39;s Burden (1995)&#34;, &#34;White Men Can&#39;t Jump (1992)&#34;, &#39;White Nights (1985)&#39;, &#39;White Noise (2005)&#39;, &#39;White Oleander (2002)&#39;, &#39;White Ribbon, The (Das weiße Band) (2009)&#39;, &#39;White Sands (1992)&#39;, &#39;White Squall (1996)&#39;, &#39;White Sun of the Desert, The (Beloe solntse pustyni) (1970)&#39;, &#39;White Water Summer (1987)&#39;, &#39;Who Am I (Kein System Ist Sicher) (2014)&#39;, &#39;Who Am I? (Wo shi shei) (1998)&#39;, &#39;Who Framed Roger Rabbit? (1988)&#39;, &#39;Who Is Cletis Tout? (2001)&#39;, &#39;Who Killed Chea Vichea? (2010)&#39;, &#39;Who Killed the Electric Car? (2006)&#39;, &#34;Who&#39;ll Stop the Rain (1978)&#34;, &#34;Who&#39;s Afraid of Virginia Woolf? (1966)&#34;, &#34;Who&#39;s Harry Crumb? (1989)&#34;, &#34;Who&#39;s That Girl? (1987)&#34;, &#34;Who&#39;s That Knocking at My Door? (1967)&#34;, &#39;Whole Nine Yards, The (2000)&#39;, &#39;Whole Ten Yards, The (2004)&#39;, &#39;Whole Wide World, The (1996)&#39;, &#39;Why Do Fools Fall In Love? (1998)&#39;, &#34;Why Don&#39;t You Play In Hell? (Jigoku de naze warui) (2013)&#34;, &#39;Why Him? (2016)&#39;, &#39;Why Man Creates (1968)&#39;, &#39;Why Stop Now (2012)&#39;, &#39;Why We Fight (2005)&#39;, &#39;Wicked Blood (2014)&#39;, &#39;Wicked City (Yôjû toshi) (1987)&#39;, &#39;Wicker Man, The (1973)&#39;, &#39;Wicker Man, The (2006)&#39;, &#39;Wicker Park (2004)&#39;, &#39;Wide Awake (1998)&#39;, &#39;Widow of St. Pierre, The (Veuve de Saint-Pierre, La) (2000)&#39;, &#34;Widows&#39; Peak (1994)&#34;, &#39;Wiener-Dog (2016)&#39;, &#39;Wilbur Wants to Kill Himself (2002)&#39;, &#39;Wild (2014)&#39;, &#39;Wild America (1997)&#39;, &#39;Wild Bill (1995)&#39;, &#39;Wild Bunch, The (1969)&#39;, &#39;Wild Card (2015)&#39;, &#39;Wild Child (2008)&#39;, &#39;Wild China (2008)&#39;, &#39;Wild Hogs (2007)&#39;, &#39;Wild Horses (2015)&#39;, &#39;Wild Oats (2016)&#39;, &#39;Wild Orchid (1990)&#39;, &#39;Wild Parrots of Telegraph Hill, The (2003)&#39;, &#39;Wild Reeds (Les roseaux sauvages) (1994)&#39;, &#39;Wild Strawberries (Smultronstället) (1957)&#39;, &#39;Wild Tales (2014)&#39;, &#39;Wild Things (1998)&#39;, &#39;Wild Wild West (1999)&#39;, &#39;Wild at Heart (1990)&#39;, &#39;Wild, The (2006)&#39;, &#39;Wildcats (1986)&#39;, &#39;Willard (2003)&#39;, &#34;William Shakespeare&#39;s A Midsummer Night&#39;s Dream (1999)&#34;, &#34;William Shakespeare&#39;s Romeo + Juliet (1996)&#34;, &#39;Willow (1988)&#39;, &#39;Willy Wonka &amp; the Chocolate Factory (1971)&#39;, &#39;Willy/Milly (1986)&#39;, &#39;Wimbledon (2004)&#39;, &#39;Win It All (2017)&#39;, &#39;Win Win (2011)&#39;, &#39;Win a Date with Tad Hamilton! (2004)&#39;, &#34;Winchester &#39;73 (1950)&#34;, &#39;Wind Rises, The (Kaze tachinu) (2013)&#39;, &#39;Wind River (2017)&#39;, &#39;Wind That Shakes the Barley, The (2006)&#39;, &#39;Wind Will Carry Us, The (Bad ma ra khahad bord) (1999)&#39;, &#39;Wind and the Lion, The (1975)&#39;, &#39;Winds of the Wasteland (1936)&#39;, &#39;Windtalkers (2002)&#39;, &#39;Wing Commander (1999)&#39;, &#39;Winged Migration (Peuple migrateur, Le) (2001)&#39;, &#39;Wings of Desire (Himmel über Berlin, Der) (1987)&#39;, &#39;Wings of Honneamise (Ôritsu uchûgun Oneamisu no tsubasa) (1987)&#39;, &#39;Wings of the Dove, The (1997)&#39;, &#39;Wings, Legs and Tails (1986)&#39;, &#39;Winners and Sinners (Qi mou miao ji: Wu fu xing) (1983)&#39;, &#39;Winnie Pooh (1969)&#39;, &#39;Winnie the Pooh (2011)&#39;, &#39;Winnie the Pooh Goes Visiting (1971)&#39;, &#39;Winnie the Pooh and Tigger Too (1974)&#39;, &#39;Winnie the Pooh and the Blustery Day (1968)&#39;, &#39;Winnie the Pooh and the Day of Concern (1972)&#39;, &#39;Winnie the Pooh and the Honey Tree (1966)&#39;, &#39;Winslow Boy, The (1999)&#39;, &#39;Winter Light (Nattvardsgästerna) (1963)&#39;, &#39;Winter Passing (2005)&#39;, &#39;Winter in Prostokvashino (1984)&#39;, &#34;Winter&#39;s Bone (2010)&#34;, &#34;Winter&#39;s Tale (2014)&#34;, &#39;Wisdom (1986)&#39;, &#39;Wishmaster (1997)&#39;, &#39;Wit (2001)&#39;, &#39;Witch Hunt (1999)&#39;, &#39;Witches of Eastwick, The (1987)&#39;, &#39;Witches, The (1990)&#39;, &#39;Witchfinder General (Conquerer Worm, The) (1968)&#39;, &#39;With Great Power: The Stan Lee Story (2012)&#39;, &#39;With Honors (1994)&#39;, &#39;With Six You Get Eggroll (1968)&#39;, &#39;With a Friend Like Harry... (Harry, un ami qui vous veut du bien) (2000)&#39;, &#39;Withnail &amp; I (1987)&#39;, &#39;Without Warning (a.k.a. Alien Warning) (a.k.a. It Came Without Warning) (1980)&#39;, &#39;Without a Clue (1988)&#39;, &#39;Without a Paddle (2004)&#39;, &#39;Witness (1985)&#39;, &#39;Witness for the Prosecution (1957)&#39;, &#39;Wiz, The (1978)&#39;, &#39;Wizard of Oz, The (1939)&#39;, &#39;Wizard, The (1989)&#39;, &#39;Wizards (1977)&#39;, &#39;Wizards of Waverly Place: The Movie (2009)&#39;, &#39;Wizards of the Lost Kingdom II (1989)&#39;, &#39;Wolf (1994)&#39;, &#39;Wolf Children (Okami kodomo no ame to yuki) (2012)&#39;, &#39;Wolf Creek (2005)&#39;, &#39;Wolf Man, The (1941)&#39;, &#39;Wolf and Calf (1984)&#39;, &#39;Wolf of Wall Street, The (2013)&#39;, &#39;Wolfman, The (2010)&#39;, &#39;Wolverine, The (2013)&#39;, &#39;Woman Is a Woman, A (femme est une femme, Une) (1961)&#39;, &#34;Woman Next Door, The (Femme d&#39;à côté, La) (1981)&#34;, &#39;Woman Under the Influence, A (1974)&#39;, &#39;Woman in Black, The (2012)&#39;, &#39;Woman in Gold (2015)&#39;, &#39;Woman in Love (Rubbeldiekatz) (2011)&#39;, &#39;Woman in Red, The (1984)&#39;, &#39;Woman in the Dunes (Suna no onna) (1964)&#39;, &#39;Woman of Paris, A (1923)&#39;, &#39;Woman of the Year (1942)&#39;, &#39;Woman on Top (2000)&#39;, &#39;Woman, The (2011)&#39;, &#39;Women in Trouble (2009)&#39;, &#39;Women on the 6th Floor, The (Les Femmes du 6ème Étage) (2010)&#39;, &#39;Women on the Verge of a Nervous Breakdown (Mujeres al borde de un ataque de nervios) (1988)&#39;, &#39;Women, The (1939)&#39;, &#34;Won&#39;t You Be My Neighbor? (2018)&#34;, &#39;Wonder (2017)&#39;, &#39;Wonder Boys (2000)&#39;, &#39;Wonder Wheel (2017)&#39;, &#39;Wonder Woman (2009)&#39;, &#39;Wonder Woman (2017)&#39;, &#39;Wonderful, Horrible Life of Leni Riefenstahl, The (Macht der Bilder: Leni Riefenstahl, Die) (1993)&#39;, &#39;Wonderland (1999)&#39;, &#39;Wonderland (2003)&#39;, &#39;Woods, The (2006)&#39;, &#39;Woodsman, The (2004)&#39;, &#39;Wordplay (2006)&#39;, &#39;Words, The (2012)&#39;, &#39;Working Girl (1988)&#39;, &#39;World According to Garp, The (1982)&#39;, &#39;World Is Not Enough, The (1999)&#39;, &#39;World Trade Center (2006)&#39;, &#39;World Traveler (2001)&#39;, &#39;World War Z (2013)&#39;, &#39;World of Apu, The (Apur Sansar) (1959)&#39;, &#39;World of Glory (1991)&#39;, &#39;World of Henry Orient, The (1964)&#39;, &#39;World of Tomorrow (2015)&#39;, &#39;World on a Wire (Welt am Draht) (1973)&#39;, &#34;World&#39;s End, The (2013)&#34;, &#34;World&#39;s Fastest Indian, The (2005)&#34;, &#34;World&#39;s Greatest Dad (2009)&#34;, &#39;Wow! A Talking Fish! (1983)&#39;, &#39;Woyzeck (1979)&#39;, &#39;Wraith, The (1986)&#39;, &#39;Wrath of the Titans (2012)&#39;, &#39;Wreck-It Ralph (2012)&#39;, &#39;Wrestler, The (2008)&#39;, &#39;Wrinkles (Arrugas) (2011)&#39;, &#39;Wristcutters: A Love Story (2006)&#39;, &#39;Written on the Wind (1956)&#39;, &#39;Wrong (2012)&#39;, &#39;Wrong Arm of the Law, The (1963)&#39;, &#39;Wrong Cops (2013)&#39;, &#39;Wrong Man, The (1956)&#39;, &#39;Wrong Turn (2003)&#39;, &#39;Wrong Turn 2: Dead End (2007)&#39;, &#39;Wrongfully Accused (1998)&#39;, &#39;Wuthering Heights (1939)&#39;, &#39;Wuthering Heights (1992)&#39;, &#39;Wyatt Earp (1994)&#39;, &#39;Wyrmwood (2015)&#39;, &#39;X-Files: Fight the Future, The (1998)&#39;, &#39;X-Files: I Want to Believe, The (2008)&#39;, &#39;X-Men (2000)&#39;, &#39;X-Men Origins: Wolverine (2009)&#39;, &#39;X-Men: Apocalypse (2016)&#39;, &#39;X-Men: Days of Future Past (2014)&#39;, &#39;X-Men: First Class (2011)&#39;, &#39;X-Men: The Last Stand (2006)&#39;, &#39;X2: X-Men United (2003)&#39;, &#39;Yankee Doodle Dandy (1942)&#39;, &#39;Yards, The (2000)&#39;, &#39;Year One (2009)&#39;, &#39;Year of Living Dangerously, The (1982)&#39;, &#39;Year of the Dragon (1985)&#39;, &#39;Year of the Horse (1997)&#39;, &#39;Yearling, The (1946)&#39;, &#39;Yellow Sea, The (a.k.a. The Murderer) (Hwanghae) (2010)&#39;, &#39;Yellow Submarine (1968)&#39;, &#39;Yentl (1983)&#39;, &#39;Yes Man (2008)&#39;, &#39;Yes Men Fix the World, The (2009)&#39;, &#39;Yes Men, The (2003)&#39;, &#39;Yesterday, Today and Tomorrow (Ieri, oggi, domani) (1963)&#39;, &#39;Yi Yi (2000)&#39;, &#39;Yogi Bear (2010)&#39;, &#39;Yojimbo (1961)&#39;, &#39;Yongary: Monster from the Deep (1967)&#39;, &#39;You Again (2010)&#39;, &#39;You Are the Apple of My Eye (2011)&#39;, &#39;You Can Count on Me (2000)&#39;, &#34;You Can&#39;t Take It with You (1938)&#34;, &#34;You Don&#39;t Mess with the Zohan (2008)&#34;, &#39;You Got Served (2004)&#39;, &#39;You Only Live Once (1937)&#39;, &#39;You Only Live Twice (1967)&#39;, &#39;You Will Meet a Tall Dark Stranger (2010)&#39;, &#34;You&#39;ll Never Get Rich (1941)&#34;, &#34;You&#39;re Next (2011)&#34;, &#34;You&#39;ve Got Mail (1998)&#34;, &#39;You, Me and Dupree (2006)&#39;, &#39;Young Adult (2011)&#39;, &#39;Young Doctors in Love (1982)&#39;, &#39;Young Einstein (1988)&#39;, &#39;Young Frankenstein (1974)&#39;, &#39;Young Guns (1988)&#39;, &#39;Young Guns II (1990)&#39;, &#39;Young People Fucking (a.k.a. YPF) (2007)&#39;, &#34;Young Poisoner&#39;s Handbook, The (1995)&#34;, &#39;Young Sherlock Holmes (1985)&#39;, &#39;Young Victoria, The (2009)&#39;, &#39;Young and the Damned, The (Olvidados, Los) (1950)&#39;, &#39;Youngblood (1986)&#39;, &#39;Your Friends and Neighbors (1998)&#39;, &#39;Your Highness (2011)&#39;, &#39;Your Name. (2016)&#39;, &#34;Your Sister&#39;s Sister (2011)&#34;, &#39;Yours, Mine and Ours (1968)&#39;, &#39;Yours, Mine and Ours (2005)&#39;, &#39;Youth (2015)&#39;, &#39;Youth Without Youth (2007)&#39;, &#39;Youth in Revolt (2009)&#39;, &#39;Youth of the Beast (Yaju no seishun) (1963)&#39;, &#39;Z (1969)&#39;, &#39;Zabriskie Point (1970)&#39;, &#39;Zack and Miri Make a Porno (2008)&#39;, &#39;Zapped! (1982)&#39;, &#39;Zathura (2005)&#39;, &#39;Zatoichi and the Chest of Gold (Zatôichi senryô-kubi) (Zatôichi 6) (1964)&#39;, &#39;Zazie dans le métro (1960)&#39;, &#39;Zebraman (2004)&#39;, &#39;Zed &amp; Two Noughts, A (1985)&#39;, &#39;Zeitgeist: Addendum (2008)&#39;, &#39;Zeitgeist: Moving Forward (2011)&#39;, &#39;Zeitgeist: The Movie (2007)&#39;, &#39;Zelary (2003)&#39;, &#39;Zelig (1983)&#39;, &#39;Zero Dark Thirty (2012)&#39;, &#39;Zero Effect (1998)&#39;, &#39;Zero Theorem, The (2013)&#39;, &#39;Zero de conduite (Zero for Conduct) (Zéro de conduite: Jeunes diables au collège) (1933)&#39;, &#39;Zeus and Roxanne (1997)&#39;, &#39;Zipper (2015)&#39;, &#39;Zodiac (2007)&#39;, &#39;Zombeavers (2014)&#39;, &#39;Zombie (a.k.a. Zombie 2: The Dead Are Among Us) (Zombi 2) (1979)&#39;, &#39;Zombie Strippers! (2008)&#39;, &#39;Zombieland (2009)&#39;, &#39;Zone 39 (1997)&#39;, &#39;Zone, The (La Zona) (2007)&#39;, &#39;Zookeeper (2011)&#39;, &#39;Zoolander (2001)&#39;, &#39;Zoolander 2 (2016)&#39;, &#39;Zoom (2006)&#39;, &#39;Zoom (2015)&#39;, &#39;Zootopia (2016)&#39;, &#39;Zulu (1964)&#39;, &#39;Zulu (2013)&#39;, &#39;[REC] (2007)&#39;, &#39;[REC]² (2009)&#39;, &#39;[REC]³ 3 Génesis (2012)&#39;, &#39;anohana: The Flower We Saw That Day - The Movie (2013)&#39;, &#39;eXistenZ (1999)&#39;, &#39;xXx (2002)&#39;, &#39;xXx: State of the Union (2005)&#39;, &#39;¡Three Amigos! (1986)&#39;, &#39;À nous la liberté (Freedom for Us) (1931)&#39;], &#39;user&#39;: [&#39;#na#&#39;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610]} . learn = collab_learner(dls, use_nn=True, y_range=(0, 5.5), layers=[500,100,50]) . learn.fit_one_cycle(5, 5e-3, wd=0.1) . epoch train_loss valid_loss time . 0 | 0.861059 | 0.839581 | 00:11 | . 1 | 0.786002 | 0.796963 | 00:11 | . 2 | 0.735779 | 0.752715 | 00:11 | . 3 | 0.650959 | 0.740933 | 00:11 | . 4 | 0.580737 | 0.764325 | 00:11 | . Hypertunning . Here we try other values for n_factors, wd and learning rate and choose on that makes our model better. . for factor in [5,10,20,30,50,60]: print(f&quot;results for n_factors = {str(factor)}&quot;) learn = collab_learner(dls, use_nn=True, n_factors=factor, y_range=(0, 5.5), layers=[500,100,50]) learn.fit_one_cycle(5,5e-3, wd=0.1) . results for n_factors = 5 . epoch train_loss valid_loss time . 0 | 0.898488 | 0.827543 | 00:12 | . 1 | 0.807282 | 0.775805 | 00:11 | . 2 | 0.693569 | 0.749380 | 00:12 | . 3 | 0.623205 | 0.744058 | 00:11 | . 4 | 0.576790 | 0.755174 | 00:11 | . results for n_factors = 10 . epoch train_loss valid_loss time . 0 | 0.842380 | 0.833212 | 00:11 | . 1 | 0.789476 | 0.768478 | 00:11 | . 2 | 0.722376 | 0.753802 | 00:11 | . 3 | 0.651820 | 0.751267 | 00:11 | . 4 | 0.599798 | 0.758017 | 00:11 | . results for n_factors = 20 . epoch train_loss valid_loss time . 0 | 0.832946 | 0.836147 | 00:11 | . 1 | 0.766608 | 0.781934 | 00:11 | . 2 | 0.742459 | 0.748139 | 00:11 | . 3 | 0.633957 | 0.740403 | 00:11 | . 4 | 0.600971 | 0.756658 | 00:11 | . results for n_factors = 30 . epoch train_loss valid_loss time . 0 | 0.864623 | 0.837379 | 00:11 | . 1 | 0.795658 | 0.773075 | 00:11 | . 2 | 0.693571 | 0.753067 | 00:11 | . 3 | 0.661187 | 0.737748 | 00:11 | . 4 | 0.590619 | 0.754026 | 00:11 | . results for n_factors = 50 . epoch train_loss valid_loss time . 0 | 0.866101 | 0.843842 | 00:12 | . 1 | 0.792138 | 0.768767 | 00:12 | . 2 | 0.737224 | 0.748546 | 00:11 | . 3 | 0.651633 | 0.741857 | 00:11 | . 4 | 0.569449 | 0.759625 | 00:11 | . results for n_factors = 60 . epoch train_loss valid_loss time . 0 | 0.888024 | 0.839453 | 00:11 | . 1 | 0.788394 | 0.786612 | 00:11 | . 2 | 0.717128 | 0.754573 | 00:12 | . 3 | 0.632593 | 0.748573 | 00:12 | . 4 | 0.562332 | 0.759055 | 00:11 | . learn = collab_learner(dls, use_nn=True, n_factors=30, y_range=(0, 5.5), layers=[500,100,50]) learn.fit_one_cycle(5,5e-3, wd=0.1) . epoch train_loss valid_loss time . 0 | 0.845815 | 0.840017 | 00:11 | . 1 | 0.776780 | 0.777268 | 00:11 | . 2 | 0.682875 | 0.751239 | 00:11 | . 3 | 0.640215 | 0.741647 | 00:11 | . 4 | 0.576825 | 0.761339 | 00:11 | . learn.lr_find() . SuggestedLRs(lr_min=6.309573450380412e-08, lr_steep=2.2908675418875646e-06) . for wd in [0.01, 0.1, 0.02, 0.2, 0.03]: print(f&quot;results for wd = {str(wd)}&quot;) learn = collab_learner(dls, use_nn=True, n_factors=30, y_range=(0, 5.5), layers=[500,100,50]) learn.fit_one_cycle(5,5e-3, wd=wd) . results for wd = 0.01 . epoch train_loss valid_loss time . 0 | 0.874564 | 0.842181 | 00:11 | . 1 | 0.760130 | 0.772972 | 00:11 | . 2 | 0.712535 | 0.750999 | 00:11 | . 3 | 0.592268 | 0.751171 | 00:11 | . 4 | 0.568071 | 0.764696 | 00:11 | . results for wd = 0.1 . epoch train_loss valid_loss time . 0 | 0.862166 | 0.840624 | 00:11 | . 1 | 0.781454 | 0.780294 | 00:11 | . 2 | 0.733976 | 0.750298 | 00:11 | . 3 | 0.670230 | 0.741583 | 00:11 | . 4 | 0.575112 | 0.759058 | 00:11 | . results for wd = 0.02 . epoch train_loss valid_loss time . 0 | 0.837795 | 0.848515 | 00:11 | . 1 | 0.772291 | 0.769385 | 00:11 | . 2 | 0.710278 | 0.748204 | 00:11 | . 3 | 0.600644 | 0.744953 | 00:11 | . 4 | 0.540216 | 0.764349 | 00:11 | . results for wd = 0.2 . epoch train_loss valid_loss time . 0 | 0.883102 | 0.857333 | 00:11 | . 1 | 0.808165 | 0.791507 | 00:11 | . 2 | 0.739043 | 0.764442 | 00:11 | . 3 | 0.692927 | 0.743834 | 00:11 | . 4 | 0.557309 | 0.757153 | 00:11 | . results for wd = 0.03 . epoch train_loss valid_loss time . 0 | 0.863333 | 0.871406 | 00:11 | . 1 | 0.758854 | 0.772884 | 00:11 | . 2 | 0.689706 | 0.749931 | 00:11 | . 3 | 0.631914 | 0.745440 | 00:11 | . 4 | 0.564855 | 0.760767 | 00:11 | . learn.recorder.plot_lr_find() . learn.recorder.plot_loss() . lr = 5e-3 wd = 0.1 learn.fit_one_cycle(5, lr, wd=wd) . epoch train_loss valid_loss time . 0 | 0.622156 | 0.780319 | 00:11 | . 1 | 0.718254 | 0.778601 | 00:11 | . 2 | 0.671352 | 0.759644 | 00:11 | . 3 | 0.600121 | 0.765581 | 00:11 | . 4 | 0.501994 | 0.783923 | 00:11 | . learn.model . EmbeddingNN( (embeds): ModuleList( (0): Embedding(611, 58) (1): Embedding(9720, 274) ) (emb_drop): Dropout(p=0.0, inplace=False) (bn_cont): BatchNorm1d(0, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (layers): Sequential( (0): LinBnDrop( (0): BatchNorm1d(332, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=332, out_features=500, bias=False) (2): ReLU(inplace=True) ) (1): LinBnDrop( (0): BatchNorm1d(500, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=500, out_features=100, bias=False) (2): ReLU(inplace=True) ) (2): LinBnDrop( (0): BatchNorm1d(100, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (1): Linear(in_features=100, out_features=50, bias=False) (2): ReLU(inplace=True) ) (3): LinBnDrop( (0): Linear(in_features=50, out_features=1, bias=True) ) (4): SigmoidRange(low=0, high=5.5) ) ) . preds,targs = learn.get_preds() print(f&quot;MAE: {mean_absolute_error(targs, preds)}&quot;) print(f&quot;RMSE: {mean_squared_error(targs, preds)}&quot;) . MAE: 0.6728594899177551 RMSE: 0.7839229106903076 . Model Bias and Intepretation . Here we evalute our model. We start by getting the best 25 popular movies and worse 25 movies. . movie_bias = learn.model.embeds[1].weight.squeeze() idxs = movie_bias.argsort(descending=True)[1][:25] [dls.classes[&#39;title&#39;][i] for i in idxs] . [&#39;40-Year-Old Virgin, The (2005)&#39;, &#39;9to5: Days in Porn (a.k.a. 9 to 5: Days in Porn) (2008)&#39;, &#39;101 Dalmatians (1996)&#39;, &#39;After the Fox (Caccia alla volpe) (1966)&#39;, &#39;Across the Hall (2009)&#39;, &#34;Adam&#39;s Rib (1949)&#34;, &#39;10 Cloverfield Lane (2016)&#39;, &#39;28 Days (2000)&#39;, &#39;Affair of Love, An (Liaison pornographique, Une) (1999)&#39;, &#39;Accidental Tourist, The (1988)&#39;, &#39;20 Dates (1998)&#39;, &#39;8 Seconds (1994)&#39;, &#39;1-900 (06) (1994)&#39;, &#39;3 dev adam (Three Giant Men) (1973) &#39;, &#39;12 Years a Slave (2013)&#39;, &#39;About a Boy (2002)&#39;, &#39;Against All Odds (1984)&#39;, &#39;A Man Called Blade (1977)&#39;, &#39;Adventures of Robin Hood, The (1938)&#39;, &#39;11:14 (2003)&#39;, &#39;Accidental Spy, The (Dak miu mai shing) (2001)&#39;, &#39;13th (2016)&#39;, &#39;A Wrinkle in Time (2018)&#39;, &#39;13th Warrior, The (1999)&#39;, &#39;13 Going on 30 (2004)&#39;] . movie_bias = learn.model.embeds[1].weight.squeeze() idxs = movie_bias.argsort()[1][:25] [dls.classes[&#39;title&#39;][i] for i in idxs] . [&#39;After Life (Wandafuru raifu) (1998)&#39;, &#39;50 First Dates (2004)&#39;, &#39;13 Assassins (Jûsan-nin no shikaku) (2010)&#39;, &#39;A.I. Artificial Intelligence (2001)&#39;, &#39;13 Sins (2014)&#39;, &#39;3 Ninjas Knuckle Up (1995)&#39;, &#39;39 Steps, The (1935)&#39;, &#39;10,000 BC (2008)&#39;, &#39;10 (1979)&#39;, &#39;A-Team, The (2010)&#39;, &#39;2012 (2009)&#39;, &#39;1408 (2007)&#39;, &#39;About Last Night... (1986)&#39;, &#39;Acid House, The (1998)&#39;, &#39;6th Day, The (2000)&#39;, &#39;102 Dalmatians (2000)&#39;, &#39;3-Iron (Bin-jip) (2004)&#39;, &#34;&#39;71 (2014)&#34;, &#39;Adanggaman (2000)&#39;, &#39;20,000 Leagues Under the Sea (1954)&#39;, &#39;Affair of the Necklace, The (2001)&#39;, &#39;30 Minutes or Less (2011)&#39;, &#39;8 ½ Women (a.k.a. 8 1/2 Women) (a.k.a. Eight and a Half Women) (1999)&#39;, &#39;7 Days in Hell (2015)&#39;, &#39;...And Justice for All (1979)&#39;] . Reference: . Collaborative filtering tutorial. (https://docs.fast.ai/tutorial.collab) | Collaborative filtering using fastai. (https://towardsda tascience.com/collaborative-filtering-using-fastai-a2ec5a2a4049) | Matrix Factorization with fast.ai - Collaborative filtering with Python 16 https://buomsoo-kim.github.io/recommender%20systems/2020/11/27/Recommender-systems-collab-filtering-16.md/ | .",
            "url": "https://emilearthur.github.io/fastblog/fastai/2021/01/11/Collaborative-Filtering-movielens-dataset.html",
            "relUrl": "/fastai/2021/01/11/Collaborative-Filtering-movielens-dataset.html",
            "date": " • Jan 11, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Computer Pointer Controller",
            "content": "About . Computer Pointer Controller App is an application used to control the movement of mouse using the gaze estimation model. . The gaze estimation model is used to estimate the gaze of the users’s eyes and it’s feed into the pyautogui module to change the mouse pointer position. . Project can be found https://github.com/emilearthur/computer_pointer_controller .",
            "url": "https://emilearthur.github.io/fastblog/edge/python/intel/2020/07/28/computer-point-controller.html",
            "relUrl": "/edge/python/intel/2020/07/28/computer-point-controller.html",
            "date": " • Jul 28, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "People Counter App",
            "content": "About . The people counter application will demonstrate how to create a smart video IoT solution using Intel® hardware and software tools. The app will detect people in a designated area, providing the number of people in the frame, average duration of people in frame, and total count. . Project can be found https://github.com/emilearthur/nd131-openvino-fundamentals-project-starter_ .",
            "url": "https://emilearthur.github.io/fastblog/edge/python/intel/2020/05/10/People-Counter-App-Edge.html",
            "relUrl": "/edge/python/intel/2020/05/10/People-Counter-App-Edge.html",
            "date": " • May 10, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Smart Queuing System",
            "content": "About . Smart queuing system using openvino by Intel . Project can be found https://github.com/emilearthur/smart_queuing_system .",
            "url": "https://emilearthur.github.io/fastblog/edge/python/intel/2020/03/22/smart-queuing-system.html",
            "relUrl": "/edge/python/intel/2020/03/22/smart-queuing-system.html",
            "date": " • Mar 22, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "BikeBuyer Classification",
            "content": "import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import numpy as np import numpy.random as nr import math %matplotlib inline %matplotlib widget . customer_info = pd.read_csv(&#39;Data/AdvWorksCusts.csv&#39;) customer_spending = pd.read_csv(&#39;Data/AW_AveMonthSpend.csv&#39;) customer_has_bike = pd.read_csv(&#39;Data/AW_BikeBuyer.csv&#39;) . (customer_info.astype(np.object) == &#39;?&#39;).any() (customer_spending.astype(np.object) == &#39;?&#39;).any() (customer_has_bike.astype(np.object) == &#39;?&#39;).any() # checking for missing values print((customer_info.astype(np.object).isnull()).any()) print((customer_spending.astype(np.object).isnull()).any()) print((customer_has_bike.astype(np.object).isnull()).any()) . print( &quot;Customer data&quot;) print(customer_info.shape) print(customer_info.CustomerID.unique().shape) print(&#39; n&#39; + &quot;Customer Spending &quot;) print(customer_spending.shape) print(customer_spending.CustomerID.unique().shape) print(&#39; n&#39; + &quot;Customer has bikes&quot;) print(customer_has_bike.shape) print(customer_has_bike.CustomerID.unique().shape) . customer_info.drop_duplicates(subset=&#39;CustomerID&#39;, keep=&#39;last&#39;,inplace=True) print(customer_info.shape) print(customer_info.CustomerID.unique().shape) . customer_spending.drop_duplicates(subset=&#39;CustomerID&#39;,keep=&#39;last&#39;,inplace=True) print(customer_spending.shape) print(customer_spending.CustomerID.unique().shape) . customer_has_bike.drop_duplicates(subset=&#39;CustomerID&#39;,keep=&#39;last&#39;,inplace=True) print(customer_has_bike.shape) print(customer_has_bike.CustomerID.unique().shape) . customer_info.describe().round() . customer_has_bike.describe().round() . #normalize to retun the relative frequency print(customer_has_bike.BikeBuyer.value_counts(normalize=True)) print(customer_has_bike.BikeBuyer.value_counts()) . combined = customer_info.merge(customer_has_bike, on = &#39;CustomerID&#39;, how=&#39;left&#39;) combined.head(5) . Running various visualization to see features to select for ML model def plot_box(combined, cols, col_x= &#39;BikeBuyer&#39;): for col in cols: sns.set_style(&quot;whitegrid&quot;) sns.boxplot(col_x, col, data=combined) plt.xlabel(col_x) # set x-axis plt.ylabel(col) # set y-axis plt.show() cols =[&#39;YearlyIncome&#39;,&#39;NumberCarsOwned&#39; ,&#39;NumberChildrenAtHome&#39;,&#39;TotalChildren&#39;] plot_box(combined, cols) . # forming categorical variables is_bike_buyer = combined.BikeBuyer== 1 bike_buyers = combined[is_bike_buyer] is_non_bike_buyer = combined.BikeBuyer == 0 non_bike_buyers = combined[is_non_bike_buyer] print(bike_buyers.shape) print(non_bike_buyers.shape) . # plot bar plot bike buyers counts def plot_bar(cat_cols): combined[&#39;dummy&#39;] = np.ones(shape = combined.shape[0]) for col in cat_cols: counts = combined[[&#39;dummy&#39;,&#39;BikeBuyer&#39;, col]].groupby([&#39;BikeBuyer&#39;,col], as_index = False).count() temp = counts[counts[&#39;BikeBuyer&#39;] ==0][[col,&#39;dummy&#39;]] temp.plot.bar(x=col, y= &#39;dummy&#39;) plt.title(&#39;Counts for &#39; + col + &#39; n non bike buyer&#39;) plt.ylabel(&#39;count&#39;) temp = counts[counts[&#39;BikeBuyer&#39;] == 1][[col,&#39;dummy&#39;]] temp.plot.bar(x=col, y=&#39;dummy&#39;) plt.title(&#39;Counts for &#39; + col + &#39; n bike buyer&#39;) plt.ylabel(&#39;count&#39;) plt.show() . cols = [&#39;Occupation&#39;,&#39;Gender&#39;,&#39;MaritalStatus&#39;] plot_bar(cols) . has_child_at_home = [] def generate_has_child_at_home(customer_info, has_child_at_home): for index, row in customer_info.iterrows(): if row.NumberChildrenAtHome&gt;0: has_child_at_home.append(&#39;Y&#39;) else: has_child_at_home.append(&#39;N&#39;) return has_child_at_home combined[&#39;hasChildAtHome&#39;] = generate_has_child_at_home(customer_info, has_child_at_home) combined[[&#39;hasChildAtHome&#39;,&#39;NumberChildrenAtHome&#39;]].head() . from datetime import datetime from dateutil.parser import parse def generate_age(data, format): collect_date = birthday = datetime(1998,1,1,0,0,0) age = [] for index, row in data.iterrows(): cust_date = datetime.strptime(row[&#39;BirthDate&#39;], format) age.append(int((collect_date - cust_date).days/365)) return age . data[&#39;Age&#39;] = generate_age(data, &#39;%Y-%m-%d&#39;) data[[&#39;BirthDate&#39;,&#39;Age&#39;]].head() . cols = [&#39;hasChildAtHome&#39;] plot_bar(cols) . features_chosen = [&#39;YearlyIncome&#39;,&#39;NumberCarsOwned&#39;,&#39;Occupation&#39;,&#39;Gender&#39;,&#39;MaritalStatus&#39;, &#39;hasChildAtHome&#39;] features = combined[features_chosen] features.head() . Preparing data for scikit learn . 1. encode categorical variable using one hot encoding. 2. convert features and labels to numpy arrays. . from sklearn import preprocessing import sklearn.model_selection as ms from sklearn import linear_model import sklearn.metrics as sklm . labels = np.array(combined.BikeBuyer) print(labels) . def encode_string(cat_features): enc = preprocessing.LabelEncoder() enc.fit(cat_features) enc_cat_features = enc.transform(cat_features) ohe = preprocessing.OneHotEncoder() encoded = ohe.fit(enc_cat_features.reshape(-1,1)) return encoded.transform(enc_cat_features.reshape(-1,1)).toarray() . def encode_cat_features(features): cat_features = [&#39;Gender&#39;,&#39;MaritalStatus&#39;,&#39;hasChildAtHome&#39;] f = encode_string(features[&#39;Occupation&#39;]) for cat in cat_features: enc = encode_string(features[cat]) f = np.concatenate([f, enc], 1) return f . numeric_features = np.array(combined[[&#39;YearlyIncome&#39;,&#39;NumberCarsOwned&#39;]]) . encoded_features = encode_cat_features(features) . features = np.concatenate([encoded_features,numeric_features],1) features.shape . features[3,:13] . nr.seed(9988) indx = range(features.shape[0]) indx = ms.train_test_split(indx, test_size=300) X_train = features[indx[0],:] y_train = np.ravel(labels[indx[0]]) X_test = features[indx[1],:] y_test = np.ravel(labels[indx[1]]) . X_train[:2] . scalar = preprocessing.MinMaxScaler(feature_range=(-1,1)).fit(X_train[:,11:]) X_train[:,11:] = scalar.transform(X_train[:,11:]) X_test[:,11:] = scalar.transform(X_test[:,11:]) . X_train[:2] . # Due to class inbalanc for bike buyers and no bike buyer, the class weight parameter is used logistic_mod = linear_model.LogisticRegression(class_weight=&#39;balanced&#39;) . nr.seed(123) inside = ms.KFold(n_splits=10, shuffle=True) nr.seed(321) outside = ms.KFold(n_splits=10, shuffle=True) nr.seed(3456) param_grid = {&quot;C&quot;: [0.1,1,10,100,1000]} clf = ms.GridSearchCV(estimator=logistic_mod, param_grid=param_grid, cv=inside, # using the inside folds scoring = &#39;roc_auc&#39;, return_train_score = True) clf.fit(features,labels) clf.best_estimator_.C . nr.seed(498) cv_estimate = ms.cross_val_score(clf, features, labels, cv = outside) # use the outside folds print(&#39;Mean perfomance metic = %4.3f&#39; %np.mean(cv_estimate)) print(&#39;STD of the metric = %4.3f&#39; %np.std(cv_estimate)) print(&#39;Outcome by cv fold&#39;) for i, x in enumerate (cv_estimate): print(&#39;Fold %2d %4.3f&#39; % (i+1,x)) . logistic_mod = linear_model.LogisticRegression(C=clf.best_estimator_.C, class_weight=&#39;balanced&#39;) logistic_mod.fit(X_train,y_train) print(logistic_mod.intercept_) print(logistic_mod.coef_) . probabilities = logistic_mod.predict_proba(X_test) print(probabilities[:15,:]) . def score_model(probs, threshold): return np.array([1 if x &gt; threshold else 0 for x in probs[:,1]]) threshold = 0.51 scores = score_model(probabilities, threshold) print(np.array(scores[:18])) print(y_test[:18]) . def print_matrics(labels, scores): metrics = sklm.precision_recall_fscore_support(labels, scores) conf = sklm.confusion_matrix(labels, scores) print(&#39; Confusion matrix&#39;) print(&#39; Score positive Score negative&#39;) print(&#39;Actual positive %6d&#39; % conf[0,0] + &#39; %5d&#39; % conf[0,1]) print(&#39;Actual negative %6d&#39; % conf[1,0] + &#39; %5d&#39; % conf[1,1]) print(&#39;&#39;) print(&#39;Accuracy %0.2f&#39; % sklm.accuracy_score(labels, scores)) print(&#39; &#39;) print(&#39; Positive Negative&#39;) print(&#39;Num case %6d&#39; % metrics[3][0] + &#39; %6d&#39; % metrics[3][1]) print(&#39;Precision %6.2f&#39; % metrics[0][0] + &#39; %6.2f&#39; % metrics[0][1]) print(&#39;Recall %6.2f&#39; % metrics[1][0] + &#39; %6.2f&#39; % metrics[1][1]) print(&#39;F1 %6.2f&#39; % metrics[2][0] + &#39; %6.2f&#39; % metrics[2][1]) . print_matrics(y_test, scores) . def plot_auc(labels, probs): ## compute the false postive rate, true positive rate and threshold along with the AUC fpr, tpr, threshold = sklm.roc_curve(labels, probs[:,1]) auc = sklm.auc(fpr, tpr) ## plot the result plt.title(&#39;Reciever Operating Charateristic&#39;) plt.plot(fpr, tpr, color = &#39;orange&#39;, label = &#39;AUC = %0.2f&#39; %auc) plt.legend(loc = &#39;lower right&#39;) plt.plot([0,1],[0,1],&#39;r--&#39;) plt.xlim([0,1]) plt.ylim([0,1]) plt.ylabel(&#39;True Positive Rate&#39;) plt.xlabel(&#39;False Positive Rate&#39;) plt.show() plot_auc(y_test, probabilities) . from sklearn.ensemble import RandomForestClassifier param_grid = {&#39;max_features&#39;: [2,3,5,10,13], &#39;min_samples_leaf&#39;:[3,5,10,20]} nr.seed(3456) rf_clf = RandomForestClassifier(class_weight = &#39;balanced&#39;) nr.seed(4455) rf_clf = ms.GridSearchCV(estimator=rf_clf, param_grid=param_grid, cv = inside, # Use the inside folds scoring = &#39;roc_auc&#39;, return_train_score = True) rf_clf.fit(features, labels) print(rf_clf.best_estimator_.max_features) print(rf_clf.best_estimator_.min_samples_leaf) . nr.seed(1115) rf_mod = RandomForestClassifier(class_weight=&#39;balanced&#39;, max_features = rf_clf.best_estimator_.max_features, min_samples_leaf =rf_clf.best_estimator_.min_samples_leaf) rf_mod.fit(X_train,y_train) probabilities = rf_mod.predict_proba(X_test) scores = score_model(probabilities,0.54) print(print_matrics(y_test, scores)) plot_auc(y_test,probabilities) . #nr.seed(1115) from sklearn.svm import SVC svclassifier = SVC(kernel=&#39;linear&#39;,probability=True, random_state= 0) svclassifier.fit(X_train,y_train) probabilities = svclassifier.predict_proba(X_test) scores = score_model(probabilities,0.54) print(print_matrics(y_test, scores)) plot_auc(y_test, probabilities) . from sklearn.svm import SVC svclassifier = SVC(kernel=&#39;linear&#39;, random_state=0) svclassifier.fit(X_train,y_train) param_grid = [{&#39;C&#39;: [1, 10, 100, 1000], &#39;kernel&#39;: [&#39;linear&#39;]}, {&#39;C&#39;: [1, 10, 100, 1000], &#39;kernel&#39;: [&#39;rbf&#39;], &#39;gamma&#39;: [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]}] svm_clf = ms.GridSearchCV(estimator= svclassifier, param_grid= param_grid, scoring= &#39;accuracy&#39;, cv= 3, n_jobs=-1) svm_clf.fit(X_train,y_train) . print(svm_clf.best_score_) print(svm_clf.best_params_) print(svm_clf.best_estimator_) . from sklearn.svm import SVC svclassifier = SVC(kernel=&#39;rbf&#39;,C=1,probability=True, gamma=0.7) svclassifier.fit(X_train,y_train) probabilities = svclassifier.predict_proba(X_test) scores = score_model(probabilities,0.54) print(print_matrics(y_test, scores)) plot_auc(y_test, probabilities) . Looking at the accuracy of all the models used seems we settle on SVM with the parameters used. . final = pd.read_csv(&#39;Data/AW_test.csv&#39;) final[&#39;hasChildAtHome&#39;] = generate_has_child_at_home(final,[]) final_features = final[features_chosen] numeric_final_features = np.array(final_features[[&#39;YearlyIncome&#39;,&#39;NumberCarsOwned&#39;]]) encoded_final_features = encode_cat_features(final_features) final_features = np.concatenate([encoded_final_features, numeric_final_features],1) final_features[:,11:] = scalar.transform(final_features[:,11:]) . probabilities = svclassifier.predict_proba(final_features) scores = score_model(probabilities, 0.54) . print(scores) . np.savetxt(&#39;final_answer_classification.csv&#39;,scores,delimiter=&#39;,&#39;,fmt=&#39;%i&#39;) .",
            "url": "https://emilearthur.github.io/fastblog/2019/08/31/classificationbikebuyers.html",
            "relUrl": "/2019/08/31/classificationbikebuyers.html",
            "date": " • Aug 31, 2019"
        }
        
    
  
    
        ,"post9": {
            "title": "BikeBuyer Regression",
            "content": "import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import numpy as np import numpy.random as nr import math %matplotlib inline . customer_info = pd.read_csv(&#39;Data/AdvWorksCusts.csv&#39;) customer_spending = pd.read_csv(&#39;Data/AW_AveMonthSpend.csv&#39;) customer_has_bike = pd.read_csv(&#39;Data/AW_BikeBuyer.csv&#39;) . print(&quot;For customer_info: &quot; + &quot; n&quot;) print(customer_info.shape) print(customer_info.CustomerID.unique().shape) print(&quot; n&quot; + &quot;For customer_spending&quot; + &quot; n&quot;) print(customer_spending.shape) print(customer_spending.CustomerID.unique().shape) print(&quot; n&quot; + &quot;For customer_has_bike&quot; + &quot; n&quot;) print(customer_has_bike.shape) print(customer_has_bike.CustomerID.unique().shape) # dropping duplicate if they exist customer_info.drop_duplicates(subset=&#39;CustomerID&#39;,keep=&#39;last&#39;, inplace=True) customer_spending.drop_duplicates(subset=&#39;CustomerID&#39;,keep=&#39;last&#39;,inplace=True) customer_has_bike.drop_duplicates(subset=&#39;CustomerID&#39;,keep=&#39;last&#39;,inplace=True) # checking if duplicate are dropped print(&quot;For customer_info: &quot; + &quot; n&quot;) print(customer_info.shape) print(customer_info.CustomerID.unique().shape) print(&quot; n&quot; + &quot;For customer_spending&quot; + &quot; n&quot;) print(customer_spending.shape) print(customer_spending.CustomerID.unique().shape) print(&quot; n&quot; + &quot;For customer_has_bike&quot; + &quot; n&quot;) print(customer_has_bike.shape) print(customer_has_bike.CustomerID.unique().shape) . For customer_info: (16519, 23) (16404,) For customer_spending (16519, 2) (16404,) For customer_has_bike (16519, 2) (16404,) For customer_info: (16404, 23) (16404,) For customer_spending (16404, 2) (16404,) For customer_has_bike (16404, 2) (16404,) . print((customer_info.astype(np.object).isnull()).any()) print((customer_spending.astype(np.object).isnull().any())) print((customer_has_bike.astype(np.object).isnull().any())) . CustomerID False Title True FirstName False MiddleName True LastName False Suffix True AddressLine1 False AddressLine2 True City False StateProvinceName False CountryRegionName False PostalCode False PhoneNumber False BirthDate False Education False Occupation False Gender False MaritalStatus False HomeOwnerFlag False NumberCarsOwned False NumberChildrenAtHome False TotalChildren False YearlyIncome False dtype: bool CustomerID False AveMonthSpend False dtype: bool CustomerID False BikeBuyer False dtype: bool . Doing some exploratory analysis once the data is cleaned . print(round(customer_info.describe(),2)) print(&quot; n&quot;) print(round(customer_spending.describe(),2)) print(&quot; n&quot;) print(round(customer_has_bike.describe(),2)) . CustomerID HomeOwnerFlag NumberCarsOwned NumberChildrenAtHome count 16404.00 16404.00 16404.00 16404.00 mean 20240.14 0.67 1.50 0.99 std 5340.37 0.47 1.14 1.51 min 11000.00 0.00 0.00 0.00 25% 15617.75 0.00 1.00 0.00 50% 20231.50 1.00 2.00 0.00 75% 24862.25 1.00 2.00 2.00 max 29482.00 1.00 4.00 5.00 TotalChildren YearlyIncome count 16404.00 16404.00 mean 2.00 78129.67 std 1.68 39728.38 min 0.00 9482.00 25% 0.00 47808.75 50% 2.00 76125.00 75% 3.00 105211.75 max 5.00 196511.00 CustomerID AveMonthSpend count 16404.00 16404.00 mean 20240.14 72.39 std 5340.37 27.27 min 11000.00 22.00 25% 15617.75 52.00 50% 20231.50 68.00 75% 24862.25 84.00 max 29482.00 176.00 CustomerID BikeBuyer count 16404.00 16404.00 mean 20240.14 0.33 std 5340.37 0.47 min 11000.00 0.00 25% 15617.75 0.00 50% 20231.50 0.00 75% 24862.25 1.00 max 29482.00 1.00 . data = customer_info.merge(customer_spending, on=&#39;CustomerID&#39;, how=&#39;left&#39;) data.head() . CustomerID Title FirstName MiddleName LastName Suffix AddressLine1 AddressLine2 City StateProvinceName ... Education Occupation Gender MaritalStatus HomeOwnerFlag NumberCarsOwned NumberChildrenAtHome TotalChildren YearlyIncome AveMonthSpend . 0 11000 | NaN | Jon | V | Yang | NaN | 3761 N. 14th St | NaN | Rockhampton | Queensland | ... | Bachelors | Professional | M | M | 1 | 0 | 0 | 2 | 137947 | 89 | . 1 11001 | NaN | Eugene | L | Huang | NaN | 2243 W St. | NaN | Seaford | Victoria | ... | Bachelors | Professional | M | S | 0 | 1 | 3 | 3 | 101141 | 117 | . 2 11002 | NaN | Ruben | NaN | Torres | NaN | 5844 Linden Land | NaN | Hobart | Tasmania | ... | Bachelors | Professional | M | M | 1 | 1 | 3 | 3 | 91945 | 123 | . 3 11003 | NaN | Christy | NaN | Zhu | NaN | 1825 Village Pl. | NaN | North Ryde | New South Wales | ... | Bachelors | Professional | F | S | 0 | 1 | 0 | 0 | 86688 | 50 | . 4 11004 | NaN | Elizabeth | NaN | Johnson | NaN | 7553 Harness Circle | NaN | Wollongong | New South Wales | ... | Bachelors | Professional | F | S | 1 | 4 | 5 | 5 | 92771 | 95 | . 5 rows × 24 columns . Below function is useful but I prefer you use the other . because its simple . from datetime import datetime from dateutil.parser import parse def generate_age(data, format): collect_date = birthday = datetime(1998,1,1,0,0,0) age = [] for index, row in data.iterrows(): cust_date = datetime.strptime(row[&#39;BirthDate&#39;], format) age.append(int((collect_date - cust_date).days/365)) return age . data[&#39;Age&#39;] = generate_age(data, &#39;%Y-%m-%d&#39;) data[[&#39;BirthDate&#39;,&#39;Age&#39;]].head() . BirthDate Age . 0 1966-04-08 | 31 | . 1 1965-05-14 | 32 | . 2 1965-08-12 | 32 | . 3 1968-02-15 | 29 | . 4 1968-08-08 | 29 | . generating age since we given the birthrate . This function for generating age work but it not safe since it does work with one form of format. . from datetime import datetime from datetime import date def calcute_age(age): cust_date = datetime.strptime(age, &quot;%Y-%m-%d&quot;) f_date = date(1998,1,1) return f_date.year - cust_date.year - ((f_date.month, f_date.day) &lt;(cust_date.month, cust_date.day)) data[&#39;Age&#39;] = data[&#39;BirthDate&#39;].apply(calcute_age) . data[[&#39;BirthDate&#39;,&#39;Age&#39;]].head() . def plot_scatter(auto_prices, cols, col_y= &#39;AveMonthSpend&#39;): for col in cols: fig = plt.figure(figsize=(7,6)) # define plot area ax = fig.gca() # define axis auto_prices.plot.scatter(x= col, y=col_y, ax= ax) ax.set_title(&#39;Scatter plot of &#39; + col_y + &#39; vs. &#39; + col) #title of the plot ax.set_xlabel(col) #set x axis text ax.set_ylabel(col_y) #set y axis text plt.show() . cols=[&#39;NumberChildrenAtHome&#39;,&#39;NumberCarsOwned&#39;,&#39;TotalChildren&#39;] plot_scatter(data,cols) . cols= [&#39;AveMonthSpend&#39;,&#39;YearlyIncome&#39;,&#39;Age&#39;] sns.pairplot(data[cols], palette=&quot;Set2&quot;, diag_kind=&quot;kde&quot;, size=2).map_upper(sns.kdeplot,cmap=&quot;Blues_d&quot;) . /usr/local/lib/python3.7/dist-packages/seaborn/axisgrid.py:2065: UserWarning: The `size` parameter has been renamed to `height`; pleaes update your code. warnings.warn(msg, UserWarning) /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . &lt;seaborn.axisgrid.PairGrid at 0x7f6b554f6c50&gt; . def plot_box(auto_prices, cols, col_y=&#39;AveMonthSpend&#39;): for col in cols: sns.set_style(&quot;whitegrid&quot;) sns.boxplot(col,col_y, data=auto_prices) plt.xlabel(col) #set x axis text plt.ylabel(col_y) #set y axis text plt.show() . cols= [&#39;Occupation&#39;,&#39;Gender&#39;,&#39;MaritalStatus&#39;,&#39;HomeOwnerFlag&#39;] plot_box(data, cols) . After visualizations above we selected the following features for model: Gender, MaritalStatus, HomeOwnerFlag, Occupation, Age, YearlyIncme and NumberChildrenAtHome . categorical_features= [&#39;Gender&#39;,&#39;MaritalStatus&#39;,&#39;HomeOwnerFlag&#39;,&#39;Occupation&#39;] numeric_features= [&#39;Age&#39;,&#39;YearlyIncome&#39;,&#39;NumberChildrenAtHome&#39;] . from sklearn import preprocessing import sklearn.model_selection as ms from sklearn import linear_model import sklearn.metrics as sklm def encode_string(cat_features): enc= preprocessing.LabelEncoder() enc.fit(cat_features) enc_cat_features= enc.transform(cat_features) ohe= preprocessing.OneHotEncoder() encoded= ohe.fit(enc_cat_features.reshape(-1,1)) return encoded.transform(enc_cat_features.reshape(-1,1)).toarray() . def encode_cat_features(features): categorical_features= [&#39;Gender&#39;,&#39;MaritalStatus&#39;,&#39;HomeOwnerFlag&#39;] f= encode_string(features[&#39;Occupation&#39;]) for cat in categorical_features: enc= encode_string(features[cat]) f= np.concatenate([f,enc],1) return f . labels = np.array(data.AveMonthSpend) selected = numeric_features + categorical_features features = data[selected] print(labels) print(features.head()) . [ 89 117 123 ... 79 65 68] Age YearlyIncome NumberChildrenAtHome Gender MaritalStatus 0 31 137947 0 M M 1 32 101141 3 M S 2 32 91945 3 M M 3 29 86688 0 F S 4 29 92771 5 F S HomeOwnerFlag Occupation 0 1 Professional 1 0 Professional 2 1 Professional 3 0 Professional 4 1 Professional . encoded_features= encode_cat_features(features) print(encoded_features[:,:]) #selecting numeric features and converting them to array numeric_features= np.array(data[numeric_features]) print(numeric_features[:,:]) . [[0. 0. 0. ... 0. 0. 1.] [0. 0. 0. ... 1. 1. 0.] [0. 0. 0. ... 0. 0. 1.] ... [0. 1. 0. ... 0. 0. 1.] [0. 0. 0. ... 0. 0. 1.] [0. 0. 0. ... 1. 0. 1.]] [[ 31 137947 0] [ 32 101141 3] [ 32 91945 3] ... [ 58 133053 0] [ 51 31930 0] [ 52 59382 0]] . /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) . features= np.concatenate([encoded_features,numeric_features],1) print(features.shape) print(features[:1,:]) . (16404, 14) [[0.00000e+00 0.00000e+00 0.00000e+00 1.00000e+00 0.00000e+00 0.00000e+00 1.00000e+00 1.00000e+00 0.00000e+00 0.00000e+00 1.00000e+00 3.10000e+01 1.37947e+05 0.00000e+00]] . nr.seed(9988) indx= range(features.shape[0]) indx= ms.train_test_split(indx, test_size= 300) X_train= features[indx[0],:] y_train= np.ravel(labels[indx[0]]) X_test= features[indx[1],:] y_test= np.ravel(labels[indx[1]]) . # Scaling the data to avoid features having different magnitudes #scalar= preprocessing.MinMaxScaler(feature_range=(-1,1)).fit(X_train[:,11:]) scaler = preprocessing.StandardScaler().fit(X_train[:,11:13]) X_train[:,11:13] = scaler.transform(X_train[:,11:13]) X_test[:,11:13] = scaler.transform(X_test[:,11:13]) X_train[:2] . array([[ 1. , 0. , 0. , 0. , 0. , 1. , 0. , 0. , 1. , 1. , 0. , -0.04218537, -0.96803832, 0. ], [ 0. , 1. , 0. , 0. , 0. , 0. , 1. , 0. , 1. , 1. , 0. , -0.48707941, 2.37320265, 0. ]]) . Now Features are prepared we try it on models . . lin_mod= linear_model.Ridge(alpha = 0.05) lin_mod.fit(X_train,y_train) print(lin_mod.intercept_) print(lin_mod.coef_) . 60.84370494780248 [ 6.62453133e-01 -2.17172381e+00 -1.79250561e-01 8.84114274e-01 8.04406961e-01 -1.40857718e+01 1.40857718e+01 3.09843371e+00 -3.09843371e+00 3.71975025e-03 -3.71975028e-03 -1.24172260e+00 8.20152838e+00 1.10719302e+01] . alphas = np.array([0.1,0.01,0.001,0.0001,0,0.01,0.05,0.04,0.03,0.02,1,2,3,4,5,6,7,8,9,10]) lin_mod= linear_model.Ridge() linRidge_clf = ms.GridSearchCV(estimator=lin_mod, param_grid=dict(alpha=alphas)) linRidge_clf.fit(X_train,y_train) #summarize results of grid search print(linRidge_clf.best_score_) print(linRidge_clf.best_estimator_.alpha) . /usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:2053: FutureWarning: You should specify a value for &#39;cv&#39; instead of relying on the default value. The default value will change from 3 to 5 in version 0.22. warnings.warn(CV_WARNING, FutureWarning) . 0.9459672317634047 3.0 . lin_mod= linear_model.Ridge(alpha = 3.0) lin_mod.fit(X_train,y_train) print(lin_mod.intercept_) print(lin_mod.coef_) . 60.84421760308023 [ 6.59621956e-01 -2.16533531e+00 -1.82820198e-01 8.85518088e-01 8.03015464e-01 -1.40810939e+01 1.40810939e+01 3.09746333e+00 -3.09746333e+00 3.24850901e-03 -3.24850901e-03 -1.24213121e+00 8.19896041e+00 1.10711523e+01] . def print_metrics(y_true, y_predicted): # compute R^2 and the adjusted R^2 r2= sklm.r2_score(y_true,y_predicted) n= X_test.shape[0] p= X_test.shape[1]-1 r2_adj= 1-(1-r2)*((n-1)/(n-p-1)) ## Print the usual metrics and the R^2 values print(&#39;Mean Square Error = &#39; + str(sklm.mean_squared_error(y_true, y_predicted))) print(&#39;Root Mean Square Error = &#39; + str(math.sqrt(sklm.mean_squared_error(y_true, y_predicted)))) print(&#39;Mean Absolute Error = &#39; + str(sklm.mean_absolute_error(y_true, y_predicted))) print(&#39;Median Absolute Error = &#39; + str(sklm.median_absolute_error(y_true, y_predicted))) print(&#39;R^2 = &#39; + str(r2)) print(&#39;Adjusted R^2 = &#39; + str(r2_adj)) . def print_evalute(y_true_, y_predicted_): errors= abs(y_predicted_ - y_true_) mape_= 100* np.mean(errors/y_true_) accuracy= 100 - mape_ print(&#39;Model Performance&#39;) print(&#39;Average Error: {:0.4f} degrees.&#39;.format(np.mean(errors))) print(&#39;Accuracy= {:0.2f}%.&#39;.format(accuracy)) . scores= lin_mod.predict(X_test) print_metrics(y_test, scores) print_evalute(y_test, scores) . Mean Square Error = 34.300889201469865 Root Mean Square Error = 5.856696099463405 Mean Absolute Error = 4.394083754414235 Median Absolute Error = 3.3884315387464348 R^2 = 0.9522663978047706 Adjusted R^2 = 0.9500966886140784 Model Performance Average Error: 4.3941 degrees. Accuracy= 93.28%. . def hist_residue(y_test, y_score): ## compute vector of residuals residue = np.subtract(y_test.reshape(-1,1), y_score.reshape(-1,1)) # making a plot sns.distplot(residue) plt.title(&#39;Histogram of residuals&#39;) plt.xlabel(&#39;Residual value&#39;) plt.ylabel(&#39;Count&#39;) plt.show() hist_residue(y_test,scores) . /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . def plot_residue(y_test, y_score): ## compute vector of residuals residue = np.subtract(y_test.reshape(-1,1), y_score.reshape(-1,1)) # making a plot sns.regplot(y_score, residue, fit_reg= False) plt.title(&#39;Residuals vs Predicted values&#39;) plt.xlabel(&#39;Predicted Values&#39;) plt.ylabel(&#39;Residuals&#39;) plt.show() plot_residue(y_test,scores) . The residual are not normally distrubuted as expected. Also there is a pattern for lower Average residuals. This indicate the model is not generalize as expected. . from sklearn.pipeline import make_pipeline from sklearn.preprocessing import PolynomialFeatures poly_mod= make_pipeline(PolynomialFeatures(4), linear_model.LinearRegression()) poly_mod.fit(X_train,y_train) scores = poly_mod.predict(X_test) print_metrics(y_test,scores) print_evalute(y_test, scores) hist_residue(y_test,scores) plot_residue(y_test,scores) . Mean Square Error = 7.956054222480307 Root Mean Square Error = 2.8206478373735893 Mean Absolute Error = 2.2826290766398114 Median Absolute Error = 2.027923583984375 R^2 = 0.9889282424992272 Adjusted R^2 = 0.9884249807946466 Model Performance Average Error: 2.2826 degrees. Accuracy= 96.32%. . /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . Comparing the polynomial feature to the linear regression. It can be seen that polynomial regression performs beter. The R2 and adj. R2 shows a good residual distrubution and also the histogram shows a form of a normal distribution. Due to this I will expore other model to see how best it goes. . # to choose the best parameter for the GradientBoostingRegressor from sklearn.ensemble import GradientBoostingRegressor gbrt_mod= GradientBoostingRegressor(random_state=0) param_grid= { &#39;n_estimators&#39;: [10,20,30,40,50,100,200,300,500], &#39;max_features&#39;: [&#39;auto&#39;], &#39;max_depth&#39;: [1,2,4,6,8,10], &#39;learning_rate&#39;: [0.1], &#39;subsample&#39;: [1] } gbrt_clf= ms.GridSearchCV(estimator=gbrt_mod, param_grid=param_grid, n_jobs=4, cv=5, scoring=&#39;neg_mean_squared_error&#39;) gbrt_clf.fit(X_train,y_train) print(gbrt_clf.best_score_) print(gbrt_clf.best_params_) . -9.746757215191346 {&#39;learning_rate&#39;: 0.1, &#39;max_depth&#39;: 4, &#39;max_features&#39;: &#39;auto&#39;, &#39;n_estimators&#39;: 200, &#39;subsample&#39;: 1} . from sklearn.ensemble import GradientBoostingRegressor gbrt_mod= GradientBoostingRegressor(n_estimators=200, max_depth=4) gbrt_mod.fit(X_train,y_train) scores= gbrt_mod.predict(X_test) print_metrics(y_test,scores) print_evalute(y_test, scores) hist_residue(y_test,scores) plot_residue(y_test,scores) . Mean Square Error = 9.259138303535538 Root Mean Square Error = 3.042883222132512 Mean Absolute Error = 2.4327966433305996 Median Absolute Error = 2.119264615257041 R^2 = 0.9871148522752397 Adjusted R^2 = 0.986529163742296 Model Performance Average Error: 2.4328 degrees. Accuracy= 96.11%. . /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . from sklearn.neural_network import MLPRegressor regressor_mod= MLPRegressor(hidden_layer_sizes= (100,), activation= &#39;tanh&#39;, learning_rate= &#39;adaptive&#39;, max_iter=1000, random_state=9, learning_rate_init=0.001) regressor_mod.fit(X_train, y_train) scores= regressor_mod.predict(X_test) print_metrics(y_test,scores) print_evalute(y_test, scores) hist_residue(y_test,scores) plot_residue(y_test,scores) . Mean Square Error = 8.100806569138946 Root Mean Square Error = 2.8461915903780874 Mean Absolute Error = 2.296191108436508 Median Absolute Error = 2.1082752324486655 R^2 = 0.9887268030877984 Adjusted R^2 = 0.9882143850463346 Model Performance Average Error: 2.2962 degrees. Accuracy= 96.32%. . /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . from sklearn.ensemble import RandomForestRegressor rf_Regressor_mod= RandomForestRegressor(n_estimators=40) rf_Regressor_mod.fit(X_train, y_train) scores= rf_Regressor_mod.predict(X_test) print_metrics(y_test,scores) print_evalute(y_test, scores) hist_residue(y_test,scores) plot_residue(y_test,scores) . Mean Square Error = 11.499512500000002 Root Mean Square Error = 3.391093112847243 Mean Absolute Error = 2.744166666666666 Median Absolute Error = 2.400000000000002 R^2 = 0.9839971158797088 Adjusted R^2 = 0.9832697120560593 Model Performance Average Error: 2.7442 degrees. Accuracy= 95.66%. . /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . # parameters n_estimators= [int(x) for x in np.linspace(10,500,10)]# # trees in random forest max_features= [&#39;auto&#39;,&#39;sqrt&#39;]# # features to consider at every split max_depth= [int(x) for x in np.linspace(10,100,10)]# # maximum number of levels in tree max_depth.append(None) min_samples_split= [2,5,10] # minimum # samples required at each split a node min_samples_leaf= [1,2,4] # minimum # of samples required at each leaf node bootstrap= [True, False] # Method of selecting sample for training each tree param_distributions= {&#39;n_estimators&#39;: n_estimators, &#39;max_features&#39;: max_features, &#39;max_depth&#39;: max_depth, &#39;min_samples_split&#39;: min_samples_split, &#39;min_samples_leaf&#39;: min_samples_leaf, &#39;bootstrap&#39;: bootstrap} rf_Regressor_mod= RandomForestRegressor() rf_Regressor_clf= ms.RandomizedSearchCV(estimator= rf_Regressor_mod, param_distributions= param_distributions, n_iter= 100, cv=3, random_state=42, n_jobs=-1) rf_Regressor_clf.fit(X_train,y_train) print(&#39; n&#39;) print(rf_Regressor_clf.best_score_) print(rf_Regressor_clf.best_params_) . /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning /usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/externals/loky/process_executor.py:706: UserWarning: A worker stopped while some jobs were given to the executor. This can be caused by a too short worker timeout or by a memory leak. &#34;timeout or by a memory leak.&#34;, UserWarning . 0.9860394267493952 {&#39;n_estimators&#39;: 445, &#39;min_samples_split&#39;: 2, &#39;min_samples_leaf&#39;: 1, &#39;max_features&#39;: &#39;auto&#39;, &#39;max_depth&#39;: 10, &#39;bootstrap&#39;: True} . from sklearn.ensemble import RandomForestRegressor rf_Regressor_mod= RandomForestRegressor(n_estimators= 227, min_samples_split= 5, min_samples_leaf= 1, max_features= &#39;auto&#39;, max_depth= 10, bootstrap= &#39;True&#39;) rf_Regressor_mod.fit(X_train, y_train) scores= rf_Regressor_mod.predict(X_test) print_metrics(y_test,scores) print_evalute(y_test, scores) hist_residue(y_test,scores) plot_residue(y_test,scores) . Mean Square Error = 9.571726313153945 Root Mean Square Error = 3.093820665965296 Mean Absolute Error = 2.4688942994223027 Median Absolute Error = 2.1969817511908794 R^2 = 0.9866798503831755 Adjusted R^2 = 0.9860743890369562 Model Performance Average Error: 2.4689 degrees. Accuracy= 96.04%. . /usr/lib/python3/dist-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result. return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval . From all the models, it could be seen that ML regressor does good in general compared to the other models. . # importing the final test data final= pd.read_csv(&#39;Data/AW_test.csv&#39;) # checking if there are duplicate print(final.shape) print(final.CustomerID.unique().shape) . (500, 23) (500,) . final[&#39;Age&#39;] = generate_age(final,&#39;%m/%d/%Y&#39;) final[[&#39;Age&#39;,&#39;BirthDate&#39;]].head() . Age BirthDate . 0 53 | 1/5/1945 | . 1 33 | 10/4/1964 | . 2 64 | 1/12/1934 | . 3 39 | 9/22/1958 | . 4 32 | 3/19/1965 | . encoded = encode_cat_features(final) numeric_final_features = np.array(final[[&#39;Age&#39;,&#39;YearlyIncome&#39;, &#39;NumberChildrenAtHome&#39;]]) final_test = np.concatenate([encoded,numeric_final_features], 1) final_test[:,11:13]= scaler.transform(final_test[:,11:13]) . /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) /usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_encoders.py:368: FutureWarning: The handling of integer data will change in version 0.22. Currently, the categories are determined based on the range [0, max(values)], while in the future they will be determined based on the unique values. If you want the future behaviour and silence this warning, you can specify &#34;categories=&#39;auto&#39;&#34;. In case you used a LabelEncoder before this OneHotEncoder to convert the categories to integers, then you can now use the OneHotEncoder directly. warnings.warn(msg, FutureWarning) . final_scores= regressor_mod.predict(final_test) np.savetxt(&#39;final_answer_regression.csv&#39;, final_scores, delimiter=&#39;,&#39;,fmt=&#39;%i&#39;) .",
            "url": "https://emilearthur.github.io/fastblog/2019/08/31/Regression-pricing.html",
            "relUrl": "/2019/08/31/Regression-pricing.html",
            "date": " • Aug 31, 2019"
        }
        
    
  
    
        ,"post10": {
            "title": "Mortgage Loan prediction based on mortgage application.",
            "content": "import pandas as pd import matplotlib.pyplot as plt import seaborn as sns import numpy as np import numpy.random as nr import math from sklearn.model_selection import train_test_split %matplotlib inline %matplotlib widget pd.set_option(&#39;display.max_columns&#39;, 50) __author__ = &quot;Frederick Emile Bondzie-Arthur&quot; __email__ = &quot;Frederickauthur@hotmail.com&quot; . DISCOVER . train_data= pd.read_csv(&quot;data/train_values.csv&quot;) train_data_label= pd.read_csv(&quot;data/train_labels.csv&quot;) final= pd.read_csv(&#39;data/test_values.csv&#39;) . train_data.head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant . 0 0 | 3 | 1 | 1 | 1 | 70.0 | 3 | 18 | 37 | 246 | 2 | 5 | 1 | 24.0 | 6203.0 | 44.230 | 60588.0 | 50.933 | 716.0 | 2642.0 | 4536 | False | . 1 1 | 1 | 1 | 3 | 1 | 178.0 | 3 | 369 | 52 | 299 | 1 | 5 | 1 | 57.0 | 5774.0 | 15.905 | 54821.0 | 100.000 | 1622.0 | 2108.0 | 2458 | False | . 2 2 | 2 | 1 | 3 | 1 | 163.0 | 3 | 16 | 10 | 306 | 2 | 5 | 1 | 67.0 | 6094.0 | 61.270 | 67719.0 | 100.000 | 760.0 | 1048.0 | 5710 | False | . 3 3 | 1 | 1 | 1 | 1 | 155.0 | 1 | 305 | 47 | 180 | 2 | 5 | 1 | 105.0 | 6667.0 | 6.246 | 78439.0 | 100.000 | 2025.0 | 2299.0 | 5888 | True | . 4 4 | 1 | 1 | 1 | 1 | 305.0 | 3 | 24 | 37 | 20 | 2 | 3 | 2 | 71.0 | 6732.0 | 100.000 | 63075.0 | 82.200 | 1464.0 | 1847.0 | 289 | False | . train_data_label.head() . row_id accepted . 0 0 | 1 | . 1 1 | 0 | . 2 2 | 1 | . 3 3 | 1 | . 4 4 | 1 | . print(train_data.shape) print(train_data_label.shape) . (500000, 22) (500000, 2) . data= train_data.merge(train_data_label, on=&#39;row_id&#39;) data.head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant accepted . 0 0 | 3 | 1 | 1 | 1 | 70.0 | 3 | 18 | 37 | 246 | 2 | 5 | 1 | 24.0 | 6203.0 | 44.230 | 60588.0 | 50.933 | 716.0 | 2642.0 | 4536 | False | 1 | . 1 1 | 1 | 1 | 3 | 1 | 178.0 | 3 | 369 | 52 | 299 | 1 | 5 | 1 | 57.0 | 5774.0 | 15.905 | 54821.0 | 100.000 | 1622.0 | 2108.0 | 2458 | False | 0 | . 2 2 | 2 | 1 | 3 | 1 | 163.0 | 3 | 16 | 10 | 306 | 2 | 5 | 1 | 67.0 | 6094.0 | 61.270 | 67719.0 | 100.000 | 760.0 | 1048.0 | 5710 | False | 1 | . 3 3 | 1 | 1 | 1 | 1 | 155.0 | 1 | 305 | 47 | 180 | 2 | 5 | 1 | 105.0 | 6667.0 | 6.246 | 78439.0 | 100.000 | 2025.0 | 2299.0 | 5888 | True | 1 | . 4 4 | 1 | 1 | 1 | 1 | 305.0 | 3 | 24 | 37 | 20 | 2 | 3 | 2 | 71.0 | 6732.0 | 100.000 | 63075.0 | 82.200 | 1464.0 | 1847.0 | 289 | False | 1 | . data.dtypes . row_id int64 loan_type int64 property_type int64 loan_purpose int64 occupancy int64 loan_amount float64 preapproval int64 msa_md int64 state_code int64 county_code int64 applicant_ethnicity int64 applicant_race int64 applicant_sex int64 applicant_income float64 population float64 minority_population_pct float64 ffiecmedian_family_income float64 tract_to_msa_md_income_pct float64 number_of_owner-occupied_units float64 number_of_1_to_4_family_units float64 lender int64 co_applicant bool accepted int64 dtype: object . print((data.astype(np.object) == &#39;?&#39;).any()) . row_id False loan_type False property_type False loan_purpose False occupancy False loan_amount False preapproval False msa_md False state_code False county_code False applicant_ethnicity False applicant_race False applicant_sex False applicant_income False population False minority_population_pct False ffiecmedian_family_income False tract_to_msa_md_income_pct False number_of_owner-occupied_units False number_of_1_to_4_family_units False lender False co_applicant False accepted False dtype: bool . print((data.astype(np.object).isnull()).any()) . row_id False loan_type False property_type False loan_purpose False occupancy False loan_amount False preapproval False msa_md False state_code False county_code False applicant_ethnicity False applicant_race False applicant_sex False applicant_income True population True minority_population_pct True ffiecmedian_family_income True tract_to_msa_md_income_pct True number_of_owner-occupied_units True number_of_1_to_4_family_units True lender False co_applicant False accepted False dtype: bool . (data.isnull().sum()/ data.row_id.unique().shape[0] * 100).round(2) . row_id 0.00 loan_type 0.00 property_type 0.00 loan_purpose 0.00 occupancy 0.00 loan_amount 0.00 preapproval 0.00 msa_md 0.00 state_code 0.00 county_code 0.00 applicant_ethnicity 0.00 applicant_race 0.00 applicant_sex 0.00 applicant_income 7.99 population 4.49 minority_population_pct 4.49 ffiecmedian_family_income 4.49 tract_to_msa_md_income_pct 4.50 number_of_owner-occupied_units 4.51 number_of_1_to_4_family_units 4.51 lender 0.00 co_applicant 0.00 accepted 0.00 dtype: float64 . (final.isnull().sum()/ final.row_id.unique().shape[0] * 100).round(2) . row_id 0.00 loan_type 0.00 property_type 0.00 loan_purpose 0.00 occupancy 0.00 loan_amount 0.00 preapproval 0.00 msa_md 0.00 state_code 0.00 county_code 0.00 applicant_ethnicity 0.00 applicant_race 0.00 applicant_sex 0.00 applicant_income 8.03 population 4.50 minority_population_pct 4.50 ffiecmedian_family_income 4.49 tract_to_msa_md_income_pct 4.50 number_of_owner-occupied_units 4.51 number_of_1_to_4_family_units 4.51 lender 0.00 co_applicant 0.00 dtype: float64 . data.isnull().sum() . row_id 0 loan_type 0 property_type 0 loan_purpose 0 occupancy 0 loan_amount 0 preapproval 0 msa_md 0 state_code 0 county_code 0 applicant_ethnicity 0 applicant_race 0 applicant_sex 0 applicant_income 39948 population 22465 minority_population_pct 22466 ffiecmedian_family_income 22440 tract_to_msa_md_income_pct 22514 number_of_owner-occupied_units 22565 number_of_1_to_4_family_units 22530 lender 0 co_applicant 0 accepted 0 dtype: int64 . final.isnull().sum() . row_id 0 loan_type 0 property_type 0 loan_purpose 0 occupancy 0 loan_amount 0 preapproval 0 msa_md 0 state_code 0 county_code 0 applicant_ethnicity 0 applicant_race 0 applicant_sex 0 applicant_income 40141 population 22480 minority_population_pct 22482 ffiecmedian_family_income 22453 tract_to_msa_md_income_pct 22517 number_of_owner-occupied_units 22574 number_of_1_to_4_family_units 22550 lender 0 co_applicant 0 dtype: int64 . filter1 = data[&quot;msa_md&quot;].isin([-1]) filter2 = data[&quot;county_code&quot;].isin([-1]) filter3 = data[&quot;state_code&quot;].isin([-1]) # displaying dataframe with all filter applied and mandatory data[filter1 | filter2| filter3].head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant accepted . 17 17 | 2 | 2 | 3 | 1 | 138.0 | 3 | -1 | 37 | 59 | 2 | 5 | 1 | NaN | 4193.0 | 14.996 | 57774.0 | 74.411 | 1247.0 | 1998.0 | 2566 | True | 1 | . 26 26 | 1 | 1 | 1 | 1 | 113.0 | 1 | -1 | -1 | -1 | 2 | 5 | 2 | 54.0 | NaN | NaN | NaN | NaN | NaN | NaN | 2839 | False | 0 | . 35 35 | 1 | 1 | 3 | 1 | 168.0 | 3 | -1 | 36 | 151 | 2 | 5 | 2 | 65.0 | 3195.0 | 20.700 | 47253.0 | 100.000 | 339.0 | 814.0 | 2597 | False | 1 | . 38 38 | 1 | 1 | 1 | 2 | 88.0 | 1 | -1 | -1 | -1 | 2 | 5 | 2 | 104.0 | NaN | NaN | NaN | NaN | NaN | NaN | 788 | True | 0 | . 45 45 | 1 | 2 | 1 | 1 | 106.0 | 3 | -1 | 42 | 136 | 3 | 1 | 1 | 48.0 | NaN | NaN | NaN | NaN | NaN | NaN | 2318 | True | 0 | . print(data.msa_md[filter1].count()) print(data.county_code[filter2].count()) print(data.state_code[filter3].count()) . 76982 20466 19132 . print(round((data.msa_md[filter1].count()/data.row_id.unique().shape[0] * 100),2)) print(round((data.county_code[filter2].count()/data.row_id.unique().shape[0] * 100),2)) print(round((data.state_code[filter3].count()/data.row_id.unique().shape[0] * 100),2)) . 15.4 4.09 3.83 . print(data.shape) print(data.row_id.unique().shape) . (500000, 23) (500000,) . data.describe().round(2) . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender accepted . count 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 460052.00 | 477535.00 | 477534.00 | 477560.00 | 477486.00 | 477435.00 | 477470.00 | 500000.00 | 500000.0 | . mean 249999.50 | 1.37 | 1.05 | 2.07 | 1.11 | 221.75 | 2.76 | 181.61 | 23.73 | 144.54 | 2.04 | 4.79 | 1.46 | 102.39 | 5416.83 | 31.62 | 69235.60 | 91.83 | 1427.72 | 1886.15 | 3720.12 | 0.5 | . std 144337.71 | 0.69 | 0.23 | 0.95 | 0.33 | 590.64 | 0.54 | 138.46 | 15.98 | 100.24 | 0.51 | 1.02 | 0.68 | 153.53 | 2728.14 | 26.33 | 14810.06 | 14.21 | 737.56 | 914.12 | 1838.31 | 0.5 | . min 0.00 | 1.00 | 1.00 | 1.00 | 1.00 | 1.00 | 1.00 | -1.00 | -1.00 | -1.00 | 1.00 | 1.00 | 1.00 | 1.00 | 14.00 | 0.53 | 17858.00 | 3.98 | 4.00 | 1.00 | 0.00 | 0.0 | . 25% 124999.75 | 1.00 | 1.00 | 1.00 | 1.00 | 93.00 | 3.00 | 25.00 | 6.00 | 57.00 | 2.00 | 5.00 | 1.00 | 47.00 | 3744.00 | 10.70 | 59731.00 | 88.07 | 944.00 | 1301.00 | 2442.00 | 0.0 | . 50% 249999.50 | 1.00 | 1.00 | 2.00 | 1.00 | 162.00 | 3.00 | 192.00 | 26.00 | 131.00 | 2.00 | 5.00 | 1.00 | 74.00 | 4975.00 | 22.90 | 67526.00 | 100.00 | 1327.00 | 1753.00 | 3731.00 | 1.0 | . 75% 374999.25 | 2.00 | 1.00 | 3.00 | 1.00 | 266.00 | 3.00 | 314.00 | 37.00 | 246.00 | 2.00 | 5.00 | 2.00 | 117.00 | 6467.00 | 46.02 | 75351.00 | 100.00 | 1780.00 | 2309.00 | 5436.00 | 1.0 | . max 499999.00 | 4.00 | 3.00 | 3.00 | 3.00 | 100878.00 | 3.00 | 408.00 | 52.00 | 324.00 | 4.00 | 7.00 | 4.00 | 10139.00 | 37097.00 | 100.00 | 125248.00 | 100.00 | 8771.00 | 13623.00 | 6508.00 | 1.0 | . Since the exist some missing data. We use the median of the data to fill the missing values. . data_median= data.median() data_median . row_id 249999.500 loan_type 1.000 property_type 1.000 loan_purpose 2.000 occupancy 1.000 loan_amount 162.000 preapproval 3.000 msa_md 192.000 state_code 26.000 county_code 131.000 applicant_ethnicity 2.000 applicant_race 5.000 applicant_sex 1.000 applicant_income 74.000 population 4975.000 minority_population_pct 22.901 ffiecmedian_family_income 67526.000 tract_to_msa_md_income_pct 100.000 number_of_owner-occupied_units 1327.000 number_of_1_to_4_family_units 1753.000 lender 3731.000 co_applicant 0.000 accepted 1.000 dtype: float64 . final_median= final.median() final_median . row_id 249999.500 loan_type 1.000 property_type 1.000 loan_purpose 2.000 occupancy 1.000 loan_amount 162.000 preapproval 3.000 msa_md 192.000 state_code 26.000 county_code 131.000 applicant_ethnicity 2.000 applicant_race 5.000 applicant_sex 1.000 applicant_income 74.000 population 4975.000 minority_population_pct 22.955 ffiecmedian_family_income 67514.000 tract_to_msa_md_income_pct 100.000 number_of_owner-occupied_units 1326.000 number_of_1_to_4_family_units 1753.000 lender 3713.000 co_applicant 0.000 dtype: float64 . data.fillna(data_median,inplace=True) data.shape . (500000, 23) . final.fillna(data_median,inplace=True) final.shape . (500000, 22) . (data.isnull().sum()/ data.row_id.unique().shape[0] * 100).round(2) . row_id 0.0 loan_type 0.0 property_type 0.0 loan_purpose 0.0 occupancy 0.0 loan_amount 0.0 preapproval 0.0 msa_md 0.0 state_code 0.0 county_code 0.0 applicant_ethnicity 0.0 applicant_race 0.0 applicant_sex 0.0 applicant_income 0.0 population 0.0 minority_population_pct 0.0 ffiecmedian_family_income 0.0 tract_to_msa_md_income_pct 0.0 number_of_owner-occupied_units 0.0 number_of_1_to_4_family_units 0.0 lender 0.0 co_applicant 0.0 accepted 0.0 dtype: float64 . (final.isnull().sum()/ final.row_id.unique().shape[0] * 100).round(2) . row_id 0.0 loan_type 0.0 property_type 0.0 loan_purpose 0.0 occupancy 0.0 loan_amount 0.0 preapproval 0.0 msa_md 0.0 state_code 0.0 county_code 0.0 applicant_ethnicity 0.0 applicant_race 0.0 applicant_sex 0.0 applicant_income 0.0 population 0.0 minority_population_pct 0.0 ffiecmedian_family_income 0.0 tract_to_msa_md_income_pct 0.0 number_of_owner-occupied_units 0.0 number_of_1_to_4_family_units 0.0 lender 0.0 co_applicant 0.0 dtype: float64 . data.shape . (500000, 23) . accepted_rate= data.accepted.value_counts()/data.shape[0] accepted_rate . 1 0.500228 0 0.499772 Name: accepted, dtype: float64 . data.describe().round(2) . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender accepted . count 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.00 | 500000.0 | . mean 249999.50 | 1.37 | 1.05 | 2.07 | 1.11 | 221.75 | 2.76 | 181.61 | 23.73 | 144.54 | 2.04 | 4.79 | 1.46 | 100.12 | 5396.98 | 31.23 | 69158.88 | 92.20 | 1423.17 | 1880.15 | 3720.12 | 0.5 | . std 144337.71 | 0.69 | 0.23 | 0.95 | 0.33 | 590.64 | 0.54 | 138.46 | 15.98 | 100.24 | 0.51 | 1.02 | 0.68 | 147.47 | 2667.72 | 25.80 | 14478.23 | 13.99 | 721.03 | 893.72 | 1838.31 | 0.5 | . min 0.00 | 1.00 | 1.00 | 1.00 | 1.00 | 1.00 | 1.00 | -1.00 | -1.00 | -1.00 | 1.00 | 1.00 | 1.00 | 1.00 | 14.00 | 0.53 | 17858.00 | 3.98 | 4.00 | 1.00 | 0.00 | 0.0 | . 25% 124999.75 | 1.00 | 1.00 | 1.00 | 1.00 | 93.00 | 3.00 | 25.00 | 6.00 | 57.00 | 2.00 | 5.00 | 1.00 | 49.00 | 3805.00 | 11.19 | 60071.00 | 89.14 | 963.00 | 1323.00 | 2442.00 | 0.0 | . 50% 249999.50 | 1.00 | 1.00 | 2.00 | 1.00 | 162.00 | 3.00 | 192.00 | 26.00 | 131.00 | 2.00 | 5.00 | 1.00 | 74.00 | 4975.00 | 22.90 | 67526.00 | 100.00 | 1327.00 | 1753.00 | 3731.00 | 1.0 | . 75% 374999.25 | 2.00 | 1.00 | 3.00 | 1.00 | 266.00 | 3.00 | 314.00 | 37.00 | 246.00 | 2.00 | 5.00 | 2.00 | 112.00 | 6379.00 | 44.49 | 74714.25 | 100.00 | 1754.00 | 2275.00 | 5436.00 | 1.0 | . max 499999.00 | 4.00 | 3.00 | 3.00 | 3.00 | 100878.00 | 3.00 | 408.00 | 52.00 | 324.00 | 4.00 | 7.00 | 4.00 | 10139.00 | 37097.00 | 100.00 | 125248.00 | 100.00 | 8771.00 | 13623.00 | 6508.00 | 1.0 | . accepted_Summary= data.groupby(&#39;accepted&#39;) accepted_Summary.mean() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant . accepted . 0 249936.842896 | 1.353433 | 1.066310 | 2.191667 | 1.102399 | 194.352733 | 2.755372 | 170.484961 | 22.279283 | 139.265501 | 2.031226 | 4.740073 | 1.488403 | 89.696290 | 5328.818777 | 33.201373 | 68142.082690 | 91.293288 | 1393.644762 | 1869.383779 | 3704.499764 | 0.350492 | . 1 250062.099986 | 1.379107 | 1.029007 | 1.942066 | 1.116775 | 249.128605 | 2.774063 | 192.718844 | 25.173245 | 149.813813 | 2.041225 | 4.833056 | 1.436369 | 110.536831 | 5465.083798 | 29.251766 | 70174.743021 | 93.106654 | 1452.674053 | 1890.901325 | 3735.728684 | 0.449567 | . corr=data.drop([&#39;row_id&#39;,&#39;county_code&#39;,&#39;state_code&#39;], axis=1).corr(method=&#39;spearman&#39;).round(2) fig= plt.figure(figsize=(20,10)) colormap = sns.diverging_palette(220, 10, as_cmap=True) sns.heatmap(corr, cmap=colormap, annot=True) plt.xticks(rotation=45) plt.xticks(range(len(corr.columns)), corr.columns) plt.yticks(range(len(corr.columns)), corr.columns) plt.title(&#39;Spearman Correlation Heatmap&#39;) plt.show() plt.savefig(&#39;image1.png&#39;) . &lt;Figure size 432x288 with 0 Axes&gt; . corr.style.background_gradient().set_precision(2) . loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant accepted . loan_type 1 | -0.07 | -0.11 | -0.18 | 0.06 | -0.14 | -0.01 | -0.06 | -0.03 | -0.05 | -0.17 | 0.05 | 0.05 | -0.06 | -0.04 | 0.03 | 0.05 | -0.03 | -0.03 | 0.02 | . property_type -0.07 | 1 | -0.13 | 0.04 | -0.18 | 0.05 | -0.1 | 0.07 | 0.04 | 0.05 | -0.16 | -0.01 | -0.03 | -0.11 | -0.06 | -0.01 | 0.03 | -0.05 | -0.02 | -0.1 | . loan_purpose -0.11 | -0.13 | 1 | 0 | 0.02 | 0.52 | 0.08 | 0.03 | 0.03 | 0.01 | 0.05 | -0 | 0.03 | 0.05 | -0.02 | -0.01 | -0.02 | 0.05 | 0.01 | -0.13 | . occupancy -0.18 | 0.04 | 0 | 1 | -0.03 | 0.04 | -0.01 | 0.09 | 0.06 | 0.05 | 0.14 | -0.06 | 0.04 | -0.03 | -0.08 | -0.1 | -0.03 | 0 | -0.01 | 0.02 | . loan_amount 0.06 | -0.18 | 0.02 | -0.03 | 1 | -0.07 | 0.1 | 0.04 | -0 | -0.1 | 0.54 | 0.06 | 0.05 | 0.31 | 0.25 | 0.04 | -0.06 | 0.03 | 0.16 | 0.17 | . preapproval -0.14 | 0.05 | 0.52 | 0.04 | -0.07 | 1 | 0.11 | 0.02 | 0.02 | 0.02 | 0.02 | -0.01 | 0.02 | 0 | -0.07 | -0.02 | -0.01 | -0 | 0.01 | -0.02 | . msa_md -0.01 | -0.1 | 0.08 | -0.01 | 0.1 | 0.11 | 1 | -0.02 | -0.02 | 0 | 0.09 | 0.06 | 0.12 | 0.31 | -0.05 | 0.03 | -0.06 | 0.02 | -0.01 | 0.09 | . applicant_ethnicity -0.06 | 0.07 | 0.03 | 0.09 | 0.04 | 0.02 | -0.02 | 1 | 0.41 | 0.34 | 0.08 | -0.04 | -0.16 | 0.07 | 0.06 | 0.03 | 0.02 | 0.01 | -0.12 | -0 | . applicant_race -0.03 | 0.04 | 0.03 | 0.06 | -0 | 0.02 | -0.02 | 0.41 | 1 | 0.28 | 0.03 | -0.02 | -0.16 | -0.04 | 0.04 | 0.02 | 0.02 | 0.01 | -0.08 | 0.02 | . applicant_sex -0.05 | 0.05 | 0.01 | 0.05 | -0.1 | 0.02 | 0 | 0.34 | 0.28 | 1 | -0.13 | -0.02 | 0.06 | 0.02 | -0.05 | -0.04 | -0.03 | 0.02 | -0.29 | -0.05 | . applicant_income -0.17 | -0.16 | 0.05 | 0.14 | 0.54 | 0.02 | 0.09 | 0.08 | 0.03 | -0.13 | 1 | 0.03 | -0.04 | 0.23 | 0.24 | 0.05 | -0.03 | 0.02 | 0.3 | 0.18 | . population 0.05 | -0.01 | -0 | -0.06 | 0.06 | -0.01 | 0.06 | -0.04 | -0.02 | -0.02 | 0.03 | 1 | 0.11 | 0.02 | 0.14 | 0.79 | 0.78 | 0 | 0.02 | 0.02 | . minority_population_pct 0.05 | -0.03 | 0.03 | 0.04 | 0.05 | 0.02 | 0.12 | -0.16 | -0.16 | 0.06 | -0.04 | 0.11 | 1 | 0.05 | -0.3 | -0.24 | -0.19 | 0.02 | -0.1 | -0.07 | . ffiecmedian_family_income -0.06 | -0.11 | 0.05 | -0.03 | 0.31 | 0 | 0.31 | 0.07 | -0.04 | 0.02 | 0.23 | 0.02 | 0.05 | 1 | -0.02 | 0 | -0.15 | 0.02 | 0.02 | 0.07 | . tract_to_msa_md_income_pct -0.04 | -0.06 | -0.02 | -0.08 | 0.25 | -0.07 | -0.05 | 0.06 | 0.04 | -0.05 | 0.24 | 0.14 | -0.3 | -0.02 | 1 | 0.36 | 0.18 | 0.01 | 0.09 | 0.06 | . number_of_owner-occupied_units 0.03 | -0.01 | -0.01 | -0.1 | 0.04 | -0.02 | 0.03 | 0.03 | 0.02 | -0.04 | 0.05 | 0.79 | -0.24 | 0 | 0.36 | 1 | 0.87 | -0 | 0.05 | 0.04 | . number_of_1_to_4_family_units 0.05 | 0.03 | -0.02 | -0.03 | -0.06 | -0.01 | -0.06 | 0.02 | 0.02 | -0.03 | -0.03 | 0.78 | -0.19 | -0.15 | 0.18 | 0.87 | 1 | -0.01 | 0.03 | 0 | . lender -0.03 | -0.05 | 0.05 | 0 | 0.03 | -0 | 0.02 | 0.01 | 0.01 | 0.02 | 0.02 | 0 | 0.02 | 0.02 | 0.01 | -0 | -0.01 | 1 | 0 | 0.01 | . co_applicant -0.03 | -0.02 | 0.01 | -0.01 | 0.16 | 0.01 | -0.01 | -0.12 | -0.08 | -0.29 | 0.3 | 0.02 | -0.1 | 0.02 | 0.09 | 0.05 | 0.03 | 0 | 1 | 0.1 | . accepted 0.02 | -0.1 | -0.13 | 0.02 | 0.17 | -0.02 | 0.09 | -0 | 0.02 | -0.05 | 0.18 | 0.02 | -0.07 | 0.07 | 0.06 | 0.04 | 0 | 0.01 | 0.1 | 1 | . corr_with_acc=data.drop([&#39;row_id&#39;,&#39;county_code&#39;,&#39;state_code&#39;], axis=1).corr(method=&#39;spearman&#39;)[&#39;accepted&#39;].sort_values(ascending=False) plt.figure(figsize=(14,6)) corr_with_acc.drop(&quot;accepted&quot;).plot.bar() plt.show() plt.savefig(&#39;image8.png&#39;) . &lt;Figure size 432x288 with 0 Axes&gt; . cat_vars=[&#39;loan_type&#39;,&#39;property_type&#39;,&#39;loan_purpose&#39;,&#39;occupancy&#39;,&#39;preapproval&#39;,&#39;applicant_sex&#39;,&#39;co_applicant&#39;, &#39;applicant_sex&#39;,&#39;applicant_race&#39;,&#39;applicant_ethnicity&#39;,&#39;msa_md&#39;,&#39;state_code&#39;,&#39;county_code&#39;] num_vars=[&#39;loan_amount&#39;,&#39;population&#39;,&#39;applicant_income&#39;,&#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;,&#39;number_of_owner-occupied_units&#39;,&#39;number_of_1_to_4_family_units&#39;] . def plot_voilin(combined, cols, col_x= &#39;accepted&#39;): fig, ax = plt.subplots(nrows=2, ncols=4, figsize=(30, 10)) for col, subplot in zip(cols, ax.flatten()): sns.set_style(&quot;whitegrid&quot;) sns.violinplot(col_x, col, data=combined,ax=subplot) for label in subplot.get_xticklabels(): label.set_rotation(90) #voilin plot for numerical variable plot_voilin(data, num_vars) plt.savefig(&#39;image1.png&#39;) . def plot_box(combined, cols, col_x= &#39;accepted&#39;): fig, ax = plt.subplots(nrows=2, ncols=4, figsize=(30, 10)) for col, subplot in zip(cols, ax.flatten()): sns.set_style(&quot;whitegrid&quot;) sns.boxplot(col_x, col, data=combined,ax=subplot) for label in subplot.get_xticklabels(): label.set_rotation(90) #voilin plot for numerical variable plot_box(data, num_vars) plt.savefig(&#39;image2.png&#39;) . def plot_den_hist(combined, cols, bins=10, hist= False): fig, ax = plt.subplots(nrows=2, ncols=4, figsize=(20, 25)) for col, subplot in zip(cols, ax.flatten()): sns.distplot(combined[col], bins= bins, rug=True, hist=hist, ax=subplot) for label in subplot.get_xticklabels(): label.set_rotation(0) #KDE plot for numerical variable, histogram not enabled plot_den_hist(data, num_vars) plt.savefig(&#39;image3.png&#39;) . plot_den_hist(data, num_vars, hist=True) plt.savefig(&#39;image3b.png&#39;) . def plot_bar(cat_cols): fig, ax = plt.subplots(nrows=2, ncols=5, figsize=(30, 10)) for col, subplot in zip(cat_cols, ax.flatten()): sns.countplot(data[col],hue=data[&#39;accepted&#39;],ax=subplot) for label in subplot.get_xticklabels(): label.set_rotation(90) # plotting bar graph for categorical variables plot_bar(cat_vars) plt.savefig(&#39;image5.png&#39;) . data[num_vars].hist(bins=25, figsize=(20, 10), layout=(4, 4)); plt.savefig(&#39;image6.png&#39;) . From the graph, it can be seen that all data features are skwed except the ffiecmedian_family_income. To fix this issue we apply log to the data features skewed. . Skewness is the measure of symmetry of a distrubution. For a normal distubution skewness=0 and thus it is symmetrical. When data is skewed towards the right, then it is a postive skew otherwise is viceversa. . Skewness between 0 to $ pm$ 5= acceptable | Skewness between $ pm$ 0.5 to $ pm$ 1= a problem | skewness between $ pm$ 1 or more= utmost | data.skew(axis=0) . row_id 1.286588e-17 loan_type 1.864712e+00 property_type 5.196600e+00 loan_purpose -1.333652e-01 occupancy 2.871840e+00 loan_amount 7.655279e+01 preapproval -2.242003e+00 msa_md 1.353241e-02 state_code -5.974008e-02 county_code 2.309361e-01 applicant_ethnicity 5.802958e-01 applicant_race -1.583676e+00 applicant_sex 1.370674e+00 applicant_income 2.317498e+01 population 2.947782e+00 minority_population_pct 1.068839e+00 ffiecmedian_family_income 8.063549e-01 tract_to_msa_md_income_pct -2.035543e+00 number_of_owner-occupied_units 1.942059e+00 number_of_1_to_4_family_units 2.080321e+00 lender -2.196283e-01 co_applicant 4.080284e-01 accepted -9.120028e-04 dtype: float64 . import scipy.stats as ss def cramers_v(x, y): confusion_matrix = pd.crosstab(x,y) chi2 = ss.chi2_contingency(confusion_matrix)[0] n = confusion_matrix.sum().sum() phi2 = chi2/n r,k = confusion_matrix.shape phi2corr = max(0, phi2-((k-1)*(r-1))/(n-1)) rcorr = r-((r-1)**2)/(n-1) kcorr = k-((k-1)**2)/(n-1) return np.sqrt(phi2corr/min((kcorr-1),(rcorr-1))) # function to print categorical variables after running it through the cramers_v dunction def print_crammer_values(data, cat_features, cats_x= &#39;accepted&#39;): for cat_ in cat_features: print(cat_+ &quot;: &quot;+ str(cramers_v(data[cat_],data[cats_x]).round(2))) # calculating for correlation between categorical variable and target variable print_crammer_values(data, cat_vars) . loan_type: 0.02 property_type: 0.11 loan_purpose: 0.17 occupancy: 0.03 preapproval: 0.15 applicant_sex: 0.09 co_applicant: 0.1 applicant_sex: 0.09 applicant_race: 0.15 applicant_ethnicity: 0.11 msa_md: 0.17 state_code: 0.21 county_code: 0.2 . # measuring kurtosis data.kurtosis(axis=0) . row_id -1.200000 loan_type 2.707997 property_type 29.022540 loan_purpose -1.874865 occupancy 7.561584 loan_amount 9385.071465 preapproval 3.913370 msa_md -1.491417 state_code -1.361784 county_code -1.234460 applicant_ethnicity 2.691639 applicant_race 2.661800 applicant_sex 1.370864 applicant_income 1062.740924 population 18.060147 minority_population_pct 0.179010 ffiecmedian_family_income 1.302638 tract_to_msa_md_income_pct 3.749475 number_of_owner-occupied_units 9.540237 number_of_1_to_4_family_units 12.029859 lender -1.105622 co_applicant -1.833520 accepted -2.000007 dtype: float64 . data.columns . Index([&#39;row_id&#39;, &#39;loan_type&#39;, &#39;property_type&#39;, &#39;loan_purpose&#39;, &#39;occupancy&#39;, &#39;loan_amount&#39;, &#39;preapproval&#39;, &#39;msa_md&#39;, &#39;state_code&#39;, &#39;county_code&#39;, &#39;applicant_ethnicity&#39;, &#39;applicant_race&#39;, &#39;applicant_sex&#39;, &#39;applicant_income&#39;, &#39;population&#39;, &#39;minority_population_pct&#39;, &#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;, &#39;number_of_owner-occupied_units&#39;, &#39;number_of_1_to_4_family_units&#39;, &#39;lender&#39;, &#39;co_applicant&#39;, &#39;accepted&#39;], dtype=&#39;object&#39;) . sns.lmplot(x=&#39;applicant_income&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e1cc8f110&gt; . sns.lmplot(x=&#39;population&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d78decd10&gt; . sns.lmplot(x=&#39;lender&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d9cebc2d0&gt; . sns.lmplot(x=&#39;minority_population_pct&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e1cc28dd0&gt; . sns.lmplot(x=&#39;ffiecmedian_family_income&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e00f7ca10&gt; . sns.lmplot(x=&#39;tract_to_msa_md_income_pct&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e1cf2a210&gt; . sns.lmplot(x=&#39;number_of_owner-occupied_units&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8ddddb7510&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;loan_amount&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e2444bb90&gt; . sns.lmplot(x=&#39;applicant_income&#39;,y=&#39;population&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e1cf30f10&gt; . sns.lmplot(x=&#39;minority_population_pct&#39;,y=&#39;population&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8ca7a3d0&gt; . sns.lmplot(x=&#39;ffiecmedian_family_income&#39;,y=&#39;population&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e1cc90ed0&gt; . sns.lmplot(x=&#39;tract_to_msa_md_income_pct&#39;,y=&#39;population&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8c5bce90&gt; . sns.lmplot(x=&#39;number_of_owner-occupied_units&#39;,y=&#39;population&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8ca4cf10&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;population&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8c675290&gt; . sns.lmplot(x=&#39;minority_population_pct&#39;,y=&#39;applicant_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8c6da490&gt; . sns.lmplot(x=&#39;ffiecmedian_family_income&#39;,y=&#39;applicant_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8c791410&gt; . sns.lmplot(x=&#39;tract_to_msa_md_income_pct&#39;,y=&#39;applicant_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d9ce91990&gt; . sns.lmplot(x=&#39;number_of_owner-occupied_units&#39;,y=&#39;applicant_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d9ce98750&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;applicant_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e0a287c90&gt; . sns.lmplot(x=&#39;ffiecmedian_family_income&#39;,y=&#39;minority_population_pct&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e0a28a710&gt; . sns.lmplot(x=&#39;tract_to_msa_md_income_pct&#39;,y=&#39;minority_population_pct&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8c4a8310&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;minority_population_pct&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d790034d0&gt; . sns.lmplot(x=&#39;tract_to_msa_md_income_pct&#39;,y=&#39;ffiecmedian_family_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d79047e90&gt; . sns.lmplot(x=&#39;number_of_owner-occupied_units&#39;,y=&#39;ffiecmedian_family_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8e0a295d90&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;ffiecmedian_family_income&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d8c85d310&gt; . sns.lmplot(x=&#39;number_of_owner-occupied_units&#39;,y=&#39;tract_to_msa_md_income_pct&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8dcd9f5510&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;tract_to_msa_md_income_pct&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8dbd682710&gt; . sns.lmplot(x=&#39;number_of_1_to_4_family_units&#39;,y=&#39;number_of_owner-occupied_units&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d68a169d0&gt; . sns.lmplot(x=&#39;number_of_owner-occupied_units&#39;,y=&#39;minority_population_pct&#39;, data= data, fit_reg=False, hue=&#39;accepted&#39;) . &lt;seaborn.axisgrid.FacetGrid at 0x7f8d893a72d0&gt; . . Feature Engineering . From EDA we identified some of the features are higher skewed. This can affect our classifcation model. . Here we extract some features from the dataset and add to the datasets . #caculating the loan amount per applicant ratio LAPDR data[&#39;LDPR&#39;]= (data[&#39;applicant_income&#39;])/ (data[&#39;loan_amount&#39;]) #caculating the lenders x loantype data[&#39;LLT&#39;]= (data[&#39;lender&#39;])* (data[&#39;loan_type&#39;]) # caculating the property x loan purpose data[&#39;PTLP&#39;]= (data[&#39;property_type&#39;])* (data[&#39;loan_purpose&#39;]) . #caculating the loan amount per applicant ratio LAPDR final[&#39;LDPR&#39;]= (final[&#39;applicant_income&#39;])/ (final[&#39;loan_amount&#39;]) #caculating the lenders x loantype final[&#39;LLT&#39;]= (final[&#39;lender&#39;])* (final[&#39;loan_type&#39;]) # caculating the property x loan purpose final[&#39;PTLP&#39;]= (final[&#39;property_type&#39;])* (final[&#39;loan_purpose&#39;]) . #ie.msd_md acceptance Rate Mean on test data MSDARM= pd.DataFrame(data.groupby([&quot;msa_md&quot;])[&quot;accepted&quot;].mean()) MSDARM.shape . (409, 1) . #train dataset LARM= pd.DataFrame(data.groupby([&#39;lender&#39;])[&#39;accepted&#39;].mean()) data= pd.merge(data,LARM,how=&#39;left&#39;, on=&#39;lender&#39;) . final= pd.merge(final,LARM,how=&#39;left&#39;, on=&#39;lender&#39;) . # Renaming certain columns for better readability data.columns = [&#39;row_id&#39;, &#39;loan_type&#39;, &#39;property_type&#39;, &#39;loan_purpose&#39;, &#39;occupancy&#39;,&#39;loan_amount&#39;, &#39;preapproval&#39;, &#39;msa_md&#39;, &#39;state_code&#39;, &#39;county_code&#39;,&#39;applicant_ethnicity&#39;, &#39;applicant_race&#39;, &#39;applicant_sex&#39;,&#39;applicant_income&#39;, &#39;population&#39;, &#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;, &#39;number_of_owner-occupied_units&#39;, &#39;number_of_1_to_4_family_units&#39;,&#39;lender&#39;, &#39;co_applicant&#39;, &#39;accepted&#39;, &#39;LDPR&#39;,&#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;] . # Renaming certain columns for better readability final.columns = [&#39;row_id&#39;, &#39;loan_type&#39;, &#39;property_type&#39;, &#39;loan_purpose&#39;, &#39;occupancy&#39;,&#39;loan_amount&#39;, &#39;preapproval&#39;, &#39;msa_md&#39;, &#39;state_code&#39;, &#39;county_code&#39;,&#39;applicant_ethnicity&#39;, &#39;applicant_race&#39;, &#39;applicant_sex&#39;,&#39;applicant_income&#39;, &#39;population&#39;, &#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;, &#39;number_of_owner-occupied_units&#39;, &#39;number_of_1_to_4_family_units&#39;,&#39;lender&#39;, &#39;co_applicant&#39;, &#39;LDPR&#39;,&#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;] . data= pd.merge(data,MSDARM,how=&#39;left&#39;, on=&#39;msa_md&#39;) . final= pd.merge(final,MSDARM,how=&#39;left&#39;, on=&#39;msa_md&#39;) . # Renaming certain columns for better readability data.columns = [&#39;row_id&#39;, &#39;loan_type&#39;, &#39;property_type&#39;, &#39;loan_purpose&#39;, &#39;occupancy&#39;,&#39;loan_amount&#39;, &#39;preapproval&#39;, &#39;msa_md&#39;, &#39;state_code&#39;, &#39;county_code&#39;,&#39;applicant_ethnicity&#39;, &#39;applicant_race&#39;, &#39;applicant_sex&#39;,&#39;applicant_income&#39;, &#39;population&#39;, &#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;, &#39;number_of_owner-occupied_units&#39;, &#39;number_of_1_to_4_family_units&#39;,&#39;lender&#39;, &#39;co_applicant&#39;, &#39;accepted&#39;, &#39;LDPR&#39;,&#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;,&#39;MSDARM&#39;] . # Renaming certain columns for better readability final.columns = [&#39;row_id&#39;, &#39;loan_type&#39;, &#39;property_type&#39;, &#39;loan_purpose&#39;, &#39;occupancy&#39;,&#39;loan_amount&#39;, &#39;preapproval&#39;, &#39;msa_md&#39;, &#39;state_code&#39;, &#39;county_code&#39;,&#39;applicant_ethnicity&#39;, &#39;applicant_race&#39;, &#39;applicant_sex&#39;,&#39;applicant_income&#39;, &#39;population&#39;, &#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;, &#39;number_of_owner-occupied_units&#39;, &#39;number_of_1_to_4_family_units&#39;,&#39;lender&#39;, &#39;co_applicant&#39;, &#39;LDPR&#39;,&#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;,&#39;MSDARM&#39;] . cat_vars=[&#39;loan_type&#39;,&#39;property_type&#39;,&#39;loan_purpose&#39;,&#39;occupancy&#39;,&#39;preapproval&#39;,&#39;applicant_sex&#39;,&#39;co_applicant&#39;, &#39;applicant_sex&#39;,&#39;applicant_race&#39;,&#39;applicant_ethnicity&#39;,&#39;msa_md&#39;,&#39;state_code&#39;,&#39;county_code&#39;] num_vars=[&#39;loan_amount&#39;,&#39;population&#39;,&#39;applicant_income&#39;,&#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;,&#39;number_of_owner-occupied_units&#39;,&#39;number_of_1_to_4_family_units&#39;, &#39;LDPR&#39;,&#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;,&#39;MSDARM&#39;] . # pairwise plot for all variable origanal variable %config InlineBackend.figure_format = &#39;png&#39; g= sns.PairGrid(data=data, hue=&quot;accepted&quot;) g.map(plt.scatter) plt.savefig(&#39;image9.png&#39;)num_vars_=[&#39;loan_amount&#39;,&#39;population&#39;,&#39;applicant_income&#39;,&#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;,&#39;number_of_owner-occupied_units&#39;,&#39;number_of_1_to_4_family_units&#39;, &#39;LDPR&#39;,&#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;,&#39;MSDARM&#39;,&#39;accepted&#39;] # pairwise plot for all variable origanal variable %config InlineBackend.figure_format = &#39;png&#39; sns.pairplot(data[num_vars_]) plt.savefig(&#39;image10.png&#39;)%config InlineBackend.figure_format = &#39;png&#39; fig= plt.figure(figsize=(12,10)) sns.pairplot(data[num_vars], palette=&quot;Set2&quot;,diag_kind=&quot;kde&quot;, height=2).map_upper(sns.kdeplot, cmap=&quot;Blues_d&quot;) plt.savefig(&#39;image11.png&#39;) . Class Balance . Mortgage acceptance rate: 50% . data.accepted.value_counts(1)*100 . 1 50.0228 0 49.9772 Name: accepted, dtype: float64 . is_loan_accepted= data.accepted== 1 loan_accepted= data[is_loan_accepted] loan_is_not_accepted= data.accepted== 0 loan_not_accepted= data[loan_is_not_accepted] print(loan_accepted.shape) print(loan_not_accepted.shape) . (250114, 28) (249886, 28) . sns.countplot(&#39;accepted&#39;, data = data) plt.title(&#39;Distribution of Loan Applicant&#39;) plt.savefig(&#39;image4.png&#39;) . data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 500000 entries, 0 to 499999 Data columns (total 28 columns): row_id 500000 non-null int64 loan_type 500000 non-null int64 property_type 500000 non-null int64 loan_purpose 500000 non-null int64 occupancy 500000 non-null int64 loan_amount 500000 non-null float64 preapproval 500000 non-null int64 msa_md 500000 non-null int64 state_code 500000 non-null int64 county_code 500000 non-null int64 applicant_ethnicity 500000 non-null int64 applicant_race 500000 non-null int64 applicant_sex 500000 non-null int64 applicant_income 500000 non-null float64 population 500000 non-null float64 minority_population_pct 500000 non-null float64 ffiecmedian_family_income 500000 non-null float64 tract_to_msa_md_income_pct 500000 non-null float64 number_of_owner-occupied_units 500000 non-null float64 number_of_1_to_4_family_units 500000 non-null float64 lender 500000 non-null int64 co_applicant 500000 non-null bool accepted 500000 non-null int64 LDPR 500000 non-null float64 LLT 500000 non-null int64 PTLP 500000 non-null int64 LARM 500000 non-null float64 MSDARM 500000 non-null float64 dtypes: bool(1), float64(11), int64(16) memory usage: 127.3 MB . final.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 500000 entries, 0 to 499999 Data columns (total 27 columns): row_id 500000 non-null int64 loan_type 500000 non-null int64 property_type 500000 non-null int64 loan_purpose 500000 non-null int64 occupancy 500000 non-null int64 loan_amount 500000 non-null float64 preapproval 500000 non-null int64 msa_md 500000 non-null int64 state_code 500000 non-null int64 county_code 500000 non-null int64 applicant_ethnicity 500000 non-null int64 applicant_race 500000 non-null int64 applicant_sex 500000 non-null int64 applicant_income 500000 non-null float64 population 500000 non-null float64 minority_population_pct 500000 non-null float64 ffiecmedian_family_income 500000 non-null float64 tract_to_msa_md_income_pct 500000 non-null float64 number_of_owner-occupied_units 500000 non-null float64 number_of_1_to_4_family_units 500000 non-null float64 lender 500000 non-null int64 co_applicant 500000 non-null bool LDPR 500000 non-null float64 LLT 500000 non-null int64 PTLP 500000 non-null int64 LARM 499278 non-null float64 MSDARM 500000 non-null float64 dtypes: bool(1), float64(11), int64(15) memory usage: 103.5 MB . . Split Train/Test Set . Let&#39;s split our data into a train and test set. We&#39;ll fit our model with the train set and leave our test set for our last evaluation. . # Create the X and y set X = data.drop(&#39;accepted&#39;, axis=1) y = data.accepted . categorical_features_indices= np.where(X.dtypes != np.float)[0] categorical_features_indices . array([ 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 20, 21, 23, 24]) . # Define train and test X_train, X_test, y_train, y_test= train_test_split(X,y, test_size = 0.3, random_state = 42) print(X_train.shape,y_train.shape) print(X_test.shape,y_test.shape) . (350000, 27) (350000,) (150000, 27) (150000,) . y_train.head() . 226114 1 435187 1 294452 0 427864 0 188822 1 Name: accepted, dtype: int64 . X_train.head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant LDPR LLT PTLP LARM MSDARM . 226114 226114 | 1 | 1 | 1 | 1 | 52.0 | 3 | 383 | 25 | 49 | 2 | 5 | 1 | 40.0 | 4101.0 | 6.760 | 66693.0 | 88.103 | 1293.0 | 1647.0 | 2612 | False | 0.769231 | 2612 | 1 | 0.935484 | 0.464900 | . 435187 435187 | 1 | 1 | 3 | 1 | 291.0 | 3 | 358 | 32 | 259 | 2 | 5 | 1 | 195.0 | 3668.0 | 34.298 | 109805.0 | 99.295 | 645.0 | 642.0 | 3873 | True | 0.670103 | 3873 | 3 | 0.803419 | 0.523775 | . 294452 294452 | 1 | 1 | 3 | 1 | 692.0 | 3 | 350 | 38 | 233 | 2 | 5 | 1 | 312.0 | 5201.0 | 9.346 | 85651.0 | 100.000 | 1642.0 | 1766.0 | 5316 | False | 0.450867 | 5316 | 3 | 0.610101 | 0.627844 | . 427864 427864 | 1 | 1 | 2 | 1 | 49.0 | 3 | 205 | 2 | 124 | 2 | 5 | 1 | 40.0 | 2342.0 | 11.994 | 58003.0 | 100.000 | 700.0 | 1366.0 | 878 | True | 0.816327 | 878 | 2 | 0.428756 | 0.462359 | . 188822 188822 | 1 | 1 | 1 | 1 | 212.0 | 2 | 305 | 47 | 68 | 2 | 5 | 1 | 88.0 | 4786.0 | 17.743 | 75595.0 | 100.000 | 1480.0 | 1632.0 | 4791 | True | 0.415094 | 4791 | 1 | 0.806499 | 0.544391 | . x_predict= final x_predict.head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant LDPR LLT PTLP LARM MSDARM . 0 0 | 2 | 1 | 3 | 1 | 115.0 | 3 | 101 | 16 | 276 | 2 | 5 | 1 | 74.0 | 6329.0 | 59.536 | 69889.0 | 85.78 | 1874.0 | 2410.0 | 3791 | True | 0.643478 | 7582 | 3 | 0.785178 | 0.495576 | . 1 1 | 1 | 1 | 1 | 1 | 252.0 | 2 | 87 | 20 | 68 | 2 | 5 | 1 | 107.0 | 2473.0 | 8.050 | 65313.0 | 100.00 | 947.0 | 1214.0 | 2839 | True | 0.424603 | 2839 | 1 | 0.371434 | 0.607497 | . 2 2 | 1 | 1 | 1 | 1 | 270.0 | 1 | -1 | -1 | -1 | 2 | 1 | 2 | 119.0 | 4975.0 | 22.901 | 67526.0 | 100.00 | 1327.0 | 1753.0 | 4701 | False | 0.440741 | 4701 | 1 | 0.195064 | 0.338949 | . 3 3 | 2 | 1 | 1 | 1 | 179.0 | 2 | 376 | 20 | 11 | 2 | 2 | 2 | 44.0 | 4795.0 | 29.676 | 57766.0 | 100.00 | 1426.0 | 1765.0 | 2153 | True | 0.245810 | 4306 | 1 | 0.817891 | 0.527134 | . 4 4 | 2 | 1 | 1 | 1 | 36.0 | 2 | 254 | 48 | 156 | 3 | 6 | 3 | 32.0 | 5246.0 | 5.110 | 63332.0 | 100.00 | 1452.0 | 2092.0 | 5710 | False | 0.888889 | 11420 | 1 | 0.489632 | 0.547771 | . . Model Measurement . Metrics used for measurement include following: . Accuracy | AUC | Macro Precision | Macro Recall | F1 Score | . import sklearn.model_selection as ms import sklearn.metrics as sklm . def score_model(probs, threshold): return np.array([1 if x&gt; threshold else 0 for x in probs[:, 1]]) . def print_metrics(labels, probs, threshold): scores = score_model(probs, threshold) metrics = sklm.precision_recall_fscore_support(labels, scores) conf = sklm.confusion_matrix(labels, scores) print(&#39; Confusion Matrix&#39;) print(&#39; Score Positive Score Negative&#39;) print(&#39;Actual Positive %6d&#39; % conf[0,0] + &#39; %5d&#39; % conf[0,1]) print(&#39;Actual Negative %6d&#39; % conf[1,0] + &#39; %5d&#39; % conf[1,1]) print(&#39;&#39;) print(&#39;Accuracy %0.2f&#39; % sklm.accuracy_score(labels, scores)) print(&#39;AUC %0.2f&#39; % sklm.roc_auc_score(labels, probs[:,1])) print(&#39;Macro Precision %0.2f&#39; % float((float(metrics[0][0]) + float(metrics[0][1]))/2.0)) print(&#39;Macro Recall %0.2f&#39; % float((float(metrics[1][0]) + float(metrics[1][1]))/2.0)) print(&#39; &#39;) print(&#39; Positive Negative&#39;) print(&#39;Num Case %6d&#39; % metrics[3][0] + &#39; %6d&#39; % metrics[3][1]) print(&#39;Precision %6.2f&#39; % metrics[0][0] + &#39; %6.2f&#39; % metrics[0][1]) print(&#39;Recall %6.2f&#39; % metrics[1][0] + &#39; %6.2f&#39; % metrics[1][1]) print(&#39;F1 %6.2f&#39; % metrics[2][0] + &#39; %6.2f&#39; % metrics[2][1]) . def plot_auc(labels, probs, threshold): ## compute the false postive rate, true positive rate and threshold along with the AUC pl.style.use(&#39;ggplot&#39;) scores = score_model(probs, threshold) accuracy= sklm.accuracy_score(labels, scores) fpr, tpr, threshold = sklm.roc_curve(labels, probs[:,1]) auc = sklm.auc(fpr, tpr) ## plot the result plt.title(&#39;Reciever Operating Charateristic&#39;) plt.plot(fpr, tpr, color = &#39;orange&#39;, label = &#39;AUC = %0.2f&#39; %auc) plt.legend(loc = &#39;lower right&#39;) plt.plot([0,1],[0,1],&#39;r--&#39;) plt.xlim([0,1]) plt.ylim([0,1]) plt.ylabel(&#39;True Positive Rate&#39;) plt.xlabel(&#39;False Positive Rate&#39;) plt.title(&quot;Recieve Operating Characteristic (Accuracy= %0.2f)&quot; %accuracy) plt.show() . Train Three Models . Catboost Classifier | Xgboost Classifier | Decision Tree | import catboost as cb from catboost import CatBoostClassifier from xgboost import XGBClassifier from sklearn import tree from sklearn.model_selection import cross_val_score import matplotlib.pylab as pl . . Choose Which Sampling Technique to Use For Model . We all models listed above using a 5-fold cross-validation. . labels= data.accepted features= X fig= plt.figure(figsize=(12,10)) models= [CatBoostClassifier(depth=10,logging_level=&#39;Silent&#39;, random_seed=42), XGBClassifier(n_estimators=10, max_depth=4), tree.DecisionTreeClassifier(random_state= 42)] CV= 5 cv_df= pd.DataFrame(index= range(CV * len(models))) entries= [] for model in models: model_name= model.__class__.__name__ accuracies= cross_val_score(model, features, labels, scoring= &#39;accuracy&#39;, cv= CV) for fold_idx, accuracy in enumerate(accuracies): entries.append((model_name, fold_idx, accuracy)) cv_df= pd.DataFrame(entries, columns=[&#39;model_name&#39;, &#39;fold_idx&#39;, &#39;accuracy&#39;]) sns.boxplot(x= &#39;model_name&#39;, y= &#39;accuracy&#39;, data= cv_df) sns.stripplot(x= &#39;model_name&#39;, y= &#39;accuracy&#39;, data= cv_df, size= 8, jitter= True, edgecolor= &quot;gray&quot;, linewidth= 2) plt.show() print(cv_df.groupby(&#39;model_name&#39;).accuracy.mean()) . model_name CatBoostClassifier 0.726908 DecisionTreeClassifier 0.631850 XGBClassifier 0.708636 Name: accuracy, dtype: float64 . From the results above we can see catboost classifier out performs the other models. We move further to tune the catboost classifier model. . models= [CatBoostClassifier(depth=10,logging_level=&#39;Silent&#39;, random_seed=42), XGBClassifier(n_estimators=10, max_depth=4), tree.DecisionTreeClassifier(random_state= 42)] result_df= pd.DataFrame(columns=[&#39;classifiers&#39;, &#39;fpr&#39;,&#39;tpr&#39;,&#39;auc&#39;]) for model in models: model_name= model.__class__.__name__ model_fit=model.fit(X_train,y_train) y_prob= model_fit.predict_proba(X_test)[::,1] fpr, tpr, threshold = sklm.roc_curve(y_test, y_prob) auc = sklm.auc(fpr, tpr) result_df= result_df.append({&#39;model_name&#39;:model_name,&#39;fpr&#39;:fpr, &#39;tpr&#39;:tpr,&#39;auc&#39;:auc}, ignore_index=True) result_df.set_index(&#39;model_name&#39;, inplace=True) fig= plt.figure(figsize=(+8,6)) pl.style.use(&#39;ggplot&#39;) for i in result_df.index: plt.plot(result_df.loc[i][&#39;fpr&#39;], result_df.loc[i][&#39;tpr&#39;], label=&quot;{}, AUC={:.2f}&quot;.format(i, result_df.loc[i][&#39;auc&#39;])) plt.plot([0,1],[0,1], color=&#39;red&#39;,linestyle=&#39;--&#39;) plt.xticks(np.arange(0.0,1.1,step=0.1)) plt.xlabel(&quot;False Postive Rate&quot;, fontsize=15) plt.yticks(np.arange(0.0,1.1,step=0.1)) plt.ylabel(&quot;True Positive Rate&quot;,fontsize=15) plt.title(&quot;Reciever Operating Charateristic&quot;) plt.legend(prop={&#39;size&#39;:13}, loc=&#39;lower right&#39;) plt.show() . From the results above we can see catboost classifier out performs the other models in terms of AUC We move further to tune the catboost classifier model. With this and the results above we then to tune and improve the catboost classifier model. . Normalizing the features that are highly skewed to make it normally distributed and running the model to see its accuracy and auc . data_norm= data.copy() final_norm= final.copy() . data_norm.head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant accepted LDPR LLT PTLP LARM MSDARM . 0 0 | 3 | 1 | 1 | 1 | 70.0 | 3 | 18 | 37 | 246 | 2 | 5 | 1 | 24.0 | 6203.0 | 44.230 | 60588.0 | 50.933 | 716.0 | 2642.0 | 4536 | False | 1 | 0.342857 | 13608 | 1 | 0.837209 | 0.508505 | . 1 1 | 1 | 1 | 3 | 1 | 178.0 | 3 | 369 | 52 | 299 | 1 | 5 | 1 | 57.0 | 5774.0 | 15.905 | 54821.0 | 100.000 | 1622.0 | 2108.0 | 2458 | False | 0 | 0.320225 | 2458 | 3 | 0.168919 | 0.543021 | . 2 2 | 2 | 1 | 3 | 1 | 163.0 | 3 | 16 | 10 | 306 | 2 | 5 | 1 | 67.0 | 6094.0 | 61.270 | 67719.0 | 100.000 | 760.0 | 1048.0 | 5710 | False | 1 | 0.411043 | 11420 | 3 | 0.489632 | 0.508886 | . 3 3 | 1 | 1 | 1 | 1 | 155.0 | 1 | 305 | 47 | 180 | 2 | 5 | 1 | 105.0 | 6667.0 | 6.246 | 78439.0 | 100.000 | 2025.0 | 2299.0 | 5888 | True | 1 | 0.677419 | 5888 | 1 | 0.691964 | 0.544391 | . 4 4 | 1 | 1 | 1 | 1 | 305.0 | 3 | 24 | 37 | 20 | 2 | 3 | 2 | 71.0 | 6732.0 | 100.000 | 63075.0 | 82.200 | 1464.0 | 1847.0 | 289 | False | 1 | 0.232787 | 289 | 1 | 0.542994 | 0.524821 | . final_norm.head() . row_id loan_type property_type loan_purpose occupancy loan_amount preapproval msa_md state_code county_code applicant_ethnicity applicant_race applicant_sex applicant_income population minority_population_pct ffiecmedian_family_income tract_to_msa_md_income_pct number_of_owner-occupied_units number_of_1_to_4_family_units lender co_applicant LDPR LLT PTLP LARM MSDARM . 0 0 | 2 | 1 | 3 | 1 | 115.0 | 3 | 101 | 16 | 276 | 2 | 5 | 1 | 74.0 | 6329.0 | 59.536 | 69889.0 | 85.78 | 1874.0 | 2410.0 | 3791 | True | 0.643478 | 7582 | 3 | 0.785178 | 0.495576 | . 1 1 | 1 | 1 | 1 | 1 | 252.0 | 2 | 87 | 20 | 68 | 2 | 5 | 1 | 107.0 | 2473.0 | 8.050 | 65313.0 | 100.00 | 947.0 | 1214.0 | 2839 | True | 0.424603 | 2839 | 1 | 0.371434 | 0.607497 | . 2 2 | 1 | 1 | 1 | 1 | 270.0 | 1 | -1 | -1 | -1 | 2 | 1 | 2 | 119.0 | 4975.0 | 22.901 | 67526.0 | 100.00 | 1327.0 | 1753.0 | 4701 | False | 0.440741 | 4701 | 1 | 0.195064 | 0.338949 | . 3 3 | 2 | 1 | 1 | 1 | 179.0 | 2 | 376 | 20 | 11 | 2 | 2 | 2 | 44.0 | 4795.0 | 29.676 | 57766.0 | 100.00 | 1426.0 | 1765.0 | 2153 | True | 0.245810 | 4306 | 1 | 0.817891 | 0.527134 | . 4 4 | 2 | 1 | 1 | 1 | 36.0 | 2 | 254 | 48 | 156 | 3 | 6 | 3 | 32.0 | 5246.0 | 5.110 | 63332.0 | 100.00 | 1452.0 | 2092.0 | 5710 | False | 0.888889 | 11420 | 1 | 0.489632 | 0.547771 | . num_vars=[&#39;loan_amount&#39;,&#39;population&#39;,&#39;applicant_income&#39;,&#39;minority_population_pct&#39;,&#39;ffiecmedian_family_income&#39;, &#39;tract_to_msa_md_income_pct&#39;,&#39;number_of_owner-occupied_units&#39;,&#39;number_of_1_to_4_family_units&#39;,&#39;LDPR&#39;, &#39;LLT&#39;,&#39;PTLP&#39;,&#39;LARM&#39;,&#39;MSDARM&#39;] #plotting histogram numerical variables data_norm[num_vars].hist(bins=25, figsize=(30, 20), layout=(7, 3)); . data_norm.skew(axis=0) . row_id 1.286588e-17 loan_type 1.864712e+00 property_type 5.196600e+00 loan_purpose -1.333652e-01 occupancy 2.871840e+00 loan_amount 7.655279e+01 preapproval -2.242003e+00 msa_md 1.353241e-02 state_code -5.974008e-02 county_code 2.309361e-01 applicant_ethnicity 5.802958e-01 applicant_race -1.583676e+00 applicant_sex 1.370674e+00 applicant_income 2.317498e+01 population 2.947782e+00 minority_population_pct 1.068839e+00 ffiecmedian_family_income 8.063549e-01 tract_to_msa_md_income_pct -2.035543e+00 number_of_owner-occupied_units 1.942059e+00 number_of_1_to_4_family_units 2.080321e+00 lender -2.196283e-01 co_applicant 4.080284e-01 accepted -9.120028e-04 LDPR 8.941249e+01 LLT 1.676016e+00 PTLP 6.904792e-01 LARM -9.479196e-02 MSDARM -5.590501e-01 dtype: float64 . # We apply log(x+1) data_norm[&#39;log_loan_amount&#39;]= np.log(data_norm[&#39;loan_amount&#39;]+1) data_norm[&#39;log_LDPR&#39;]= np.log(data_norm[&#39;LDPR&#39;]+1) data_norm[&#39;log_PTLP&#39;]= np.log(data_norm[&#39;PTLP&#39;]+1) data_norm[&#39;log_applicant_income&#39;]= np.log(data_norm[&#39;applicant_income&#39;]+1) data_norm[&#39;log_population&#39;]= np.log(data_norm[&#39;population&#39;]+1) data_norm[&#39;log_minority_population_pct&#39;]= np.log(data_norm[&#39;minority_population_pct&#39;]+1) data_norm[&#39;log_ffiecmedian_family_income&#39;]= np.log(data_norm[&#39;ffiecmedian_family_income&#39;]+1) data_norm[&#39;log_number_of_owner_occupied_units&#39;]= np.log(data_norm[&#39;number_of_owner-occupied_units&#39;]+1) data_norm[&#39;log_number_of_1_to_4_family_units&#39;]= np.log(data_norm[&#39;number_of_1_to_4_family_units&#39;]) data_norm[&#39;pwr_tract_to_msa_md_income_pct&#39;] = np.power(data_norm[&#39;tract_to_msa_md_income_pct&#39;],10) data_norm[&#39;pwr_LLT&#39;]= np.power(data_norm[&#39;LLT&#39;],10) . num_vars_log= [&#39;log_loan_amount&#39;,&#39;log_LDPR&#39;,&#39;log_PTLP&#39;,&#39;log_applicant_income&#39;,&#39;log_population&#39;,&#39;log_minority_population_pct&#39;, &#39;log_ffiecmedian_family_income&#39;,&#39;log_number_of_owner_occupied_units&#39;,&#39;log_number_of_1_to_4_family_units&#39;, &#39;pwr_tract_to_msa_md_income_pct&#39;,&#39;pwr_LLT&#39;,] data_norm[num_vars_log].hist(bins=25, figsize=(30, 20), layout=(6, 2)); . data_norm.skew(axis=0) . row_id 1.286588e-17 loan_type 1.864712e+00 property_type 5.196600e+00 loan_purpose -1.333652e-01 occupancy 2.871840e+00 loan_amount 7.655279e+01 preapproval -2.242003e+00 msa_md 1.353241e-02 state_code -5.974008e-02 county_code 2.309361e-01 applicant_ethnicity 5.802958e-01 applicant_race -1.583676e+00 applicant_sex 1.370674e+00 applicant_income 2.317498e+01 population 2.947782e+00 minority_population_pct 1.068839e+00 ffiecmedian_family_income 8.063549e-01 tract_to_msa_md_income_pct -2.035543e+00 number_of_owner-occupied_units 1.942059e+00 number_of_1_to_4_family_units 2.080321e+00 lender -2.196283e-01 co_applicant 4.080284e-01 accepted -9.120028e-04 LDPR 8.941249e+01 LLT 1.676016e+00 PTLP 6.904792e-01 LARM -9.479196e-02 MSDARM -5.590501e-01 log_loan_amount -1.045326e+00 log_LDPR 3.109443e+00 log_PTLP -8.455082e-02 log_applicant_income 1.644426e-01 log_population -1.581668e-01 log_minority_population_pct -2.711568e-01 log_ffiecmedian_family_income -2.891652e-01 log_number_of_owner_occupied_units -1.100173e+00 log_number_of_1_to_4_family_units -1.615771e+00 pwr_tract_to_msa_md_income_pct -8.940395e-01 pwr_LLT 8.320281e-02 dtype: float64 . # Create the X and y set X_norm = data_norm.drop(&#39;accepted&#39;, axis=1) y_norm = data_norm.accepted . # Define train and test X_train_norm, X_test_norm, y_train_norm, y_test_norm= train_test_split(X_norm,y_norm, test_size = 0.3, random_state = 42) print(X_train_norm.shape,y_train_norm.shape) print(X_test_norm.shape,y_test_norm.shape) . (350000, 38) (350000,) (150000, 38) (150000,) . labels= data_norm.accepted features= X_norm fig= plt.figure(figsize=(12,10)) models= [CatBoostClassifier(depth=10,logging_level=&#39;Silent&#39;, random_seed=42), XGBClassifier(n_estimators=10, max_depth=4), tree.DecisionTreeClassifier(random_state= 42)] CV= 5 cv_df= pd.DataFrame(index= range(CV * len(models))) entries= [] for model in models: model_name= model.__class__.__name__ accuracies= cross_val_score(model, features, labels, scoring= &#39;accuracy&#39;, cv= CV) for fold_idx, accuracy in enumerate(accuracies): entries.append((model_name, fold_idx, accuracy)) cv_df= pd.DataFrame(entries, columns=[&#39;model_name&#39;, &#39;fold_idx&#39;, &#39;accuracy&#39;]) sns.boxplot(x= &#39;model_name&#39;, y= &#39;accuracy&#39;, data= cv_df) sns.stripplot(x= &#39;model_name&#39;, y= &#39;accuracy&#39;, data= cv_df, size= 8, jitter= True, edgecolor= &quot;gray&quot;, linewidth= 2) plt.show() print(cv_df.groupby(&#39;model_name&#39;).accuracy.mean()) . model_name CatBoostClassifier 0.726900 DecisionTreeClassifier 0.632066 XGBClassifier 0.708804 Name: accuracy, dtype: float64 . models= [CatBoostClassifier(depth=10,logging_level=&#39;Silent&#39;, random_seed=42), XGBClassifier(n_estimators=10, max_depth=4), tree.DecisionTreeClassifier(random_state= 42)] result_df= pd.DataFrame(columns=[&#39;classifiers&#39;, &#39;fpr&#39;,&#39;tpr&#39;,&#39;auc&#39;]) for model in models: model_name= model.__class__.__name__ model_fit=model.fit(X_train_norm,y_train_norm) y_prob_norm= model_fit.predict_proba(X_test_norm)[::,1] fpr, tpr, threshold = sklm.roc_curve(y_test_norm, y_prob_norm) auc = sklm.auc(fpr, tpr) result_df= result_df.append({&#39;model_name&#39;:model_name,&#39;fpr&#39;:fpr, &#39;tpr&#39;:tpr,&#39;auc&#39;:auc}, ignore_index=True) result_df.set_index(&#39;model_name&#39;, inplace=True) fig= plt.figure(figsize=(+8,6)) pl.style.use(&#39;ggplot&#39;) for i in result_df.index: plt.plot(result_df.loc[i][&#39;fpr&#39;], result_df.loc[i][&#39;tpr&#39;], label=&quot;{}, AUC={:.2f}&quot;.format(i, result_df.loc[i][&#39;auc&#39;])) plt.plot([0,1],[0,1], color=&#39;red&#39;,linestyle=&#39;--&#39;) plt.xticks(np.arange(0.0,1.1,step=0.1)) plt.xlabel(&quot;False Postive Rate&quot;, fontsize=15) plt.yticks(np.arange(0.0,1.1,step=0.1)) plt.ylabel(&quot;True Positive Rate&quot;,fontsize=15) plt.title(&quot;Reciever Operating Charateristic&quot;) plt.legend(prop={&#39;size&#39;:13}, loc=&#39;lower right&#39;) plt.show() . From Comparing results from Non normalized features and normalized features. We see that the accuracy of non normalized features is slightly higher than normalized features. With results we preceed to using non-normalized features for tunning and feature training. . Tunning of Catboost model . import hyperopt import sys from frozendict import frozendict import shap shap.initjs() . class UAClassifierObjective(object): def __init__(self, dataset, const_params, fold_count): self._dataset = dataset self._const_params = const_params.copy() self._fold_count = fold_count self._evaluated_count = 0 def _to_catboost_params(self, hyper_params): return { &#39;learning_rate&#39;: hyper_params[&#39;learning_rate&#39;], &#39;depth&#39;: hyper_params[&#39;depth&#39;], &#39;l2_leaf_reg&#39;: hyper_params[&#39;l2_leaf_reg&#39;]} # hyperopt optimizes an objective using `__call__` method (e.g. by doing # `foo(hyper_params)`), so we provide one def __call__(self, hyper_params): # join hyper-parameters provided by hyperopt with hyper-parameters # provided by the user params = self._to_catboost_params(hyper_params) params.update(self._const_params) print(&#39;evaluating params={}&#39;.format(params), file=sys.stdout) sys.stdout.flush() # we use cross-validation for objective evaluation, to avoid overfitting scores = cb.cv( pool=self._dataset, params=params, fold_count=self._fold_count, partition_random_seed=42, verbose=False) # scores returns a dictionary with mean and std (per-fold) of metric # value for each cv iteration, we choose minimal value of objective # mean (though it will be better to choose minimal value among all folds) # because noise is additive min_mean_auc = np.min(scores[&#39;test-AUC-mean&#39;]) print(&#39;evaluated score={}&#39;.format(min_mean_auc), file=sys.stdout) self._evaluated_count += 1 print(&#39;evaluated {} times&#39;.format(self._evaluated_count), file=sys.stdout) # negate because hyperopt minimizes the objective return {&#39;loss&#39;: -min_mean_auc, &#39;status&#39;: hyperopt.STATUS_OK} . def find_best_hyper_params(dataset, const_params, max_evals=100): # we are going to optimize these three parameters, though there are a lot more of them (see CatBoost docs) parameter_space = { &#39;learning_rate&#39;: hyperopt.hp.uniform(&#39;learning_rate&#39;, 0.2, 1.0), &#39;depth&#39;: hyperopt.hp.randint(&#39;depth&#39;, 7), &#39;l2_leaf_reg&#39;: hyperopt.hp.uniform(&#39;l2_leaf_reg&#39;, 1, 10)} objective = UAClassifierObjective(dataset=dataset, const_params=const_params, fold_count=6) trials = hyperopt.Trials() best = hyperopt.fmin( fn=objective, space=parameter_space, algo=hyperopt.rand.suggest, max_evals=max_evals, rstate=np.random.RandomState(seed=42)) return best def train_best_model(X, y, const_params, max_evals=100, use_default=False): # convert pandas.DataFrame to catboost.Pool to avoid converting it on each # iteration of hyper-parameters optimization dataset = cb.Pool(X, y, cat_features=categorical_features_indices) if use_default: # pretrained optimal parameters best = { &#39;learning_rate&#39;: 0.4234185321620083, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 9.464266235679002} else: best = find_best_hyper_params(dataset, const_params, max_evals=max_evals) # merge subset of hyper-parameters provided by hyperopt with hyper-parameters # provided by the user hyper_params = best.copy() hyper_params.update(const_params) # drop `use_best_model` because we are going to use entire dataset for # training of the final model hyper_params.pop(&#39;use_best_model&#39;, None) model = cb.CatBoostClassifier(**hyper_params) model.fit(dataset, verbose=False) return model, hyper_params . import time start=time.time() have_gpu = False # skip hyper-parameter optimization and just use provided optimal parameters use_optimal_pretrained_params = False # number of iterations of hyper-parameter search hyperopt_iterations = 50 const_params = frozendict({ &#39;task_type&#39;: &#39;GPU&#39; if have_gpu else &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42}) model, params = train_best_model( X_train, y_train, const_params, max_evals=hyperopt_iterations, use_default=use_optimal_pretrained_params) print(&#39;best params are {}&#39;.format(params), file=sys.stdout) end = time.time() print(end-start) . evaluating params={&#39;learning_rate&#39;: 0.5637608417770977, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 8.493688290834637, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.749250579565882 evaluated 1 times evaluating params={&#39;learning_rate&#39;: 0.528083167082651, &#39;depth&#39;: 3, &#39;l2_leaf_reg&#39;: 7.549531688595925, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7310254089012167 evaluated 2 times evaluating params={&#39;learning_rate&#39;: 0.8699106844426274, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 8.949837496427758, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 3 times evaluating params={&#39;learning_rate&#39;: 0.5558660098409214, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 9.268502695024392, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 4 times evaluating params={&#39;learning_rate&#39;: 0.8499167906858907, &#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 2.546844052569046, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7734748121140296 evaluated 5 times evaluating params={&#39;learning_rate&#39;: 0.8396427532857385, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 4.942262677968309, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 6 times evaluating params={&#39;learning_rate&#39;: 0.7872224143884547, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 9.454327638424944, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 7 times evaluating params={&#39;learning_rate&#39;: 0.693663486801853, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 7.978279409450941, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 8 times evaluating params={&#39;learning_rate&#39;: 0.63472245415225, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 9.280083037935846, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7623741421835207 evaluated 9 times evaluating params={&#39;learning_rate&#39;: 0.9643823890479426, &#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 7.3055930015922925, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.773471890147901 evaluated 10 times evaluating params={&#39;learning_rate&#39;: 0.2029042458037946, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 8.360470176973763, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.749250579565882 evaluated 11 times evaluating params={&#39;learning_rate&#39;: 0.9033087097584362, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 4.226333703160277, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 12 times evaluating params={&#39;learning_rate&#39;: 0.905182734106353, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 3.7653234749986546, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 13 times evaluating params={&#39;learning_rate&#39;: 0.6216878461972857, &#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 1.1186473207406844, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7734841160115428 evaluated 14 times evaluating params={&#39;learning_rate&#39;: 0.7096272251393012, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 9.288835555293193, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 15 times evaluating params={&#39;learning_rate&#39;: 0.6666954285134632, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 6.760090014166223, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 16 times evaluating params={&#39;learning_rate&#39;: 0.6126656895443174, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 2.122305933450838, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 17 times evaluating params={&#39;learning_rate&#39;: 0.7536883616570151, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 7.129352121946425, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 18 times evaluating params={&#39;learning_rate&#39;: 0.4305107282251851, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 7.252206709468439, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 19 times evaluating params={&#39;learning_rate&#39;: 0.5182286954655402, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 8.87600708641634, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7623741421835207 evaluated 20 times evaluating params={&#39;learning_rate&#39;: 0.2782680588629646, &#39;depth&#39;: 3, &#39;l2_leaf_reg&#39;: 7.606937685716839, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7310254089012167 evaluated 21 times evaluating params={&#39;learning_rate&#39;: 0.5596670546087271, &#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 2.0726141256143755, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7734748121140296 evaluated 22 times evaluating params={&#39;learning_rate&#39;: 0.46449369289712517, &#39;depth&#39;: 3, &#39;l2_leaf_reg&#39;: 6.339387901117264, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7310254089012167 evaluated 23 times evaluating params={&#39;learning_rate&#39;: 0.8314498467716105, &#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 2.3992161107439527, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7734748121140296 evaluated 24 times evaluating params={&#39;learning_rate&#39;: 0.94205821260823, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 6.774791231932208, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 25 times evaluating params={&#39;learning_rate&#39;: 0.4643443332702141, &#39;depth&#39;: 3, &#39;l2_leaf_reg&#39;: 3.7415118170244104, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7310275811755531 evaluated 26 times evaluating params={&#39;learning_rate&#39;: 0.8642659638603969, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 7.341252418608859, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 27 times evaluating params={&#39;learning_rate&#39;: 0.7294189282659973, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 1.0626887985889903, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7623793574052168 evaluated 28 times evaluating params={&#39;learning_rate&#39;: 0.48343522785711396, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 6.710418002699299, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.749250579565882 evaluated 29 times evaluating params={&#39;learning_rate&#39;: 0.7210562330475281, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 6.850395695432215, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7623741421835207 evaluated 30 times evaluating params={&#39;learning_rate&#39;: 0.5401179224561183, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 2.184936328120133, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7492519266208718 evaluated 31 times evaluating params={&#39;learning_rate&#39;: 0.6308365875061976, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 3.850918241301665, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 32 times evaluating params={&#39;learning_rate&#39;: 0.30502207676284404, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 6.181142547861167, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7623741421835207 evaluated 33 times evaluating params={&#39;learning_rate&#39;: 0.6292005093922117, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 6.62131414290977, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.749250579565882 evaluated 34 times evaluating params={&#39;learning_rate&#39;: 0.4610454641190919, &#39;depth&#39;: 2, &#39;l2_leaf_reg&#39;: 6.43044823439896, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7178748842690442 evaluated 35 times evaluating params={&#39;learning_rate&#39;: 0.6292458327974482, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 2.6565212671416507, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7492519266208718 evaluated 36 times evaluating params={&#39;learning_rate&#39;: 0.5464785404218941, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 5.469164797061436, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 37 times evaluating params={&#39;learning_rate&#39;: 0.8815589660398113, &#39;depth&#39;: 3, &#39;l2_leaf_reg&#39;: 7.762603832174364, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7310254089012167 evaluated 38 times evaluating params={&#39;learning_rate&#39;: 0.7673527934998763, &#39;depth&#39;: 5, &#39;l2_leaf_reg&#39;: 1.3354940643295945, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7623793574052168 evaluated 39 times evaluating params={&#39;learning_rate&#39;: 0.9509122562293137, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 8.157368633221372, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 40 times evaluating params={&#39;learning_rate&#39;: 0.37343651242935033, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 9.120965626738386, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 41 times evaluating params={&#39;learning_rate&#39;: 0.5825104357671131, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 7.375442989938085, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.749250579565882 evaluated 42 times evaluating params={&#39;learning_rate&#39;: 0.6370940109439119, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 3.310896149885864, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 43 times evaluating params={&#39;learning_rate&#39;: 0.9703050878380732, &#39;depth&#39;: 3, &#39;l2_leaf_reg&#39;: 4.42644166211115, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.7310254089012167 evaluated 44 times evaluating params={&#39;learning_rate&#39;: 0.6909652662226076, &#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 8.067461444538466, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.773471890147901 evaluated 45 times evaluating params={&#39;learning_rate&#39;: 0.44765747767757863, &#39;depth&#39;: 4, &#39;l2_leaf_reg&#39;: 9.72685862525973, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.749250579565882 evaluated 46 times evaluating params={&#39;learning_rate&#39;: 0.4380272549876373, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 3.2977280073078528, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 47 times evaluating params={&#39;learning_rate&#39;: 0.2033304608226356, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 9.813523901250528, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 48 times evaluating params={&#39;learning_rate&#39;: 0.9619808422033007, &#39;depth&#39;: 1, &#39;l2_leaf_reg&#39;: 8.88997567856084, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.6790411481213688 evaluated 49 times evaluating params={&#39;learning_rate&#39;: 0.990250545808629, &#39;depth&#39;: 0, &#39;l2_leaf_reg&#39;: 4.183924523770489, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} evaluated score=0.5 evaluated 50 times 100%|██████████| 50/50 [2:56:50&lt;00:00, 171.83s/it, best loss: -0.7734841160115428] . Warning: Custom metrics will not be evaluated because there are no test datasets . best params are {&#39;depth&#39;: 6, &#39;l2_leaf_reg&#39;: 1.1186473207406844, &#39;learning_rate&#39;: 0.6216878461972857, &#39;task_type&#39;: &#39;CPU&#39;, &#39;loss_function&#39;: &#39;Logloss&#39;, &#39;eval_metric&#39;: &#39;AUC&#39;, &#39;custom_metric&#39;: [&#39;AUC&#39;], &#39;iterations&#39;: 100, &#39;random_seed&#39;: 42} 10644.765050649643 . probabilities = model.predict_proba(data=X_test) print_metrics(y_test, probabilities, 0.51) . Confusion Matrix Score Positive Score Negative Actual Positive 51767 22864 Actual Negative 17783 57586 Accuracy 0.73 AUC 0.81 Macro Precision 0.73 Macro Recall 0.73 Positive Negative Num Case 74631 75369 Precision 0.74 0.72 Recall 0.69 0.76 F1 0.72 0.74 . plot_auc(y_test, probabilities, 0.50) . from catboost import CatBoostClassifier clf_cb= CatBoostClassifier(iterations=2500, depth=10,logging_level=&#39;Silent&#39;, learning_rate=0.01,eval_metric=&#39;Accuracy&#39;,use_best_model=True, random_seed=42) clf_cb.fit(X_test, y_test, cat_features= categorical_features_indices, eval_set=(X_test,y_test)) . &lt;catboost.core.CatBoostClassifier at 0x7f8deae5cf10&gt; . probabilities= clf_cb.predict_proba(data= X_test) print_metrics(y_test, probabilities, 0.51) . Confusion Matrix Score Positive Score Negative Actual Positive 54448 20183 Actual Negative 13663 61706 Accuracy 0.77 AUC 0.86 Macro Precision 0.78 Macro Recall 0.77 Positive Negative Num Case 74631 75369 Precision 0.80 0.75 Recall 0.73 0.82 F1 0.76 0.78 . plot_auc(y_test, probabilities, 0.51) . from catboost import CatBoostClassifier clf_cb= CatBoostClassifier(iterations=2500, depth=6,logging_level=&#39;Silent&#39;, learning_rate=0.3548362548720143,eval_metric=&#39;Accuracy&#39;,l2_leaf_reg=2.683829844728577, use_best_model=True, random_seed=42) clf_cb.fit(X_test, y_test, cat_features= categorical_features_indices, eval_set=(X_test,y_test)) . &lt;catboost.core.CatBoostClassifier at 0x7f8e296d41d0&gt; . probabilities= clf_cb.predict_proba(data= X_test) print_metrics(y_test, probabilities, 0.51) . Confusion Matrix Score Positive Score Negative Actual Positive 58500 16131 Actual Negative 12622 62747 Accuracy 0.81 AUC 0.89 Macro Precision 0.81 Macro Recall 0.81 Positive Negative Num Case 74631 75369 Precision 0.82 0.80 Recall 0.78 0.83 F1 0.80 0.81 . plot_auc(y_test, probabilities, 0.50) . tunning and optimizing catboost algorithm . final_score = clf_cb.predict(data=x_predict) final_score= final_score.astype(np.int) submit= pd.DataFrame({&#39;row_id&#39;:x_predict[&#39;row_id&#39;],&#39;accepted&#39;:final_score}) submit.to_csv(&#39;submission.csv&#39;, index=False) . Catboost Classifier Feature Importance . clf_cb.get_feature_importance(prettified=True) . Feature Index Importances . 0 county_code | 10.394392 | . 1 LARM | 9.530536 | . 2 applicant_income | 6.364388 | . 3 lender | 5.648429 | . 4 state_code | 5.553903 | . 5 LDPR | 5.433531 | . 6 minority_population_pct | 5.136094 | . 7 LLT | 5.083558 | . 8 loan_amount | 5.001768 | . 9 ffiecmedian_family_income | 4.999677 | . 10 population | 4.665573 | . 11 number_of_owner-occupied_units | 4.295008 | . 12 number_of_1_to_4_family_units | 4.156638 | . 13 msa_md | 3.210549 | . 14 MSDARM | 3.206498 | . 15 PTLP | 2.540563 | . 16 tract_to_msa_md_income_pct | 2.470535 | . 17 applicant_race | 2.337708 | . 18 preapproval | 1.836922 | . 19 loan_purpose | 1.757151 | . 20 loan_type | 1.600887 | . 21 applicant_sex | 1.437460 | . 22 applicant_ethnicity | 1.344018 | . 23 occupancy | 1.038224 | . 24 co_applicant | 0.607123 | . 25 property_type | 0.347833 | . 26 row_id | 0.001035 | . shap_values = clf_cb.get_feature_importance(cb.Pool(X, y, cat_features=categorical_features_indices), type=&#39;ShapValues&#39;) . expected_value = shap_values[0,-1] shap_values = shap_values[:,:-1] . shap.summary_plot(shap_values, X) . # across the whole dataset cat_features= data[cat_vars] def plot_shap(cat_cols): for col in cat_cols: shap.dependence_plot(col, shap_values, X) # plotting data for categorical variables plot_shap(cat_features) . # (sum of SHAP value magnitudes over the validation dataset) top_inds = np.argsort(-np.sum(np.abs(shap_values), 0)) # make SHAP plots of the three most important features for i in range(20): shap.dependence_plot(top_inds[i], shap_values, X) . shap_values = clf_cb.get_feature_importance(cb.Pool(X, y, cat_features=categorical_features_indices), type=&#39;ShapValues&#39;) . expected_value = shap_values[0,-1] shap_values = shap_values[:,:-1] . shap.summary_plot(shap_values, X) . Conclusion . Binary Classification: Approved / Denied . Need for application: Help customer and financial institution know if customers are eligible for mortgage approval or not. . Optimizing model: After training the model we sort out to optimize our model. Using Bayesian methods the model improved, optimal parameters were found to be depth=6, l2_leaf_reg=1.119 and learning rate= 0.622. These parameters provided an AUC-ROC of 0.81 and an accuracy of 0.73 at 100 iterations. Increasing the iteration to 2500, we achieved an AUC-ROC of 0.89 and accuracy of 0.81. . In conclusion, we can see that mortgage loan approvals can be done using data from traditional loan application without having key industry features such as credit history, debt to income ratio, etc at an accuracy of 81%. Also, we identified geographical features such as state, country and Metropolitan Statistical Area/ Metropolitan Division codes for the property tract has higher feature importance for our model. Other features that have high importance include lender, applicant income and applicant race. Lastly, a few bits of census information such as the percentage of minorities in the population for that tract and the FFIEC median family income for the MSA/MD which the tract is located had some feature importance to the model. . .",
            "url": "https://emilearthur.github.io/fastblog/2019/08/31/Mortgage_approval_analysis.html",
            "relUrl": "/2019/08/31/Mortgage_approval_analysis.html",
            "date": " • Aug 31, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi 👋, I&#39;m Emile Bondzie-Arthur . Currently running Product and IT at Fido MicroCredit Limited (B2C fintech company) in Accra, Ghana. Love Data and working with Data. Before Fido, I worked as an Assistant Project Manager at the Electricty Company of Ghana. Also, sometimes work with Omdena in using AI to solve social problems. . . 🌱 I’m currently learning PyTorch &amp; Deep Learning stuff, Fastai &amp; More python . | 👨‍💻 All of my projects are available at https://emilearthur.github.io/ . | . Also, I am working on becoming a ML engineer or software engineer (data and analytics). . &nbsp; . 📫 How to reach me frederickauthur@hotmail.com . 🔗 Linkedin https://www.linkedin.com/in/frederickemile . 💻 Kaggle https://www.kaggle.com/frederickemile . Here is my CV .",
          "url": "https://emilearthur.github.io/fastblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://emilearthur.github.io/fastblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}